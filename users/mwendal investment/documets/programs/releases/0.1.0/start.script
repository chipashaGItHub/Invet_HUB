%% coding: utf-8
{script,
    {"invet_hub_dev","0.1.0"},
    [{preLoaded,
         [atomics,counters,erl_prim_loader,erl_tracer,erlang,erts_code_purger,
          erts_dirty_process_signal_handler,erts_internal,
          erts_literal_area_collector,init,otp_ring0,persistent_term,
          prim_buffer,prim_eval,prim_file,prim_inet,prim_zip,zlib]},
     {progress,preloaded},
     {path,["$ROOT/lib/kernel-6.3/ebin","$ROOT/lib/stdlib-3.8/ebin"]},
     {primLoad,
         [error_handler,application,application_controller,application_master,
          code,code_server,erl_eval,erl_lint,erl_parse,error_logger,ets,file,
          filename,file_server,file_io_server,gen,gen_event,gen_server,heart,
          kernel,logger,logger_filters,logger_server,logger_backend,
          logger_config,logger_simple_h,lists,proc_lib,supervisor]},
     {kernel_load_completed},
     {progress,kernel_load_completed},
     {path,["$ROOT/lib/kernel-6.3/ebin"]},
     {primLoad,
         [application_starter,auth,disk_log,disk_log_1,disk_log_server,
          disk_log_sup,dist_ac,dist_util,erl_boot_server,erl_ddll,
          erl_distribution,erl_epmd,erl_reply,erl_signal_handler,erts_debug,
          gen_sctp,gen_tcp,gen_udp,global,global_group,global_search,group,
          group_history,hipe_unified_loader,inet,inet6_sctp,inet6_tcp,
          inet6_tcp_dist,inet6_udp,inet_config,inet_db,inet_dns,
          inet_gethost_native,inet_hosts,inet_parse,inet_res,inet_sctp,
          inet_tcp,inet_tcp_dist,inet_udp,kernel_config,kernel_refc,local_tcp,
          local_udp,logger_disk_log_h,logger_formatter,logger_h_common,
          logger_handler_watcher,logger_olp,logger_proxy,logger_std_h,
          logger_sup,net,net_adm,net_kernel,os,pg2,ram_file,raw_file_io,
          raw_file_io_compressed,raw_file_io_deflate,raw_file_io_delayed,
          raw_file_io_inflate,raw_file_io_list,raw_file_io_raw,rpc,seq_trace,
          standard_error,user,user_drv,user_sup,wrap_log_reader]},
     {path,["$ROOT/lib/stdlib-3.8/ebin"]},
     {primLoad,
         [array,base64,beam_lib,binary,c,calendar,dets,dets_server,dets_sup,
          dets_utils,dets_v9,dict,digraph,digraph_utils,edlin,edlin_expand,
          epp,erl_abstract_code,erl_anno,erl_bits,erl_compile,erl_error,
          erl_expand_records,erl_internal,erl_posix_msg,erl_pp,erl_scan,
          erl_tar,error_logger_file_h,error_logger_tty_h,escript,eval_bits,
          file_sorter,filelib,gb_sets,gb_trees,gen_fsm,gen_statem,io,io_lib,
          io_lib_format,io_lib_fread,io_lib_pretty,log_mf_h,maps,math,
          ms_transform,orddict,ordsets,otp_internal,pool,proplists,qlc,qlc_pt,
          queue,rand,random,re,sets,shell,shell_default,slave,sofs,string,
          supervisor_bridge,sys,timer,unicode,unicode_util,uri_string,
          win32reg,zip]},
     {path,["$ROOT/lib/compiler-7.3.2/ebin"]},
     {primLoad,
         [beam_a,beam_asm,beam_block,beam_bs,beam_bsm,beam_clean,beam_dead,
          beam_dict,beam_disasm,beam_except,beam_flatten,beam_jump,
          beam_listing,beam_opcodes,beam_peep,beam_receive,beam_record,
          beam_reorder,beam_split,beam_trim,beam_type,beam_utils,
          beam_validator,beam_z,cerl,cerl_clauses,cerl_inline,cerl_sets,
          cerl_trees,compile,core_lib,core_lint,core_parse,core_pp,core_scan,
          erl_bifs,rec_env,sys_core_alias,sys_core_bsm,sys_core_dsetel,
          sys_core_fold,sys_core_fold_lists,sys_core_inline,
          sys_pre_attributes,v3_codegen,v3_core,v3_kernel,v3_kernel_pp]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/elixir-1.10.1/ebin"]},
     {primLoad,
         ['Elixir.Access','Elixir.Agent','Elixir.Agent.Server',
          'Elixir.Application','Elixir.ArgumentError',
          'Elixir.ArithmeticError','Elixir.Atom','Elixir.BadArityError',
          'Elixir.BadBooleanError','Elixir.BadFunctionError',
          'Elixir.BadMapError','Elixir.BadStructError','Elixir.Base',
          'Elixir.Behaviour','Elixir.Bitwise','Elixir.Calendar',
          'Elixir.Calendar.ISO','Elixir.Calendar.TimeZoneDatabase',
          'Elixir.Calendar.UTCOnlyTimeZoneDatabase','Elixir.CaseClauseError',
          'Elixir.Code','Elixir.Code.Formatter','Elixir.Code.Identifier',
          'Elixir.Code.LoadError','Elixir.Code.Typespec','Elixir.Collectable',
          'Elixir.Collectable.BitString','Elixir.Collectable.File.Stream',
          'Elixir.Collectable.HashDict','Elixir.Collectable.HashSet',
          'Elixir.Collectable.IO.Stream','Elixir.Collectable.List',
          'Elixir.Collectable.Map','Elixir.Collectable.MapSet',
          'Elixir.CompileError','Elixir.CondClauseError','Elixir.Config',
          'Elixir.Config.Provider','Elixir.Config.Reader','Elixir.Date',
          'Elixir.Date.Range','Elixir.DateTime','Elixir.Dict',
          'Elixir.DynamicSupervisor','Elixir.Enum','Elixir.Enum.EmptyError',
          'Elixir.Enum.OutOfBoundsError','Elixir.Enumerable',
          'Elixir.Enumerable.Date.Range','Elixir.Enumerable.File.Stream',
          'Elixir.Enumerable.Function','Elixir.Enumerable.GenEvent.Stream',
          'Elixir.Enumerable.HashDict','Elixir.Enumerable.HashSet',
          'Elixir.Enumerable.IO.Stream','Elixir.Enumerable.List',
          'Elixir.Enumerable.Map','Elixir.Enumerable.MapSet',
          'Elixir.Enumerable.Range','Elixir.Enumerable.Stream',
          'Elixir.ErlangError','Elixir.Exception','Elixir.File',
          'Elixir.File.CopyError','Elixir.File.Error','Elixir.File.LinkError',
          'Elixir.File.RenameError','Elixir.File.Stat','Elixir.File.Stream',
          'Elixir.Float','Elixir.Function','Elixir.FunctionClauseError',
          'Elixir.GenEvent','Elixir.GenEvent.Stream','Elixir.GenServer',
          'Elixir.HashDict','Elixir.HashSet','Elixir.IO','Elixir.IO.ANSI',
          'Elixir.IO.ANSI.Docs','Elixir.IO.ANSI.Sequence','Elixir.IO.Stream',
          'Elixir.IO.StreamError','Elixir.Inspect','Elixir.Inspect.Algebra',
          'Elixir.Inspect.Any','Elixir.Inspect.Atom',
          'Elixir.Inspect.BitString','Elixir.Inspect.Date',
          'Elixir.Inspect.Date.Range','Elixir.Inspect.DateTime',
          'Elixir.Inspect.Error','Elixir.Inspect.Float',
          'Elixir.Inspect.Function','Elixir.Inspect.HashDict',
          'Elixir.Inspect.HashSet','Elixir.Inspect.Integer',
          'Elixir.Inspect.List','Elixir.Inspect.Macro.Env',
          'Elixir.Inspect.Map','Elixir.Inspect.MapSet',
          'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
          'Elixir.Inspect.PID','Elixir.Inspect.Port','Elixir.Inspect.Range',
          'Elixir.Inspect.Reference','Elixir.Inspect.Regex',
          'Elixir.Inspect.Stream','Elixir.Inspect.Time',
          'Elixir.Inspect.Tuple','Elixir.Inspect.Version',
          'Elixir.Inspect.Version.Requirement','Elixir.Integer',
          'Elixir.Kernel','Elixir.Kernel.CLI','Elixir.Kernel.ErrorHandler',
          'Elixir.Kernel.LexicalTracker','Elixir.Kernel.ParallelCompiler',
          'Elixir.Kernel.ParallelRequire','Elixir.Kernel.SpecialForms',
          'Elixir.Kernel.Typespec','Elixir.Kernel.Utils','Elixir.KeyError',
          'Elixir.Keyword','Elixir.List','Elixir.List.Chars',
          'Elixir.List.Chars.Atom','Elixir.List.Chars.BitString',
          'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
          'Elixir.List.Chars.List','Elixir.Macro','Elixir.Macro.Env',
          'Elixir.Map','Elixir.MapSet','Elixir.MatchError','Elixir.Module',
          'Elixir.Module.Checker','Elixir.Module.LocalsTracker',
          'Elixir.Module.ParallelChecker','Elixir.Module.Types',
          'Elixir.Module.Types.Expr','Elixir.Module.Types.Helpers',
          'Elixir.Module.Types.Infer','Elixir.Module.Types.Pattern',
          'Elixir.NaiveDateTime','Elixir.Node','Elixir.OptionParser',
          'Elixir.OptionParser.ParseError','Elixir.Path',
          'Elixir.Path.Wildcard','Elixir.Port','Elixir.Process',
          'Elixir.Protocol','Elixir.Protocol.UndefinedError','Elixir.Range',
          'Elixir.Record','Elixir.Record.Extractor','Elixir.Regex',
          'Elixir.Regex.CompileError','Elixir.Registry',
          'Elixir.Registry.Partition','Elixir.Registry.Supervisor',
          'Elixir.RuntimeError','Elixir.Set','Elixir.Stream',
          'Elixir.Stream.Reducers','Elixir.String','Elixir.String.Break',
          'Elixir.String.Casing','Elixir.String.Chars',
          'Elixir.String.Chars.Atom','Elixir.String.Chars.BitString',
          'Elixir.String.Chars.Date','Elixir.String.Chars.DateTime',
          'Elixir.String.Chars.Float','Elixir.String.Chars.Integer',
          'Elixir.String.Chars.List','Elixir.String.Chars.NaiveDateTime',
          'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
          'Elixir.String.Chars.Version',
          'Elixir.String.Chars.Version.Requirement','Elixir.String.Tokenizer',
          'Elixir.String.Unicode','Elixir.StringIO','Elixir.Supervisor',
          'Elixir.Supervisor.Default','Elixir.Supervisor.Spec',
          'Elixir.SyntaxError','Elixir.System','Elixir.SystemLimitError',
          'Elixir.Task','Elixir.Task.Supervised','Elixir.Task.Supervisor',
          'Elixir.Time','Elixir.TokenMissingError','Elixir.TryClauseError',
          'Elixir.Tuple','Elixir.URI','Elixir.UndefinedFunctionError',
          'Elixir.UnicodeConversionError','Elixir.Version',
          'Elixir.Version.InvalidRequirementError',
          'Elixir.Version.InvalidVersionError','Elixir.Version.Parser',
          'Elixir.Version.Requirement','Elixir.WithClauseError',elixir,
          elixir_aliases,elixir_bitstring,elixir_bootstrap,elixir_clauses,
          elixir_code_server,elixir_compiler,elixir_config,elixir_def,
          elixir_dispatch,elixir_env,elixir_erl,elixir_erl_clauses,
          elixir_erl_compiler,elixir_erl_for,elixir_erl_pass,elixir_erl_try,
          elixir_erl_var,elixir_errors,elixir_expand,elixir_fn,elixir_import,
          elixir_interpolation,elixir_lexical,elixir_locals,elixir_map,
          elixir_module,elixir_overridable,elixir_parser,elixir_quote,
          elixir_rewrite,elixir_sup,elixir_tokenizer,elixir_utils]},
     {path,["$ROOT/lib/sasl-3.3/ebin"]},
     {primLoad,
         [alarm_handler,erlsrv,format_lib_supp,misc_supp,rb,rb_format_supp,
          release_handler,release_handler_1,sasl,sasl_report,
          sasl_report_file_h,sasl_report_tty_h,systools,systools_lib,
          systools_make,systools_rc,systools_relup]},
     {path,["$ROOT/lib/runtime_tools-1.13.2/ebin"]},
     {primLoad,
         [appmon_info,dbg,dyntrace,erts_alloc_config,msacc,observer_backend,
          runtime_tools,runtime_tools_sup,scheduler,system_information,
          ttb_autostart]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/logger-1.10.1/ebin"]},
     {primLoad,
         ['Elixir.Logger','Elixir.Logger.App',
          'Elixir.Logger.BackendSupervisor','Elixir.Logger.Backends.Console',
          'Elixir.Logger.Config','Elixir.Logger.Counter',
          'Elixir.Logger.Filter','Elixir.Logger.Formatter',
          'Elixir.Logger.Handler','Elixir.Logger.Translator',
          'Elixir.Logger.Utils','Elixir.Logger.Watcher']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/nimble_parsec-0.5.3/ebin"]},
     {primLoad,
         ['Elixir.Mix.Tasks.NimbleParsec.Compile','Elixir.NimbleParsec',
          'Elixir.NimbleParsec.Compiler','Elixir.NimbleParsec.Recorder']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry-0.4.2/ebin"]},
     {primLoad,
         [telemetry,telemetry_app,telemetry_handler_table,telemetry_sup]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/absinthe-1.5.2/ebin"]},
     {primLoad,
         ['Elixir.Absinthe','Elixir.Absinthe.Adapter',
          'Elixir.Absinthe.Adapter.LanguageConventions',
          'Elixir.Absinthe.Adapter.Passthrough',
          'Elixir.Absinthe.Adapter.StrictLanguageConventions',
          'Elixir.Absinthe.Adapter.Underscore',
          'Elixir.Absinthe.AnalysisError','Elixir.Absinthe.Blueprint',
          'Elixir.Absinthe.Blueprint.Directive',
          'Elixir.Absinthe.Blueprint.Document',
          'Elixir.Absinthe.Blueprint.Document.Field',
          'Elixir.Absinthe.Blueprint.Document.Fragment',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Inline',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Named',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Named.Use',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Spread',
          'Elixir.Absinthe.Blueprint.Document.Operation',
          'Elixir.Absinthe.Blueprint.Document.VariableDefinition',
          'Elixir.Absinthe.Blueprint.Draft',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Argument',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.BooleanValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Directive',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.DirectiveDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Document',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValueDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Field',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FieldDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FloatValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Fragment',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FragmentSpread',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InlineFragment',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputValueDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.IntValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InterfaceTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NamedType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NonNullType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NullValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectField',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.OperationDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ScalarTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDeclaration',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.StringValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.TypeExtensionDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.UnionTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Variable',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.VariableDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Atom',
          'Elixir.Absinthe.Blueprint.Draft.List',
          'Elixir.Absinthe.Blueprint.Execution',
          'Elixir.Absinthe.Blueprint.Input',
          'Elixir.Absinthe.Blueprint.Input.Argument',
          'Elixir.Absinthe.Blueprint.Input.Boolean',
          'Elixir.Absinthe.Blueprint.Input.Enum',
          'Elixir.Absinthe.Blueprint.Input.Field',
          'Elixir.Absinthe.Blueprint.Input.Float',
          'Elixir.Absinthe.Blueprint.Input.Generated',
          'Elixir.Absinthe.Blueprint.Input.Integer',
          'Elixir.Absinthe.Blueprint.Input.List',
          'Elixir.Absinthe.Blueprint.Input.Null',
          'Elixir.Absinthe.Blueprint.Input.Object',
          'Elixir.Absinthe.Blueprint.Input.RawValue',
          'Elixir.Absinthe.Blueprint.Input.String',
          'Elixir.Absinthe.Blueprint.Input.Value',
          'Elixir.Absinthe.Blueprint.Input.Variable',
          'Elixir.Absinthe.Blueprint.Input.Variable.Use',
          'Elixir.Absinthe.Blueprint.Result.Leaf',
          'Elixir.Absinthe.Blueprint.Result.List',
          'Elixir.Absinthe.Blueprint.Result.Object',
          'Elixir.Absinthe.Blueprint.Schema',
          'Elixir.Absinthe.Blueprint.Schema.Deprecation',
          'Elixir.Absinthe.Blueprint.Schema.DirectiveDefinition',
          'Elixir.Absinthe.Blueprint.Schema.EnumTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.EnumValueDefinition',
          'Elixir.Absinthe.Blueprint.Schema.FieldDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InputValueDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.SchemaDeclaration',
          'Elixir.Absinthe.Blueprint.Schema.SchemaDefinition',
          'Elixir.Absinthe.Blueprint.Schema.UnionTypeDefinition',
          'Elixir.Absinthe.Blueprint.SourceLocation',
          'Elixir.Absinthe.Blueprint.Transform',
          'Elixir.Absinthe.Blueprint.TypeReference',
          'Elixir.Absinthe.Blueprint.TypeReference.Identifier',
          'Elixir.Absinthe.Blueprint.TypeReference.List',
          'Elixir.Absinthe.Blueprint.TypeReference.Name',
          'Elixir.Absinthe.Blueprint.TypeReference.NonNull',
          'Elixir.Absinthe.Complexity','Elixir.Absinthe.ExecutionError',
          'Elixir.Absinthe.Introspection',
          'Elixir.Absinthe.Introspection.Kind','Elixir.Absinthe.Language',
          'Elixir.Absinthe.Language.Argument',
          'Elixir.Absinthe.Language.BooleanValue',
          'Elixir.Absinthe.Language.Directive',
          'Elixir.Absinthe.Language.DirectiveDefinition',
          'Elixir.Absinthe.Language.Document',
          'Elixir.Absinthe.Language.EnumTypeDefinition',
          'Elixir.Absinthe.Language.EnumValue',
          'Elixir.Absinthe.Language.EnumValueDefinition',
          'Elixir.Absinthe.Language.Field',
          'Elixir.Absinthe.Language.FieldDefinition',
          'Elixir.Absinthe.Language.FloatValue',
          'Elixir.Absinthe.Language.Fragment',
          'Elixir.Absinthe.Language.FragmentSpread',
          'Elixir.Absinthe.Language.InlineFragment',
          'Elixir.Absinthe.Language.InputObjectTypeDefinition',
          'Elixir.Absinthe.Language.InputValueDefinition',
          'Elixir.Absinthe.Language.IntValue',
          'Elixir.Absinthe.Language.InterfaceTypeDefinition',
          'Elixir.Absinthe.Language.ListType',
          'Elixir.Absinthe.Language.ListValue',
          'Elixir.Absinthe.Language.NamedType',
          'Elixir.Absinthe.Language.NonNullType',
          'Elixir.Absinthe.Language.NullValue',
          'Elixir.Absinthe.Language.ObjectField',
          'Elixir.Absinthe.Language.ObjectTypeDefinition',
          'Elixir.Absinthe.Language.ObjectValue',
          'Elixir.Absinthe.Language.OperationDefinition',
          'Elixir.Absinthe.Language.ScalarTypeDefinition',
          'Elixir.Absinthe.Language.SchemaDeclaration',
          'Elixir.Absinthe.Language.SchemaDefinition',
          'Elixir.Absinthe.Language.SelectionSet',
          'Elixir.Absinthe.Language.Source',
          'Elixir.Absinthe.Language.StringValue',
          'Elixir.Absinthe.Language.TypeExtensionDefinition',
          'Elixir.Absinthe.Language.UnionTypeDefinition',
          'Elixir.Absinthe.Language.Variable',
          'Elixir.Absinthe.Language.VariableDefinition',
          'Elixir.Absinthe.Lexer','Elixir.Absinthe.Logger',
          'Elixir.Absinthe.Middleware','Elixir.Absinthe.Middleware.Async',
          'Elixir.Absinthe.Middleware.Batch',
          'Elixir.Absinthe.Middleware.MapGet',
          'Elixir.Absinthe.Middleware.PassParent',
          'Elixir.Absinthe.Middleware.Telemetry','Elixir.Absinthe.Phase',
          'Elixir.Absinthe.Phase.Blueprint','Elixir.Absinthe.Phase.Debug',
          'Elixir.Absinthe.Phase.Document.Arguments.CoerceEnums',
          'Elixir.Absinthe.Phase.Document.Arguments.CoerceLists',
          'Elixir.Absinthe.Phase.Document.Arguments.Data',
          'Elixir.Absinthe.Phase.Document.Arguments.FlagInvalid',
          'Elixir.Absinthe.Phase.Document.Arguments.Normalize',
          'Elixir.Absinthe.Phase.Document.Arguments.Parse',
          'Elixir.Absinthe.Phase.Document.Arguments.VariableTypesMatch',
          'Elixir.Absinthe.Phase.Document.Complexity.Analysis',
          'Elixir.Absinthe.Phase.Document.Complexity.Result',
          'Elixir.Absinthe.Phase.Document.Context',
          'Elixir.Absinthe.Phase.Document.CurrentOperation',
          'Elixir.Absinthe.Phase.Document.Directives',
          'Elixir.Absinthe.Phase.Document.Execution.Resolution',
          'Elixir.Absinthe.Phase.Document.MissingLiterals',
          'Elixir.Absinthe.Phase.Document.MissingVariables',
          'Elixir.Absinthe.Phase.Document.OverrideRoot',
          'Elixir.Absinthe.Phase.Document.Result',
          'Elixir.Absinthe.Phase.Document.Uses',
          'Elixir.Absinthe.Phase.Document.Validation.ArgumentsOfCorrectType',
          'Elixir.Absinthe.Phase.Document.Validation.FieldsOnCorrectType',
          'Elixir.Absinthe.Phase.Document.Validation.KnownArgumentNames',
          'Elixir.Absinthe.Phase.Document.Validation.KnownDirectives',
          'Elixir.Absinthe.Phase.Document.Validation.KnownFragmentNames',
          'Elixir.Absinthe.Phase.Document.Validation.LoneAnonymousOperation',
          'Elixir.Absinthe.Phase.Document.Validation.NoFragmentCycles',
          'Elixir.Absinthe.Phase.Document.Validation.NoUndefinedVariables',
          'Elixir.Absinthe.Phase.Document.Validation.NoUnusedFragments',
          'Elixir.Absinthe.Phase.Document.Validation.NoUnusedVariables',
          'Elixir.Absinthe.Phase.Document.Validation.OnlyOneSubscription',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedAnOperation',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullArguments',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullVariables',
          'Elixir.Absinthe.Phase.Document.Validation.Result',
          'Elixir.Absinthe.Phase.Document.Validation.ScalarLeafs',
          'Elixir.Absinthe.Phase.Document.Validation.SelectedCurrentOperation',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueArgumentNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueFragmentNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueInputFieldNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueOperationNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueVariableNames',
          'Elixir.Absinthe.Phase.Document.Validation.Utils.MessageSuggestions',
          'Elixir.Absinthe.Phase.Document.Validation.VariablesAreInputTypes',
          'Elixir.Absinthe.Phase.Document.Variables',
          'Elixir.Absinthe.Phase.Error','Elixir.Absinthe.Phase.Init',
          'Elixir.Absinthe.Phase.Parse','Elixir.Absinthe.Phase.Schema',
          'Elixir.Absinthe.Phase.Schema.ApplyDeclaration',
          'Elixir.Absinthe.Phase.Schema.Arguments.Data',
          'Elixir.Absinthe.Phase.Schema.Arguments.Normalize',
          'Elixir.Absinthe.Phase.Schema.Arguments.Parse',
          'Elixir.Absinthe.Phase.Schema.Build',
          'Elixir.Absinthe.Phase.Schema.Compile',
          'Elixir.Absinthe.Phase.Schema.Directives',
          'Elixir.Absinthe.Phase.Schema.FieldImports',
          'Elixir.Absinthe.Phase.Schema.Hydrate',
          'Elixir.Absinthe.Phase.Schema.InlineFunctions',
          'Elixir.Absinthe.Phase.Schema.Introspection',
          'Elixir.Absinthe.Phase.Schema.MarkReferenced',
          'Elixir.Absinthe.Phase.Schema.PopulatePersistentTerm',
          'Elixir.Absinthe.Phase.Schema.RegisterTriggers',
          'Elixir.Absinthe.Phase.Schema.TypeImports',
          'Elixir.Absinthe.Phase.Schema.Validation',
          'Elixir.Absinthe.Phase.Schema.Validation.DefaultEnumValuePresent',
          'Elixir.Absinthe.Phase.Schema.Validation.InputOutputTypesCorrectlyPlaced',
          'Elixir.Absinthe.Phase.Schema.Validation.InterfacesMustResolveTypes',
          'Elixir.Absinthe.Phase.Schema.Validation.KnownDirectives',
          'Elixir.Absinthe.Phase.Schema.Validation.NamesMustBeValid',
          'Elixir.Absinthe.Phase.Schema.Validation.NoCircularFieldImports',
          'Elixir.Absinthe.Phase.Schema.Validation.ObjectInterfacesMustBeValid',
          'Elixir.Absinthe.Phase.Schema.Validation.ObjectMustImplementInterfaces',
          'Elixir.Absinthe.Phase.Schema.Validation.QueryTypeMustBeObject',
          'Elixir.Absinthe.Phase.Schema.Validation.Result',
          'Elixir.Absinthe.Phase.Schema.Validation.TypeNamesAreReserved',
          'Elixir.Absinthe.Phase.Schema.Validation.TypeNamesAreUnique',
          'Elixir.Absinthe.Phase.Schema.Validation.TypeReferencesExist',
          'Elixir.Absinthe.Phase.Subscription.Result',
          'Elixir.Absinthe.Phase.Subscription.SubscribeSelf',
          'Elixir.Absinthe.Phase.Telemetry',
          'Elixir.Absinthe.Phase.Validation',
          'Elixir.Absinthe.Phase.Validation.Helpers',
          'Elixir.Absinthe.Phase.Validation.KnownTypeNames',
          'Elixir.Absinthe.Pipeline','Elixir.Absinthe.Pipeline.BatchResolver',
          'Elixir.Absinthe.Pipeline.ErrorResult','Elixir.Absinthe.Plugin',
          'Elixir.Absinthe.Resolution','Elixir.Absinthe.Resolution.Helpers',
          'Elixir.Absinthe.Resolution.Projector','Elixir.Absinthe.Schema',
          'Elixir.Absinthe.Schema.Compiled','Elixir.Absinthe.Schema.Error',
          'Elixir.Absinthe.Schema.Hydrator','Elixir.Absinthe.Schema.Manager',
          'Elixir.Absinthe.Schema.Notation',
          'Elixir.Absinthe.Schema.Notation.Definition',
          'Elixir.Absinthe.Schema.Notation.Error',
          'Elixir.Absinthe.Schema.Notation.SDL',
          'Elixir.Absinthe.Schema.Notation.SDL.Render',
          'Elixir.Absinthe.Schema.PersistentTerm',
          'Elixir.Absinthe.Schema.Prototype',
          'Elixir.Absinthe.Schema.Prototype.Compiled',
          'Elixir.Absinthe.Schema.Prototype.Notation',
          'Elixir.Absinthe.Schema.Provider','Elixir.Absinthe.Schema.Rule',
          'Elixir.Absinthe.SerializationError','Elixir.Absinthe.Subscription',
          'Elixir.Absinthe.Subscription.Local',
          'Elixir.Absinthe.Subscription.Proxy',
          'Elixir.Absinthe.Subscription.ProxySupervisor',
          'Elixir.Absinthe.Subscription.Pubsub',
          'Elixir.Absinthe.Subscription.Supervisor','Elixir.Absinthe.Test',
          'Elixir.Absinthe.Type','Elixir.Absinthe.Type.Argument',
          'Elixir.Absinthe.Type.BuiltIns.Directives',
          'Elixir.Absinthe.Type.BuiltIns.Introspection',
          'Elixir.Absinthe.Type.BuiltIns.Scalars',
          'Elixir.Absinthe.Type.BuiltIns.Scalars.Utils',
          'Elixir.Absinthe.Type.Custom','Elixir.Absinthe.Type.Custom.Decimal',
          'Elixir.Absinthe.Type.Deprecation','Elixir.Absinthe.Type.Directive',
          'Elixir.Absinthe.Type.Enum','Elixir.Absinthe.Type.Enum.Value',
          'Elixir.Absinthe.Type.Fetch','Elixir.Absinthe.Type.Field',
          'Elixir.Absinthe.Type.InputObject','Elixir.Absinthe.Type.Interface',
          'Elixir.Absinthe.Type.List','Elixir.Absinthe.Type.NonNull',
          'Elixir.Absinthe.Type.Object','Elixir.Absinthe.Type.Reference',
          'Elixir.Absinthe.Type.Scalar','Elixir.Absinthe.Type.Union',
          'Elixir.Absinthe.Utils','Elixir.Absinthe.Utils.Suggestion',
          'Elixir.Inspect.Absinthe.Blueprint',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.DirectiveDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.EnumTypeDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.SchemaDeclaration',
          'Elixir.Inspect.Absinthe.Blueprint.Schema.UnionTypeDefinition',
          'Elixir.Inspect.Absinthe.Resolution',
          'Elixir.Mix.Tasks.Absinthe.Schema.Json',
          'Elixir.Mix.Tasks.Absinthe.Schema.Json.Options',
          'Elixir.Mix.Tasks.Absinthe.Schema.Sdl',
          'Elixir.Mix.Tasks.Absinthe.Schema.Sdl.Options',absinthe_parser]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/eex-1.10.1/ebin"]},
     {primLoad,
         ['Elixir.EEx','Elixir.EEx.Compiler','Elixir.EEx.Engine',
          'Elixir.EEx.SmartEngine','Elixir.EEx.SyntaxError',
          'Elixir.EEx.Tokenizer']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/mime-1.3.1/ebin"]},
     {primLoad,['Elixir.MIME','Elixir.MIME.Application']},
     {path,["$ROOT/lib/crypto-4.4.1/ebin"]},
     {primLoad,[crypto,crypto_ec_curves]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug_crypto-1.1.2/ebin"]},
     {primLoad,
         ['Elixir.Plug.Crypto','Elixir.Plug.Crypto.Application',
          'Elixir.Plug.Crypto.KeyGenerator',
          'Elixir.Plug.Crypto.MessageEncryptor',
          'Elixir.Plug.Crypto.MessageVerifier']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug-1.10.3/ebin"]},
     {primLoad,
         ['Elixir.Collectable.Plug.Conn','Elixir.Inspect.Plug.Conn',
          'Elixir.Plug','Elixir.Plug.Adapters.Cowboy',
          'Elixir.Plug.Adapters.Cowboy2','Elixir.Plug.Adapters.Test.Conn',
          'Elixir.Plug.Application','Elixir.Plug.BadRequestError',
          'Elixir.Plug.BasicAuth','Elixir.Plug.Builder',
          'Elixir.Plug.CSRFProtection',
          'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
          'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
          'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
          'Elixir.Plug.Conn.AlreadySentError',
          'Elixir.Plug.Conn.CookieOverflowError','Elixir.Plug.Conn.Cookies',
          'Elixir.Plug.Conn.InvalidHeaderError',
          'Elixir.Plug.Conn.InvalidQueryError',
          'Elixir.Plug.Conn.NotSentError','Elixir.Plug.Conn.Query',
          'Elixir.Plug.Conn.Status','Elixir.Plug.Conn.Unfetched',
          'Elixir.Plug.Conn.Utils','Elixir.Plug.Conn.WrapperError',
          'Elixir.Plug.Debugger','Elixir.Plug.ErrorHandler',
          'Elixir.Plug.Exception','Elixir.Plug.Exception.Any',
          'Elixir.Plug.HTML','Elixir.Plug.Head','Elixir.Plug.Logger',
          'Elixir.Plug.MIME','Elixir.Plug.MethodOverride',
          'Elixir.Plug.Parsers','Elixir.Plug.Parsers.BadEncodingError',
          'Elixir.Plug.Parsers.JSON','Elixir.Plug.Parsers.MULTIPART',
          'Elixir.Plug.Parsers.ParseError',
          'Elixir.Plug.Parsers.RequestTooLargeError',
          'Elixir.Plug.Parsers.URLENCODED',
          'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
          'Elixir.Plug.RequestId','Elixir.Plug.Router',
          'Elixir.Plug.Router.InvalidSpecError',
          'Elixir.Plug.Router.MalformedURIError','Elixir.Plug.Router.Utils',
          'Elixir.Plug.SSL','Elixir.Plug.Session',
          'Elixir.Plug.Session.COOKIE','Elixir.Plug.Session.ETS',
          'Elixir.Plug.Session.Store','Elixir.Plug.Static',
          'Elixir.Plug.Static.InvalidPathError','Elixir.Plug.Telemetry',
          'Elixir.Plug.Test','Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
          'Elixir.Plug.UploadError',plug_multipart]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/absinthe_plug-1.5.0/ebin"]},
     {primLoad,
         ['Elixir.Absinthe.GraphiQL.Validation.NoSubscriptionOnHTTP',
          'Elixir.Absinthe.Plug','Elixir.Absinthe.Plug.Batch.Runner',
          'Elixir.Absinthe.Plug.DocumentProvider',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Check',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Writer',
          'Elixir.Absinthe.Plug.DocumentProvider.Default',
          'Elixir.Absinthe.Plug.GraphiQL',
          'Elixir.Absinthe.Plug.GraphiQL.Assets',
          'Elixir.Absinthe.Plug.Parser','Elixir.Absinthe.Plug.Request',
          'Elixir.Absinthe.Plug.Request.Query','Elixir.Absinthe.Plug.Types',
          'Elixir.Absinthe.Plug.Validation.HTTPMethod',
          'Elixir.Mix.Absinthe.Plug.GraphiQL.AssetsTask',
          'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Download',
          'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Remove']},
     {path,["$ROOT/lib/asn1-5.0.8/ebin"]},
     {primLoad,[asn1rt_nif]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/certifi-2.5.2/ebin"]},
     {primLoad,[certifi]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/unicode_util_compat-0.5.0/ebin"]},
     {primLoad,[string_compat,unicode_util_compat]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/idna-6.0.1/ebin"]},
     {primLoad,
         [idna,idna_bidi,idna_context,idna_data,idna_mapping,idna_table,
          idna_ucs,punycode]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/metrics-1.0.1/ebin"]},
     {primLoad,[metrics,metrics_dummy,metrics_exometer,metrics_folsom]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/mimerl-1.2.0/ebin"]},
     {primLoad,[mimerl]},
     {path,["$ROOT/lib/syntax_tools-2.1.7/ebin"]},
     {primLoad,
         [epp_dodger,erl_comment_scan,erl_prettypr,erl_recomment,erl_syntax,
          erl_syntax_lib,erl_tidy,igor,merl,merl_transform,prettypr]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/parse_trans-3.3.0/ebin"]},
     {primLoad,
         [ct_expand,exprecs,parse_trans,parse_trans_codegen,parse_trans_mod,
          parse_trans_pp]},
     {path,["$ROOT/lib/public_key-1.6.5/ebin"]},
     {primLoad,
         ['OTP-PUB-KEY','PKCS-FRAME',pubkey_cert,pubkey_cert_records,
          pubkey_crl,pubkey_pbe,pubkey_pem,pubkey_ssh,public_key]},
     {path,["$ROOT/lib/ssl-9.2/ebin"]},
     {primLoad,
         [dtls_connection,dtls_connection_sup,dtls_handshake,
          dtls_listener_sup,dtls_packet_demux,dtls_record,dtls_socket,dtls_v1,
          inet6_tls_dist,inet_tls_dist,ssl,ssl_admin_sup,ssl_alert,ssl_app,
          ssl_certificate,ssl_cipher,ssl_cipher_format,ssl_config,
          ssl_connection,ssl_connection_sup,ssl_crl,ssl_crl_cache,
          ssl_crl_cache_api,ssl_crl_hash_dir,ssl_dist_admin_sup,
          ssl_dist_connection_sup,ssl_dist_sup,ssl_handshake,
          ssl_listen_tracker_sup,ssl_manager,ssl_pem_cache,ssl_pkix_db,
          ssl_record,ssl_session,ssl_session_cache,ssl_session_cache_api,
          ssl_srp_primes,ssl_sup,ssl_v3,tls_connection,tls_connection_sup,
          tls_handshake,tls_record,tls_sender,tls_socket,tls_v1]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ssl_verify_fun-1.1.6/ebin"]},
     {primLoad,
         [ssl_verify_fingerprint,ssl_verify_fun_cert_helpers,
          ssl_verify_fun_encodings,ssl_verify_hostname,ssl_verify_pk,
          ssl_verify_string,ssl_verify_util]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/hackney-1.16.0/ebin"]},
     {primLoad,
         [hackney,hackney_app,hackney_bstr,hackney_connect,hackney_connection,
          hackney_connections,hackney_cookie,hackney_date,hackney_headers,
          hackney_headers_new,hackney_http,hackney_http_connect,
          hackney_local_tcp,hackney_manager,hackney_metrics,hackney_multipart,
          hackney_pool,hackney_pool_handler,hackney_request,hackney_response,
          hackney_socks5,hackney_ssl,hackney_ssl_certificate,hackney_stream,
          hackney_sup,hackney_tcp,hackney_trace,hackney_url,hackney_util]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/bamboo-1.5.0/ebin"]},
     {primLoad,
         ['Elixir.Bamboo','Elixir.Bamboo.Adapter',
          'Elixir.Bamboo.AdapterHelper','Elixir.Bamboo.ApiError',
          'Elixir.Bamboo.Attachment','Elixir.Bamboo.DeliverLaterStrategy',
          'Elixir.Bamboo.Email','Elixir.Bamboo.EmptyFromAddressError',
          'Elixir.Bamboo.Formatter','Elixir.Bamboo.Formatter.BitString',
          'Elixir.Bamboo.Formatter.List','Elixir.Bamboo.Formatter.Map',
          'Elixir.Bamboo.Formatter.Tuple',
          'Elixir.Bamboo.ImmediateDeliveryStrategy',
          'Elixir.Bamboo.LocalAdapter','Elixir.Bamboo.Mailer',
          'Elixir.Bamboo.MailgunAdapter','Elixir.Bamboo.MailgunHelper',
          'Elixir.Bamboo.MandrillAdapter','Elixir.Bamboo.MandrillHelper',
          'Elixir.Bamboo.NilRecipientsError','Elixir.Bamboo.Phoenix',
          'Elixir.Bamboo.SendGridAdapter','Elixir.Bamboo.SendGridHelper',
          'Elixir.Bamboo.SentEmail','Elixir.Bamboo.SentEmail.DeliveriesError',
          'Elixir.Bamboo.SentEmail.NoDeliveriesError',
          'Elixir.Bamboo.SentEmailApiPlug',
          'Elixir.Bamboo.SentEmailViewerPlug',
          'Elixir.Bamboo.SentEmailViewerPlug.Helper',
          'Elixir.Bamboo.TaskSupervisorStrategy','Elixir.Bamboo.Test',
          'Elixir.Bamboo.TestAdapter',
          'Elixir.Mix.Tasks.Bamboo.StartSentEmailViewer']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/gen_smtp-0.15.0/ebin"]},
     {primLoad,
         [binstr,gen_smtp_application,gen_smtp_client,gen_smtp_server,
          gen_smtp_server_session,mimemail,smtp_rfc822_parse,
          smtp_server_example,smtp_socket,smtp_util]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/bamboo_smtp-2.1.0/ebin"]},
     {primLoad,
         ['Elixir.Bamboo.SMTPAdapter','Elixir.Bamboo.SMTPAdapter.SMTPError']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/eternal-1.2.1/ebin"]},
     {primLoad,
         ['Elixir.Eternal','Elixir.Eternal.Priv','Elixir.Eternal.Server',
          'Elixir.Eternal.Supervisor','Elixir.Eternal.Table']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/sleeplocks-1.1.1/ebin"]},
     {primLoad,[sleeplocks]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cachex-3.2.0/ebin"]},
     {primLoad,
         ['Elixir.Cachex','Elixir.Cachex.Actions',
          'Elixir.Cachex.Actions.Clear','Elixir.Cachex.Actions.Count',
          'Elixir.Cachex.Actions.Del','Elixir.Cachex.Actions.Dump',
          'Elixir.Cachex.Actions.Empty','Elixir.Cachex.Actions.Exists',
          'Elixir.Cachex.Actions.Expire','Elixir.Cachex.Actions.Export',
          'Elixir.Cachex.Actions.Fetch','Elixir.Cachex.Actions.Get',
          'Elixir.Cachex.Actions.GetAndUpdate','Elixir.Cachex.Actions.Import',
          'Elixir.Cachex.Actions.Incr','Elixir.Cachex.Actions.Inspect',
          'Elixir.Cachex.Actions.Invoke','Elixir.Cachex.Actions.Keys',
          'Elixir.Cachex.Actions.Load','Elixir.Cachex.Actions.Purge',
          'Elixir.Cachex.Actions.Put','Elixir.Cachex.Actions.PutMany',
          'Elixir.Cachex.Actions.Refresh','Elixir.Cachex.Actions.Reset',
          'Elixir.Cachex.Actions.Size','Elixir.Cachex.Actions.Stats',
          'Elixir.Cachex.Actions.Stream','Elixir.Cachex.Actions.Take',
          'Elixir.Cachex.Actions.Touch','Elixir.Cachex.Actions.Transaction',
          'Elixir.Cachex.Actions.Ttl','Elixir.Cachex.Actions.Update',
          'Elixir.Cachex.Application','Elixir.Cachex.Disk',
          'Elixir.Cachex.Errors','Elixir.Cachex.ExecutionError',
          'Elixir.Cachex.Hook','Elixir.Cachex.Options','Elixir.Cachex.Policy',
          'Elixir.Cachex.Policy.LRW','Elixir.Cachex.Query',
          'Elixir.Cachex.Router','Elixir.Cachex.Services',
          'Elixir.Cachex.Services.Courier','Elixir.Cachex.Services.Incubator',
          'Elixir.Cachex.Services.Informant','Elixir.Cachex.Services.Janitor',
          'Elixir.Cachex.Services.Locksmith',
          'Elixir.Cachex.Services.Locksmith.Queue',
          'Elixir.Cachex.Services.Overseer','Elixir.Cachex.Spec',
          'Elixir.Cachex.Spec.Validator','Elixir.Cachex.Stats',
          'Elixir.Cachex.Warmer']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/tzdata-1.0.3/ebin"]},
     {primLoad,
         ['Elixir.Tzdata','Elixir.Tzdata.App','Elixir.Tzdata.BasicDataMap',
          'Elixir.Tzdata.DataBuilder','Elixir.Tzdata.DataLoader',
          'Elixir.Tzdata.EtsHolder','Elixir.Tzdata.FarFutureDynamicPeriods',
          'Elixir.Tzdata.HTTPClient','Elixir.Tzdata.HTTPClient.Hackney',
          'Elixir.Tzdata.LeapSecParser','Elixir.Tzdata.Parser',
          'Elixir.Tzdata.ParserOrganizer','Elixir.Tzdata.PeriodBuilder',
          'Elixir.Tzdata.ReleaseReader','Elixir.Tzdata.ReleaseUpdater',
          'Elixir.Tzdata.TimeZoneDatabase','Elixir.Tzdata.Util']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/calendar-0.17.6/ebin"]},
     {primLoad,
         ['Elixir.Calendar.AmbiguousDateTime','Elixir.Calendar.ContainsDate',
          'Elixir.Calendar.ContainsDate.Calendar.Date',
          'Elixir.Calendar.ContainsDate.Calendar.DateTime',
          'Elixir.Calendar.ContainsDate.Calendar.NaiveDateTime',
          'Elixir.Calendar.ContainsDate.Date',
          'Elixir.Calendar.ContainsDate.DateTime',
          'Elixir.Calendar.ContainsDate.NaiveDateTime',
          'Elixir.Calendar.ContainsDate.Tuple',
          'Elixir.Calendar.ContainsDateTime',
          'Elixir.Calendar.ContainsDateTime.Calendar.DateTime',
          'Elixir.Calendar.ContainsDateTime.DateTime',
          'Elixir.Calendar.ContainsNaiveDateTime',
          'Elixir.Calendar.ContainsNaiveDateTime.Calendar.DateTime',
          'Elixir.Calendar.ContainsNaiveDateTime.DateTime',
          'Elixir.Calendar.ContainsNaiveDateTime.NaiveDateTime',
          'Elixir.Calendar.ContainsNaiveDateTime.Tuple',
          'Elixir.Calendar.ContainsTime',
          'Elixir.Calendar.ContainsTime.Calendar.DateTime',
          'Elixir.Calendar.ContainsTime.Calendar.NaiveDateTime',
          'Elixir.Calendar.ContainsTime.DateTime',
          'Elixir.Calendar.ContainsTime.NaiveDateTime',
          'Elixir.Calendar.ContainsTime.Time',
          'Elixir.Calendar.ContainsTime.Tuple','Elixir.Calendar.Date',
          'Elixir.Calendar.Date.Format','Elixir.Calendar.Date.Parse',
          'Elixir.Calendar.DateTime','Elixir.Calendar.DateTime.Format',
          'Elixir.Calendar.DateTime.Interval',
          'Elixir.Calendar.DateTime.Parse',
          'Elixir.Calendar.DateTime.TzPeriod',
          'Elixir.Calendar.DefaultTranslations',
          'Elixir.Calendar.NaiveDateTime',
          'Elixir.Calendar.NaiveDateTime.Format',
          'Elixir.Calendar.NaiveDateTime.Interval',
          'Elixir.Calendar.NaiveDateTime.Parse','Elixir.Calendar.ParseUtil',
          'Elixir.Calendar.Strftime','Elixir.Calendar.Time',
          'Elixir.Calendar.Time.Format','Elixir.Calendar.Time.Parse',
          'Elixir.Calendar.TimeZoneData']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cuid-0.1.0/ebin"]},
     {primLoad,['Elixir.Cuid']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/combine-0.10.0/ebin"]},
     {primLoad,
         ['Elixir.Combine','Elixir.Combine.Helpers',
          'Elixir.Combine.ParserState','Elixir.Combine.Parsers.Base',
          'Elixir.Combine.Parsers.Binary','Elixir.Combine.Parsers.Text']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/gettext-0.18.0/ebin"]},
     {primLoad,
         ['Elixir.Gettext','Elixir.Gettext.Application',
          'Elixir.Gettext.Backend','Elixir.Gettext.Compiler',
          'Elixir.Gettext.Error','Elixir.Gettext.Extractor',
          'Elixir.Gettext.ExtractorAgent','Elixir.Gettext.Fuzzy',
          'Elixir.Gettext.Interpolation','Elixir.Gettext.Merger',
          'Elixir.Gettext.MissingBindingsError','Elixir.Gettext.PO',
          'Elixir.Gettext.PO.Parser','Elixir.Gettext.PO.PluralTranslation',
          'Elixir.Gettext.PO.SyntaxError','Elixir.Gettext.PO.Tokenizer',
          'Elixir.Gettext.PO.Translation','Elixir.Gettext.PO.Translations',
          'Elixir.Gettext.Plural','Elixir.Gettext.Plural.UnknownLocaleError',
          'Elixir.Gettext.PluralFormError','Elixir.Mix.Tasks.Compile.Gettext',
          'Elixir.Mix.Tasks.Gettext.Extract','Elixir.Mix.Tasks.Gettext.Merge',
          gettext_po_parser]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/timex-3.6.2/ebin"]},
     {primLoad,
         ['Elixir.Enumerable.Timex.Interval',
          'Elixir.Inspect.Timex.AmbiguousDateTime',
          'Elixir.Inspect.Timex.AmbiguousTimezoneInfo',
          'Elixir.Inspect.Timex.Duration','Elixir.Inspect.Timex.TimezoneInfo',
          'Elixir.Timex','Elixir.Timex.AmbiguousDateTime',
          'Elixir.Timex.AmbiguousTimezoneInfo','Elixir.Timex.Calendar.Julian',
          'Elixir.Timex.Comparable','Elixir.Timex.Comparable.Date',
          'Elixir.Timex.Comparable.DateTime','Elixir.Timex.Comparable.Diff',
          'Elixir.Timex.Comparable.NaiveDateTime',
          'Elixir.Timex.Comparable.Timex.AmbiguousDateTime',
          'Elixir.Timex.Comparable.Tuple','Elixir.Timex.Comparable.Utils',
          'Elixir.Timex.Constants','Elixir.Timex.Convert',
          'Elixir.Timex.ConvertError','Elixir.Timex.DateTime.Helpers',
          'Elixir.Timex.Duration','Elixir.Timex.Format.DateTime.Formatter',
          'Elixir.Timex.Format.DateTime.Formatters.Default',
          'Elixir.Timex.Format.DateTime.Formatters.Relative',
          'Elixir.Timex.Format.DateTime.Formatters.Strftime',
          'Elixir.Timex.Format.Duration.Formatter',
          'Elixir.Timex.Format.Duration.Formatters.Default',
          'Elixir.Timex.Format.Duration.Formatters.Humanized',
          'Elixir.Timex.Format.FormatError','Elixir.Timex.Gettext',
          'Elixir.Timex.Helpers','Elixir.Timex.Interval',
          'Elixir.Timex.Interval.FormatError','Elixir.Timex.Macros',
          'Elixir.Timex.Parse.DateTime.Helpers',
          'Elixir.Timex.Parse.DateTime.Parser',
          'Elixir.Timex.Parse.DateTime.Parsers',
          'Elixir.Timex.Parse.DateTime.Parsers.ISO8601Extended',
          'Elixir.Timex.Parse.DateTime.Tokenizer',
          'Elixir.Timex.Parse.DateTime.Tokenizers.Default',
          'Elixir.Timex.Parse.DateTime.Tokenizers.Directive',
          'Elixir.Timex.Parse.DateTime.Tokenizers.Strftime',
          'Elixir.Timex.Parse.Duration.Parser',
          'Elixir.Timex.Parse.Duration.Parsers.ISO8601Parser',
          'Elixir.Timex.Parse.ParseError',
          'Elixir.Timex.Parse.Timezones.Posix',
          'Elixir.Timex.Parse.Timezones.Posix.PosixTimezone',
          'Elixir.Timex.Parse.ZoneInfo.Parser',
          'Elixir.Timex.Parse.ZoneInfo.Parser.Header',
          'Elixir.Timex.Parse.ZoneInfo.Parser.LeapSecond',
          'Elixir.Timex.Parse.ZoneInfo.Parser.TransitionInfo',
          'Elixir.Timex.Parse.ZoneInfo.Parser.Zone','Elixir.Timex.Protocol',
          'Elixir.Timex.Protocol.Any','Elixir.Timex.Protocol.Date',
          'Elixir.Timex.Protocol.DateTime','Elixir.Timex.Protocol.Map',
          'Elixir.Timex.Protocol.NaiveDateTime','Elixir.Timex.Protocol.Tuple',
          'Elixir.Timex.Time','Elixir.Timex.Timezone',
          'Elixir.Timex.Timezone.Local','Elixir.Timex.Timezone.Utils',
          'Elixir.Timex.TimezoneInfo','Elixir.Timex.Translator',
          'Elixir.Timex.Types']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/date_time_parser-0.2.0/ebin"]},
     {primLoad,
         ['Elixir.DateTimeParser','Elixir.DateTimeParser.Combinators.Date',
          'Elixir.DateTimeParser.Combinators.DateTime',
          'Elixir.DateTimeParser.Combinators.Epoch',
          'Elixir.DateTimeParser.Combinators.Time',
          'Elixir.DateTimeParser.Combinators.TimeZone',
          'Elixir.DateTimeParser.Date','Elixir.DateTimeParser.DateTime',
          'Elixir.DateTimeParser.Epoch','Elixir.DateTimeParser.Formatters',
          'Elixir.DateTimeParser.Serial','Elixir.DateTimeParser.Time']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/connection-1.0.4/ebin"]},
     {primLoad,['Elixir.Connection']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/db_connection-2.2.2/ebin"]},
     {primLoad,
         ['Elixir.DBConnection','Elixir.DBConnection.App',
          'Elixir.DBConnection.Backoff','Elixir.DBConnection.Connection',
          'Elixir.DBConnection.ConnectionError',
          'Elixir.DBConnection.ConnectionPool',
          'Elixir.DBConnection.ConnectionPool.Pool',
          'Elixir.DBConnection.EncodeError','Elixir.DBConnection.Holder',
          'Elixir.DBConnection.LogEntry','Elixir.DBConnection.Ownership',
          'Elixir.DBConnection.Ownership.Manager',
          'Elixir.DBConnection.Ownership.Proxy',
          'Elixir.DBConnection.OwnershipError',
          'Elixir.DBConnection.PrepareStream','Elixir.DBConnection.Query',
          'Elixir.DBConnection.Stream','Elixir.DBConnection.Task',
          'Elixir.DBConnection.TransactionError',
          'Elixir.DBConnection.Watcher',
          'Elixir.Enumerable.DBConnection.PrepareStream',
          'Elixir.Enumerable.DBConnection.Stream']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/decimal-1.8.1/ebin"]},
     {primLoad,
         ['Elixir.Decimal','Elixir.Decimal.Context','Elixir.Decimal.Error',
          'Elixir.Decimal.Macros','Elixir.Inspect.Decimal',
          'Elixir.String.Chars.Decimal']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ecto-3.4.5/ebin"]},
     {primLoad,
         ['Elixir.Ecto','Elixir.Ecto.Adapter','Elixir.Ecto.Adapter.Queryable',
          'Elixir.Ecto.Adapter.Schema','Elixir.Ecto.Adapter.Storage',
          'Elixir.Ecto.Adapter.Transaction','Elixir.Ecto.Application',
          'Elixir.Ecto.Association','Elixir.Ecto.Association.BelongsTo',
          'Elixir.Ecto.Association.Has','Elixir.Ecto.Association.HasThrough',
          'Elixir.Ecto.Association.ManyToMany',
          'Elixir.Ecto.Association.NotLoaded','Elixir.Ecto.CastError',
          'Elixir.Ecto.ChangeError','Elixir.Ecto.Changeset',
          'Elixir.Ecto.Changeset.Relation','Elixir.Ecto.ConstraintError',
          'Elixir.Ecto.Embedded','Elixir.Ecto.InvalidChangesetError',
          'Elixir.Ecto.InvalidURLError','Elixir.Ecto.LogEntry',
          'Elixir.Ecto.MigrationError','Elixir.Ecto.Multi',
          'Elixir.Ecto.MultiplePrimaryKeyError',
          'Elixir.Ecto.MultipleResultsError',
          'Elixir.Ecto.NoPrimaryKeyFieldError',
          'Elixir.Ecto.NoPrimaryKeyValueError','Elixir.Ecto.NoResultsError',
          'Elixir.Ecto.Query','Elixir.Ecto.Query.API',
          'Elixir.Ecto.Query.BooleanExpr','Elixir.Ecto.Query.Builder',
          'Elixir.Ecto.Query.Builder.CTE',
          'Elixir.Ecto.Query.Builder.Combination',
          'Elixir.Ecto.Query.Builder.Distinct',
          'Elixir.Ecto.Query.Builder.Dynamic',
          'Elixir.Ecto.Query.Builder.Filter','Elixir.Ecto.Query.Builder.From',
          'Elixir.Ecto.Query.Builder.GroupBy',
          'Elixir.Ecto.Query.Builder.Join',
          'Elixir.Ecto.Query.Builder.LimitOffset',
          'Elixir.Ecto.Query.Builder.Lock',
          'Elixir.Ecto.Query.Builder.OrderBy',
          'Elixir.Ecto.Query.Builder.Preload',
          'Elixir.Ecto.Query.Builder.Select',
          'Elixir.Ecto.Query.Builder.Update',
          'Elixir.Ecto.Query.Builder.Windows','Elixir.Ecto.Query.CastError',
          'Elixir.Ecto.Query.CompileError','Elixir.Ecto.Query.DynamicExpr',
          'Elixir.Ecto.Query.FromExpr','Elixir.Ecto.Query.JoinExpr',
          'Elixir.Ecto.Query.Planner','Elixir.Ecto.Query.QueryExpr',
          'Elixir.Ecto.Query.SelectExpr','Elixir.Ecto.Query.Tagged',
          'Elixir.Ecto.Query.WindowAPI','Elixir.Ecto.Query.WithExpr',
          'Elixir.Ecto.QueryError','Elixir.Ecto.Queryable',
          'Elixir.Ecto.Queryable.Atom','Elixir.Ecto.Queryable.BitString',
          'Elixir.Ecto.Queryable.Ecto.Query',
          'Elixir.Ecto.Queryable.Ecto.SubQuery','Elixir.Ecto.Queryable.Tuple',
          'Elixir.Ecto.Repo','Elixir.Ecto.Repo.Assoc',
          'Elixir.Ecto.Repo.Preloader','Elixir.Ecto.Repo.Queryable',
          'Elixir.Ecto.Repo.Registry','Elixir.Ecto.Repo.Schema',
          'Elixir.Ecto.Repo.Supervisor','Elixir.Ecto.Repo.Transaction',
          'Elixir.Ecto.Schema','Elixir.Ecto.Schema.Loader',
          'Elixir.Ecto.Schema.Metadata','Elixir.Ecto.StaleEntryError',
          'Elixir.Ecto.SubQuery','Elixir.Ecto.SubQueryError',
          'Elixir.Ecto.Type','Elixir.Ecto.UUID',
          'Elixir.Inspect.Ecto.Association.NotLoaded',
          'Elixir.Inspect.Ecto.Changeset','Elixir.Inspect.Ecto.Query',
          'Elixir.Inspect.Ecto.Query.DynamicExpr',
          'Elixir.Inspect.Ecto.Schema.Metadata',
          'Elixir.Jason.Encoder.Ecto.Association.NotLoaded',
          'Elixir.Jason.Encoder.Ecto.Schema.Metadata','Elixir.Mix.Ecto',
          'Elixir.Mix.Tasks.Ecto','Elixir.Mix.Tasks.Ecto.Create',
          'Elixir.Mix.Tasks.Ecto.Drop','Elixir.Mix.Tasks.Ecto.Gen.Repo']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ecto_sql-3.4.5/ebin"]},
     {primLoad,
         ['Elixir.Collectable.Ecto.Adapters.SQL.Stream',
          'Elixir.Ecto.Adapter.Migration','Elixir.Ecto.Adapter.Structure',
          'Elixir.Ecto.Adapters.MySQL','Elixir.Ecto.Adapters.MyXQL',
          'Elixir.Ecto.Adapters.MyXQL.Connection',
          'Elixir.Ecto.Adapters.Postgres',
          'Elixir.Ecto.Adapters.Postgres.Connection',
          'Elixir.Ecto.Adapters.SQL','Elixir.Ecto.Adapters.SQL.Application',
          'Elixir.Ecto.Adapters.SQL.Connection',
          'Elixir.Ecto.Adapters.SQL.Sandbox',
          'Elixir.Ecto.Adapters.SQL.Sandbox.Connection',
          'Elixir.Ecto.Adapters.SQL.Stream','Elixir.Ecto.Adapters.Tds',
          'Elixir.Ecto.Migration','Elixir.Ecto.Migration.Command',
          'Elixir.Ecto.Migration.Constraint','Elixir.Ecto.Migration.Index',
          'Elixir.Ecto.Migration.Reference','Elixir.Ecto.Migration.Runner',
          'Elixir.Ecto.Migration.SchemaMigration',
          'Elixir.Ecto.Migration.Table','Elixir.Ecto.Migrator',
          'Elixir.Enumerable.Ecto.Adapters.SQL.Stream','Elixir.Mix.EctoSQL',
          'Elixir.Mix.Tasks.Ecto.Dump','Elixir.Mix.Tasks.Ecto.Gen.Migration',
          'Elixir.Mix.Tasks.Ecto.Load','Elixir.Mix.Tasks.Ecto.Migrate',
          'Elixir.Mix.Tasks.Ecto.Migrations',
          'Elixir.Mix.Tasks.Ecto.Rollback']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/endon-1.0.0/ebin"]},
     {primLoad,['Elixir.Endon','Elixir.Endon.Helpers']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/earmark_parser-1.4.10/ebin"]},
     {primLoad,
         ['Elixir.EarmarkParser','Elixir.EarmarkParser.Ast.Emitter',
          'Elixir.EarmarkParser.Ast.Inline',
          'Elixir.EarmarkParser.Ast.Renderer.AstWalker',
          'Elixir.EarmarkParser.Ast.Renderer.FootnoteListRenderer',
          'Elixir.EarmarkParser.Ast.Renderer.HtmlRenderer',
          'Elixir.EarmarkParser.Ast.Renderer.TableRenderer',
          'Elixir.EarmarkParser.AstRenderer','Elixir.EarmarkParser.Block',
          'Elixir.EarmarkParser.Block.BlockQuote',
          'Elixir.EarmarkParser.Block.Code',
          'Elixir.EarmarkParser.Block.FnDef',
          'Elixir.EarmarkParser.Block.FnList',
          'Elixir.EarmarkParser.Block.Heading',
          'Elixir.EarmarkParser.Block.Html',
          'Elixir.EarmarkParser.Block.HtmlComment',
          'Elixir.EarmarkParser.Block.HtmlOneline',
          'Elixir.EarmarkParser.Block.Ial','Elixir.EarmarkParser.Block.IdDef',
          'Elixir.EarmarkParser.Block.List',
          'Elixir.EarmarkParser.Block.ListItem',
          'Elixir.EarmarkParser.Block.Para',
          'Elixir.EarmarkParser.Block.Ruler',
          'Elixir.EarmarkParser.Block.Table',
          'Elixir.EarmarkParser.Block.Text','Elixir.EarmarkParser.Context',
          'Elixir.EarmarkParser.Error','Elixir.EarmarkParser.Helpers',
          'Elixir.EarmarkParser.Helpers.AstHelpers',
          'Elixir.EarmarkParser.Helpers.AttrParser',
          'Elixir.EarmarkParser.Helpers.HtmlHelpers',
          'Elixir.EarmarkParser.Helpers.HtmlParser',
          'Elixir.EarmarkParser.Helpers.LeexHelpers',
          'Elixir.EarmarkParser.Helpers.LineHelpers',
          'Elixir.EarmarkParser.Helpers.LinkParser',
          'Elixir.EarmarkParser.Helpers.LookaheadHelpers',
          'Elixir.EarmarkParser.Helpers.PureLinkHelpers',
          'Elixir.EarmarkParser.Helpers.ReparseHelpers',
          'Elixir.EarmarkParser.Helpers.StringHelpers',
          'Elixir.EarmarkParser.Helpers.YeccHelpers',
          'Elixir.EarmarkParser.Line','Elixir.EarmarkParser.Line.Blank',
          'Elixir.EarmarkParser.Line.BlockQuote',
          'Elixir.EarmarkParser.Line.Fence','Elixir.EarmarkParser.Line.FnDef',
          'Elixir.EarmarkParser.Line.Heading',
          'Elixir.EarmarkParser.Line.HtmlCloseTag',
          'Elixir.EarmarkParser.Line.HtmlComment',
          'Elixir.EarmarkParser.Line.HtmlOneLine',
          'Elixir.EarmarkParser.Line.HtmlOpenTag',
          'Elixir.EarmarkParser.Line.Ial','Elixir.EarmarkParser.Line.IdDef',
          'Elixir.EarmarkParser.Line.Indent',
          'Elixir.EarmarkParser.Line.ListItem',
          'Elixir.EarmarkParser.Line.Ruler',
          'Elixir.EarmarkParser.Line.SetextUnderlineHeading',
          'Elixir.EarmarkParser.Line.TableLine',
          'Elixir.EarmarkParser.Line.Text','Elixir.EarmarkParser.LineScanner',
          'Elixir.EarmarkParser.Message','Elixir.EarmarkParser.Options',
          'Elixir.EarmarkParser.Parser',
          'Elixir.EarmarkParser.Parser.ListInfo',
          'Elixir.EarmarkParser.Parser.ListParser',
          'Elixir.EarmarkParser.Parser.ListParser.Ctxt',
          'Elixir.EarmarkParser.Types',link_text_lexer,link_text_parser,
          string_lexer]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/makeup-1.0.3/ebin"]},
     {primLoad,
         ['Elixir.Makeup','Elixir.Makeup.Application',
          'Elixir.Makeup.Formatter',
          'Elixir.Makeup.Formatters.HTML.HTMLFormatter','Elixir.Makeup.Lexer',
          'Elixir.Makeup.Lexer.Combinators','Elixir.Makeup.Lexer.Groups',
          'Elixir.Makeup.Lexer.Postprocess','Elixir.Makeup.Lexer.Types',
          'Elixir.Makeup.Registry','Elixir.Makeup.Styles.HTML',
          'Elixir.Makeup.Styles.HTML.AbapStyle',
          'Elixir.Makeup.Styles.HTML.AlgolStyle',
          'Elixir.Makeup.Styles.HTML.Algol_NuStyle',
          'Elixir.Makeup.Styles.HTML.ArduinoStyle',
          'Elixir.Makeup.Styles.HTML.AutumnStyle',
          'Elixir.Makeup.Styles.HTML.BlackWhiteStyle',
          'Elixir.Makeup.Styles.HTML.BorlandStyle',
          'Elixir.Makeup.Styles.HTML.ColorfulStyle',
          'Elixir.Makeup.Styles.HTML.DefaultStyle',
          'Elixir.Makeup.Styles.HTML.EmacsStyle',
          'Elixir.Makeup.Styles.HTML.FriendlyStyle',
          'Elixir.Makeup.Styles.HTML.FruityStyle',
          'Elixir.Makeup.Styles.HTML.IgorStyle',
          'Elixir.Makeup.Styles.HTML.LovelaceStyle',
          'Elixir.Makeup.Styles.HTML.ManniStyle',
          'Elixir.Makeup.Styles.HTML.MonokaiStyle',
          'Elixir.Makeup.Styles.HTML.MurphyStyle',
          'Elixir.Makeup.Styles.HTML.NativeStyle',
          'Elixir.Makeup.Styles.HTML.ParaisoDarkStyle',
          'Elixir.Makeup.Styles.HTML.ParaisoLightStyle',
          'Elixir.Makeup.Styles.HTML.PastieStyle',
          'Elixir.Makeup.Styles.HTML.PerldocStyle',
          'Elixir.Makeup.Styles.HTML.RainbowDashStyle',
          'Elixir.Makeup.Styles.HTML.RrtStyle',
          'Elixir.Makeup.Styles.HTML.SambaStyle',
          'Elixir.Makeup.Styles.HTML.Style',
          'Elixir.Makeup.Styles.HTML.StyleMap',
          'Elixir.Makeup.Styles.HTML.TangoStyle',
          'Elixir.Makeup.Styles.HTML.TokenStyle',
          'Elixir.Makeup.Styles.HTML.TracStyle',
          'Elixir.Makeup.Styles.HTML.VimStyle',
          'Elixir.Makeup.Styles.HTML.VisualStudioStyle',
          'Elixir.Makeup.Styles.HTML.XcodeStyle','Elixir.Makeup.Token.Utils',
          'Elixir.Makeup.Token.Utils.Hierarchy']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/makeup_elixir-0.14.1/ebin"]},
     {primLoad,
         ['Elixir.Makeup.Lexers.ElixirLexer',
          'Elixir.Makeup.Lexers.ElixirLexer.Application',
          'Elixir.Makeup.Lexers.ElixirLexer.Helper',
          'Elixir.Makeup.Lexers.ElixirLexer.Testing']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ex_doc-0.22.2/ebin"]},
     {primLoad,
         ['Elixir.ExDoc','Elixir.ExDoc.Application','Elixir.ExDoc.Autolink',
          'Elixir.ExDoc.CLI','Elixir.ExDoc.Config',
          'Elixir.ExDoc.Formatter.EPUB','Elixir.ExDoc.Formatter.EPUB.Assets',
          'Elixir.ExDoc.Formatter.EPUB.Templates',
          'Elixir.ExDoc.Formatter.HTML','Elixir.ExDoc.Formatter.HTML.Assets',
          'Elixir.ExDoc.Formatter.HTML.SearchItems',
          'Elixir.ExDoc.Formatter.HTML.Templates','Elixir.ExDoc.FunctionNode',
          'Elixir.ExDoc.GroupMatcher','Elixir.ExDoc.Highlighter',
          'Elixir.ExDoc.Markdown','Elixir.ExDoc.Markdown.Earmark',
          'Elixir.ExDoc.ModuleNode','Elixir.ExDoc.Refs',
          'Elixir.ExDoc.Retriever','Elixir.ExDoc.Retriever.Error',
          'Elixir.ExDoc.TypeNode','Elixir.ExDoc.Utils.Code',
          'Elixir.ExDoc.Utils.SimpleJSON','Elixir.Mix.Tasks.Docs']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/jason-1.2.1/ebin"]},
     {primLoad,
         ['Elixir.Jason','Elixir.Jason.Codegen','Elixir.Jason.DecodeError',
          'Elixir.Jason.Decoder','Elixir.Jason.Decoder.Unescape',
          'Elixir.Jason.Encode','Elixir.Jason.EncodeError',
          'Elixir.Jason.Encoder','Elixir.Jason.Encoder.Any',
          'Elixir.Jason.Encoder.Atom','Elixir.Jason.Encoder.BitString',
          'Elixir.Jason.Encoder.Date','Elixir.Jason.Encoder.DateTime',
          'Elixir.Jason.Encoder.Decimal','Elixir.Jason.Encoder.Float',
          'Elixir.Jason.Encoder.Integer',
          'Elixir.Jason.Encoder.Jason.Fragment','Elixir.Jason.Encoder.List',
          'Elixir.Jason.Encoder.Map','Elixir.Jason.Encoder.NaiveDateTime',
          'Elixir.Jason.Encoder.Time','Elixir.Jason.Formatter',
          'Elixir.Jason.Fragment','Elixir.Jason.Helpers']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/myxql-0.4.1/ebin"]},
     {primLoad,
         ['Elixir.DBConnection.Query.MyXQL.Query',
          'Elixir.DBConnection.Query.MyXQL.TextQuery','Elixir.MyXQL',
          'Elixir.MyXQL.Client','Elixir.MyXQL.Client.Config',
          'Elixir.MyXQL.Connection','Elixir.MyXQL.Cursor',
          'Elixir.MyXQL.Error','Elixir.MyXQL.Protocol',
          'Elixir.MyXQL.Protocol.Auth','Elixir.MyXQL.Protocol.Flags',
          'Elixir.MyXQL.Protocol.Records',
          'Elixir.MyXQL.Protocol.ServerErrorCodes',
          'Elixir.MyXQL.Protocol.Types','Elixir.MyXQL.Protocol.Values',
          'Elixir.MyXQL.Query','Elixir.MyXQL.Result','Elixir.MyXQL.TextQuery',
          'Elixir.String.Chars.MyXQL.Query',
          'Elixir.String.Chars.MyXQL.TextQuery']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_pubsub-2.0.0/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.PubSub','Elixir.Phoenix.PubSub.Adapter',
          'Elixir.Phoenix.PubSub.Application',
          'Elixir.Phoenix.PubSub.BroadcastError','Elixir.Phoenix.PubSub.PG2',
          'Elixir.Phoenix.PubSub.Supervisor','Elixir.Phoenix.Tracker',
          'Elixir.Phoenix.Tracker.Clock',
          'Elixir.Phoenix.Tracker.DeltaGeneration',
          'Elixir.Phoenix.Tracker.Replica','Elixir.Phoenix.Tracker.Shard',
          'Elixir.Phoenix.Tracker.State']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix-1.5.4/ebin"]},
     {primLoad,
         ['Elixir.Mix.Phoenix','Elixir.Mix.Phoenix.Context',
          'Elixir.Mix.Phoenix.Schema','Elixir.Mix.Tasks.Compile.Phoenix',
          'Elixir.Mix.Tasks.Phx','Elixir.Mix.Tasks.Phx.Digest',
          'Elixir.Mix.Tasks.Phx.Digest.Clean','Elixir.Mix.Tasks.Phx.Gen.Cert',
          'Elixir.Mix.Tasks.Phx.Gen.Channel',
          'Elixir.Mix.Tasks.Phx.Gen.Context',
          'Elixir.Mix.Tasks.Phx.Gen.Embedded','Elixir.Mix.Tasks.Phx.Gen.Html',
          'Elixir.Mix.Tasks.Phx.Gen.Json','Elixir.Mix.Tasks.Phx.Gen.Live',
          'Elixir.Mix.Tasks.Phx.Gen.Presence',
          'Elixir.Mix.Tasks.Phx.Gen.Schema','Elixir.Mix.Tasks.Phx.Gen.Secret',
          'Elixir.Mix.Tasks.Phx.Routes','Elixir.Mix.Tasks.Phx.Server',
          'Elixir.Phoenix','Elixir.Phoenix.ActionClauseError',
          'Elixir.Phoenix.Channel','Elixir.Phoenix.Channel.Server',
          'Elixir.Phoenix.ChannelTest',
          'Elixir.Phoenix.ChannelTest.NoopSerializer',
          'Elixir.Phoenix.CodeReloader','Elixir.Phoenix.CodeReloader.Proxy',
          'Elixir.Phoenix.CodeReloader.Server','Elixir.Phoenix.Config',
          'Elixir.Phoenix.ConnTest','Elixir.Phoenix.Controller',
          'Elixir.Phoenix.Controller.Pipeline','Elixir.Phoenix.Digester',
          'Elixir.Phoenix.Endpoint','Elixir.Phoenix.Endpoint.Cowboy2Adapter',
          'Elixir.Phoenix.Endpoint.Cowboy2Handler',
          'Elixir.Phoenix.Endpoint.CowboyAdapter',
          'Elixir.Phoenix.Endpoint.CowboyWebSocket',
          'Elixir.Phoenix.Endpoint.RenderErrors',
          'Elixir.Phoenix.Endpoint.Supervisor',
          'Elixir.Phoenix.Endpoint.Watcher','Elixir.Phoenix.Logger',
          'Elixir.Phoenix.MissingParamError','Elixir.Phoenix.Naming',
          'Elixir.Phoenix.NotAcceptableError','Elixir.Phoenix.Param',
          'Elixir.Phoenix.Param.Any','Elixir.Phoenix.Param.Atom',
          'Elixir.Phoenix.Param.BitString','Elixir.Phoenix.Param.Integer',
          'Elixir.Phoenix.Param.Map','Elixir.Phoenix.Presence',
          'Elixir.Phoenix.Presence.Tracker','Elixir.Phoenix.Router',
          'Elixir.Phoenix.Router.ConsoleFormatter',
          'Elixir.Phoenix.Router.Helpers',
          'Elixir.Phoenix.Router.MalformedURIError',
          'Elixir.Phoenix.Router.NoRouteError',
          'Elixir.Phoenix.Router.Resource','Elixir.Phoenix.Router.Route',
          'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
          'Elixir.Phoenix.Socket.Broadcast',
          'Elixir.Phoenix.Socket.InvalidMessageError',
          'Elixir.Phoenix.Socket.Message',
          'Elixir.Phoenix.Socket.PoolSupervisor',
          'Elixir.Phoenix.Socket.Reply','Elixir.Phoenix.Socket.Serializer',
          'Elixir.Phoenix.Socket.Transport',
          'Elixir.Phoenix.Socket.V1.JSONSerializer',
          'Elixir.Phoenix.Socket.V2.JSONSerializer','Elixir.Phoenix.Template',
          'Elixir.Phoenix.Template.EExEngine',
          'Elixir.Phoenix.Template.Engine',
          'Elixir.Phoenix.Template.ExsEngine',
          'Elixir.Phoenix.Template.UndefinedError','Elixir.Phoenix.Token',
          'Elixir.Phoenix.Transports.LongPoll',
          'Elixir.Phoenix.Transports.LongPoll.Server',
          'Elixir.Phoenix.Transports.WebSocket','Elixir.Phoenix.View',
          'Elixir.Plug.Exception.Phoenix.ActionClauseError']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_ecto-4.1.0/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.Ecto','Elixir.Phoenix.Ecto.CheckRepoStatus',
          'Elixir.Phoenix.Ecto.PendingMigrationError',
          'Elixir.Phoenix.Ecto.SQL.Sandbox',
          'Elixir.Phoenix.Ecto.SQL.SandboxSession',
          'Elixir.Phoenix.Ecto.StorageNotCreatedError',
          'Elixir.Phoenix.HTML.FormData.Ecto.Changeset',
          'Elixir.Phoenix.HTML.Safe.Decimal',
          'Elixir.Plug.Exception.Ecto.CastError',
          'Elixir.Plug.Exception.Ecto.InvalidChangesetError',
          'Elixir.Plug.Exception.Ecto.NoResultsError',
          'Elixir.Plug.Exception.Ecto.Query.CastError',
          'Elixir.Plug.Exception.Ecto.StaleEntryError',
          'Elixir.Plug.Exception.Ecto.SubQueryError',
          'Elixir.Plug.Exception.Phoenix.Ecto.PendingMigrationError',
          'Elixir.Plug.Exception.Phoenix.Ecto.StorageNotCreatedError']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_html-2.14.2/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.HTML','Elixir.Phoenix.HTML.Engine',
          'Elixir.Phoenix.HTML.Form','Elixir.Phoenix.HTML.FormData',
          'Elixir.Phoenix.HTML.FormData.Atom',
          'Elixir.Phoenix.HTML.FormData.Plug.Conn',
          'Elixir.Phoenix.HTML.Format','Elixir.Phoenix.HTML.Link',
          'Elixir.Phoenix.HTML.Safe','Elixir.Phoenix.HTML.Safe.Atom',
          'Elixir.Phoenix.HTML.Safe.BitString',
          'Elixir.Phoenix.HTML.Safe.Date','Elixir.Phoenix.HTML.Safe.DateTime',
          'Elixir.Phoenix.HTML.Safe.Float','Elixir.Phoenix.HTML.Safe.Integer',
          'Elixir.Phoenix.HTML.Safe.List',
          'Elixir.Phoenix.HTML.Safe.NaiveDateTime',
          'Elixir.Phoenix.HTML.Safe.Phoenix.HTML.Form',
          'Elixir.Phoenix.HTML.Safe.Time','Elixir.Phoenix.HTML.Safe.Tuple',
          'Elixir.Phoenix.HTML.Tag']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_live_view-0.14.3/ebin"]},
     {primLoad,
         ['Elixir.Inspect.Phoenix.LiveView.Socket',
          'Elixir.Inspect.Phoenix.LiveView.Socket.AssignsNotInSocket',
          'Elixir.Inspect.Phoenix.LiveViewTest.Element',
          'Elixir.Inspect.Phoenix.LiveViewTest.View',
          'Elixir.Phoenix.HTML.Safe.Phoenix.LiveComponent.CID',
          'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Component',
          'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Comprehension',
          'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Rendered',
          'Elixir.Phoenix.LiveComponent','Elixir.Phoenix.LiveComponent.CID',
          'Elixir.Phoenix.LiveView','Elixir.Phoenix.LiveView.Application',
          'Elixir.Phoenix.LiveView.Channel',
          'Elixir.Phoenix.LiveView.Component',
          'Elixir.Phoenix.LiveView.Comprehension',
          'Elixir.Phoenix.LiveView.Controller','Elixir.Phoenix.LiveView.Diff',
          'Elixir.Phoenix.LiveView.Engine','Elixir.Phoenix.LiveView.Helpers',
          'Elixir.Phoenix.LiveView.Plug','Elixir.Phoenix.LiveView.Rendered',
          'Elixir.Phoenix.LiveView.Renderer','Elixir.Phoenix.LiveView.Router',
          'Elixir.Phoenix.LiveView.Socket',
          'Elixir.Phoenix.LiveView.Socket.AssignsNotInSocket',
          'Elixir.Phoenix.LiveView.Static','Elixir.Phoenix.LiveView.Utils',
          'Elixir.Phoenix.LiveViewTest',
          'Elixir.Phoenix.LiveViewTest.ClientProxy',
          'Elixir.Phoenix.LiveViewTest.DOM',
          'Elixir.Phoenix.LiveViewTest.Element',
          'Elixir.Phoenix.LiveViewTest.View',
          'Elixir.String.Chars.Phoenix.LiveComponent.CID']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry_metrics-0.5.0/ebin"]},
     {primLoad,
         ['Elixir.Telemetry.Metrics',
          'Elixir.Telemetry.Metrics.ConsoleReporter',
          'Elixir.Telemetry.Metrics.Counter',
          'Elixir.Telemetry.Metrics.Distribution',
          'Elixir.Telemetry.Metrics.LastValue','Elixir.Telemetry.Metrics.Sum',
          'Elixir.Telemetry.Metrics.Summary']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_live_dashboard-0.2.7/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.LiveDashboard',
          'Elixir.Phoenix.LiveDashboard.AppInfoComponent',
          'Elixir.Phoenix.LiveDashboard.Application',
          'Elixir.Phoenix.LiveDashboard.ApplicationsLive',
          'Elixir.Phoenix.LiveDashboard.CardUsageComponent',
          'Elixir.Phoenix.LiveDashboard.ChartComponent',
          'Elixir.Phoenix.LiveDashboard.ColorBarComponent',
          'Elixir.Phoenix.LiveDashboard.ColorBarLegendComponent',
          'Elixir.Phoenix.LiveDashboard.EtsInfoComponent',
          'Elixir.Phoenix.LiveDashboard.EtsLive',
          'Elixir.Phoenix.LiveDashboard.HomeLive',
          'Elixir.Phoenix.LiveDashboard.LayoutView',
          'Elixir.Phoenix.LiveDashboard.LiveHelpers',
          'Elixir.Phoenix.LiveDashboard.LoggerPubSubBackend',
          'Elixir.Phoenix.LiveDashboard.MenuLive',
          'Elixir.Phoenix.LiveDashboard.MetricsLive',
          'Elixir.Phoenix.LiveDashboard.ModalComponent',
          'Elixir.Phoenix.LiveDashboard.OSMonLive',
          'Elixir.Phoenix.LiveDashboard.PortInfoComponent',
          'Elixir.Phoenix.LiveDashboard.PortsLive',
          'Elixir.Phoenix.LiveDashboard.ProcessInfoComponent',
          'Elixir.Phoenix.LiveDashboard.ProcessesLive',
          'Elixir.Phoenix.LiveDashboard.ReingoldTilford',
          'Elixir.Phoenix.LiveDashboard.ReingoldTilford.Line',
          'Elixir.Phoenix.LiveDashboard.ReingoldTilford.Node',
          'Elixir.Phoenix.LiveDashboard.RequestLogger',
          'Elixir.Phoenix.LiveDashboard.RequestLoggerLive',
          'Elixir.Phoenix.LiveDashboard.Router',
          'Elixir.Phoenix.LiveDashboard.SocketInfoComponent',
          'Elixir.Phoenix.LiveDashboard.SocketsLive',
          'Elixir.Phoenix.LiveDashboard.SystemInfo',
          'Elixir.Phoenix.LiveDashboard.TableHelpers',
          'Elixir.Phoenix.LiveDashboard.TelemetryListener',
          'Elixir.Phoenix.LiveDashboard.TitleBarComponent',
          'Elixir.Phoenix.LiveDashboard.Web']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phone-0.4.11/ebin"]},
     {primLoad,
         ['Elixir.Helper.Area','Elixir.Helper.Country','Elixir.Helper.Parser',
          'Elixir.Phone','Elixir.Phone.AD','Elixir.Phone.AE',
          'Elixir.Phone.AF','Elixir.Phone.AL','Elixir.Phone.AM',
          'Elixir.Phone.AO','Elixir.Phone.AR','Elixir.Phone.AT',
          'Elixir.Phone.AU','Elixir.Phone.AW','Elixir.Phone.AZ',
          'Elixir.Phone.BA','Elixir.Phone.BD','Elixir.Phone.BE',
          'Elixir.Phone.BG','Elixir.Phone.BH','Elixir.Phone.BI',
          'Elixir.Phone.BJ','Elixir.Phone.BN','Elixir.Phone.BO',
          'Elixir.Phone.BR','Elixir.Phone.BR.AC','Elixir.Phone.BR.AL',
          'Elixir.Phone.BR.AM','Elixir.Phone.BR.AP','Elixir.Phone.BR.BA',
          'Elixir.Phone.BR.CE','Elixir.Phone.BR.DF','Elixir.Phone.BR.ES',
          'Elixir.Phone.BR.GO','Elixir.Phone.BR.MA','Elixir.Phone.BR.MG',
          'Elixir.Phone.BR.MS','Elixir.Phone.BR.MT','Elixir.Phone.BR.PA',
          'Elixir.Phone.BR.PB','Elixir.Phone.BR.PE','Elixir.Phone.BR.PI',
          'Elixir.Phone.BR.PR','Elixir.Phone.BR.RJ','Elixir.Phone.BR.RN',
          'Elixir.Phone.BR.RO','Elixir.Phone.BR.RR','Elixir.Phone.BR.RS',
          'Elixir.Phone.BR.SC','Elixir.Phone.BR.SE','Elixir.Phone.BR.SP',
          'Elixir.Phone.BR.TO','Elixir.Phone.BR.TollFree','Elixir.Phone.BT',
          'Elixir.Phone.BW','Elixir.Phone.BY','Elixir.Phone.BZ',
          'Elixir.Phone.CD','Elixir.Phone.CF','Elixir.Phone.CG',
          'Elixir.Phone.CH','Elixir.Phone.CI','Elixir.Phone.CK',
          'Elixir.Phone.CL','Elixir.Phone.CM','Elixir.Phone.CN',
          'Elixir.Phone.CO','Elixir.Phone.CR','Elixir.Phone.CU',
          'Elixir.Phone.CV','Elixir.Phone.CW','Elixir.Phone.CY',
          'Elixir.Phone.CZ','Elixir.Phone.Countries','Elixir.Phone.DE',
          'Elixir.Phone.DJ','Elixir.Phone.DK','Elixir.Phone.DZ',
          'Elixir.Phone.EC','Elixir.Phone.EE','Elixir.Phone.EG',
          'Elixir.Phone.ER','Elixir.Phone.ES','Elixir.Phone.ET',
          'Elixir.Phone.FI','Elixir.Phone.FJ','Elixir.Phone.FM',
          'Elixir.Phone.FO','Elixir.Phone.FR','Elixir.Phone.GA',
          'Elixir.Phone.GB','Elixir.Phone.GE','Elixir.Phone.GF',
          'Elixir.Phone.GH','Elixir.Phone.GI','Elixir.Phone.GL',
          'Elixir.Phone.GM','Elixir.Phone.GN','Elixir.Phone.GQ',
          'Elixir.Phone.GR','Elixir.Phone.GT','Elixir.Phone.GW',
          'Elixir.Phone.GY','Elixir.Phone.HK','Elixir.Phone.HN',
          'Elixir.Phone.HR','Elixir.Phone.HT','Elixir.Phone.HU',
          'Elixir.Phone.ID','Elixir.Phone.IE','Elixir.Phone.IL',
          'Elixir.Phone.IN','Elixir.Phone.IO','Elixir.Phone.IQ',
          'Elixir.Phone.IR','Elixir.Phone.IS','Elixir.Phone.IT',
          'Elixir.Phone.JO','Elixir.Phone.JP','Elixir.Phone.KE',
          'Elixir.Phone.KG','Elixir.Phone.KH','Elixir.Phone.KI',
          'Elixir.Phone.KM','Elixir.Phone.KP','Elixir.Phone.KR',
          'Elixir.Phone.KW','Elixir.Phone.KZ','Elixir.Phone.LA',
          'Elixir.Phone.LB','Elixir.Phone.LI','Elixir.Phone.LK',
          'Elixir.Phone.LR','Elixir.Phone.LS','Elixir.Phone.LT',
          'Elixir.Phone.LU','Elixir.Phone.LV','Elixir.Phone.LY',
          'Elixir.Phone.MA','Elixir.Phone.MC','Elixir.Phone.MD',
          'Elixir.Phone.ME','Elixir.Phone.MG','Elixir.Phone.MH',
          'Elixir.Phone.MK','Elixir.Phone.ML','Elixir.Phone.MM',
          'Elixir.Phone.MN','Elixir.Phone.MO','Elixir.Phone.MQ',
          'Elixir.Phone.MR','Elixir.Phone.MT','Elixir.Phone.MU',
          'Elixir.Phone.MV','Elixir.Phone.MW','Elixir.Phone.MX',
          'Elixir.Phone.MY','Elixir.Phone.MZ','Elixir.Phone.NA',
          'Elixir.Phone.NANP','Elixir.Phone.NANP.AG','Elixir.Phone.NANP.AI',
          'Elixir.Phone.NANP.AS','Elixir.Phone.NANP.BB',
          'Elixir.Phone.NANP.BM','Elixir.Phone.NANP.BS',
          'Elixir.Phone.NANP.CA','Elixir.Phone.NANP.CA.AB',
          'Elixir.Phone.NANP.CA.BC','Elixir.Phone.NANP.CA.MB',
          'Elixir.Phone.NANP.CA.NB','Elixir.Phone.NANP.CA.NL',
          'Elixir.Phone.NANP.CA.NSAndPE','Elixir.Phone.NANP.CA.ON',
          'Elixir.Phone.NANP.CA.QC','Elixir.Phone.NANP.CA.SK',
          'Elixir.Phone.NANP.CA.Territory','Elixir.Phone.NANP.DM',
          'Elixir.Phone.NANP.DO','Elixir.Phone.NANP.GD',
          'Elixir.Phone.NANP.GU','Elixir.Phone.NANP.JM',
          'Elixir.Phone.NANP.KN','Elixir.Phone.NANP.KY',
          'Elixir.Phone.NANP.LC','Elixir.Phone.NANP.MP',
          'Elixir.Phone.NANP.MS','Elixir.Phone.NANP.PR',
          'Elixir.Phone.NANP.SX','Elixir.Phone.NANP.TC',
          'Elixir.Phone.NANP.TT','Elixir.Phone.NANP.TollFree',
          'Elixir.Phone.NANP.US','Elixir.Phone.NANP.US.AK',
          'Elixir.Phone.NANP.US.AL','Elixir.Phone.NANP.US.AR',
          'Elixir.Phone.NANP.US.AZ','Elixir.Phone.NANP.US.CA',
          'Elixir.Phone.NANP.US.CO','Elixir.Phone.NANP.US.CT',
          'Elixir.Phone.NANP.US.DC','Elixir.Phone.NANP.US.DE',
          'Elixir.Phone.NANP.US.FL','Elixir.Phone.NANP.US.GA',
          'Elixir.Phone.NANP.US.HI','Elixir.Phone.NANP.US.IA',
          'Elixir.Phone.NANP.US.ID','Elixir.Phone.NANP.US.IL',
          'Elixir.Phone.NANP.US.IN','Elixir.Phone.NANP.US.KS',
          'Elixir.Phone.NANP.US.KY','Elixir.Phone.NANP.US.LA',
          'Elixir.Phone.NANP.US.MA','Elixir.Phone.NANP.US.MD',
          'Elixir.Phone.NANP.US.ME','Elixir.Phone.NANP.US.MI',
          'Elixir.Phone.NANP.US.MN','Elixir.Phone.NANP.US.MO',
          'Elixir.Phone.NANP.US.MS','Elixir.Phone.NANP.US.MT',
          'Elixir.Phone.NANP.US.NC','Elixir.Phone.NANP.US.ND',
          'Elixir.Phone.NANP.US.NE','Elixir.Phone.NANP.US.NH',
          'Elixir.Phone.NANP.US.NJ','Elixir.Phone.NANP.US.NM',
          'Elixir.Phone.NANP.US.NV','Elixir.Phone.NANP.US.NY',
          'Elixir.Phone.NANP.US.OH','Elixir.Phone.NANP.US.OK',
          'Elixir.Phone.NANP.US.OR','Elixir.Phone.NANP.US.PA',
          'Elixir.Phone.NANP.US.RI','Elixir.Phone.NANP.US.SC',
          'Elixir.Phone.NANP.US.SD','Elixir.Phone.NANP.US.TN',
          'Elixir.Phone.NANP.US.TX','Elixir.Phone.NANP.US.UT',
          'Elixir.Phone.NANP.US.VA','Elixir.Phone.NANP.US.VT',
          'Elixir.Phone.NANP.US.WA','Elixir.Phone.NANP.US.WI',
          'Elixir.Phone.NANP.US.WV','Elixir.Phone.NANP.US.WY',
          'Elixir.Phone.NANP.VC','Elixir.Phone.NANP.VG',
          'Elixir.Phone.NANP.VI','Elixir.Phone.NC','Elixir.Phone.NE',
          'Elixir.Phone.NG','Elixir.Phone.NI','Elixir.Phone.NL',
          'Elixir.Phone.NO','Elixir.Phone.NP','Elixir.Phone.NR',
          'Elixir.Phone.NU','Elixir.Phone.NZ','Elixir.Phone.OM',
          'Elixir.Phone.PA','Elixir.Phone.PE','Elixir.Phone.PF',
          'Elixir.Phone.PG','Elixir.Phone.PH','Elixir.Phone.PK',
          'Elixir.Phone.PL','Elixir.Phone.PM','Elixir.Phone.PS',
          'Elixir.Phone.PT','Elixir.Phone.PW','Elixir.Phone.PY',
          'Elixir.Phone.QA','Elixir.Phone.RO','Elixir.Phone.RS',
          'Elixir.Phone.RU','Elixir.Phone.RW','Elixir.Phone.SA',
          'Elixir.Phone.SB','Elixir.Phone.SC','Elixir.Phone.SD',
          'Elixir.Phone.SE','Elixir.Phone.SG','Elixir.Phone.SH',
          'Elixir.Phone.SI','Elixir.Phone.SK','Elixir.Phone.SL',
          'Elixir.Phone.SM','Elixir.Phone.SN','Elixir.Phone.SO',
          'Elixir.Phone.SR','Elixir.Phone.SS','Elixir.Phone.ST',
          'Elixir.Phone.SV','Elixir.Phone.SY','Elixir.Phone.SZ',
          'Elixir.Phone.TD','Elixir.Phone.TG','Elixir.Phone.TH',
          'Elixir.Phone.TJ','Elixir.Phone.TK','Elixir.Phone.TL',
          'Elixir.Phone.TM','Elixir.Phone.TN','Elixir.Phone.TO',
          'Elixir.Phone.TR','Elixir.Phone.TV','Elixir.Phone.TW',
          'Elixir.Phone.TZ','Elixir.Phone.UA','Elixir.Phone.UG',
          'Elixir.Phone.UY','Elixir.Phone.UZ','Elixir.Phone.VE',
          'Elixir.Phone.VN','Elixir.Phone.VU','Elixir.Phone.WF',
          'Elixir.Phone.WS','Elixir.Phone.YE','Elixir.Phone.ZA',
          'Elixir.Phone.ZM','Elixir.Phone.ZW']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cowlib-2.9.1/ebin"]},
     {primLoad,
         [cow_base64url,cow_cookie,cow_date,cow_hpack,cow_http,cow_http2,
          cow_http2_machine,cow_http_hd,cow_http_struct_hd,cow_http_te,
          cow_iolists,cow_link,cow_mimetypes,cow_multipart,cow_qs,cow_spdy,
          cow_sse,cow_uri,cow_uri_template,cow_ws]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ranch-1.7.1/ebin"]},
     {primLoad,
         [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,ranch_conns_sup,
          ranch_crc32c,ranch_listener_sup,ranch_protocol,ranch_proxy_header,
          ranch_server,ranch_ssl,ranch_sup,ranch_tcp,ranch_transport]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cowboy-2.8.0/ebin"]},
     {primLoad,
         [cowboy,cowboy_app,cowboy_bstr,cowboy_children,cowboy_clear,
          cowboy_clock,cowboy_compress_h,cowboy_constraints,cowboy_handler,
          cowboy_http,cowboy_http2,cowboy_loop,cowboy_metrics_h,
          cowboy_middleware,cowboy_req,cowboy_rest,cowboy_router,
          cowboy_static,cowboy_stream,cowboy_stream_h,cowboy_sub_protocol,
          cowboy_sup,cowboy_tls,cowboy_tracer_h,cowboy_websocket]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug_cowboy-2.3.0/ebin"]},
     {primLoad,
         ['Elixir.Plug.Cowboy','Elixir.Plug.Cowboy.Conn',
          'Elixir.Plug.Cowboy.Drainer','Elixir.Plug.Cowboy.Handler',
          'Elixir.Plug.Cowboy.Stream','Elixir.Plug.Cowboy.Translator']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/postgrex-0.15.5/ebin"]},
     {primLoad,
         ['Elixir.Collectable.Postgrex.Stream',
          'Elixir.DBConnection.Query.Postgrex.Copy',
          'Elixir.DBConnection.Query.Postgrex.Parameters',
          'Elixir.DBConnection.Query.Postgrex.Query',
          'Elixir.Enumerable.Postgrex.Stream','Elixir.Postgrex',
          'Elixir.Postgrex.App','Elixir.Postgrex.BinaryExtension',
          'Elixir.Postgrex.BinaryUtils','Elixir.Postgrex.Box',
          'Elixir.Postgrex.Circle','Elixir.Postgrex.Copy',
          'Elixir.Postgrex.Cursor','Elixir.Postgrex.DefaultTypes',
          'Elixir.Postgrex.Error','Elixir.Postgrex.ErrorCode',
          'Elixir.Postgrex.Extension','Elixir.Postgrex.Extensions.Array',
          'Elixir.Postgrex.Extensions.BitString',
          'Elixir.Postgrex.Extensions.Bool','Elixir.Postgrex.Extensions.Box',
          'Elixir.Postgrex.Extensions.Circle',
          'Elixir.Postgrex.Extensions.Date',
          'Elixir.Postgrex.Extensions.Float4',
          'Elixir.Postgrex.Extensions.Float8',
          'Elixir.Postgrex.Extensions.HStore',
          'Elixir.Postgrex.Extensions.INET','Elixir.Postgrex.Extensions.Int2',
          'Elixir.Postgrex.Extensions.Int4','Elixir.Postgrex.Extensions.Int8',
          'Elixir.Postgrex.Extensions.Interval',
          'Elixir.Postgrex.Extensions.JSON',
          'Elixir.Postgrex.Extensions.JSONB',
          'Elixir.Postgrex.Extensions.Line',
          'Elixir.Postgrex.Extensions.LineSegment',
          'Elixir.Postgrex.Extensions.MACADDR',
          'Elixir.Postgrex.Extensions.Name',
          'Elixir.Postgrex.Extensions.Numeric',
          'Elixir.Postgrex.Extensions.OID','Elixir.Postgrex.Extensions.Path',
          'Elixir.Postgrex.Extensions.Point',
          'Elixir.Postgrex.Extensions.Polygon',
          'Elixir.Postgrex.Extensions.Range','Elixir.Postgrex.Extensions.Raw',
          'Elixir.Postgrex.Extensions.Record',
          'Elixir.Postgrex.Extensions.TID',
          'Elixir.Postgrex.Extensions.TSVector',
          'Elixir.Postgrex.Extensions.Time',
          'Elixir.Postgrex.Extensions.TimeTZ',
          'Elixir.Postgrex.Extensions.Timestamp',
          'Elixir.Postgrex.Extensions.TimestampTZ',
          'Elixir.Postgrex.Extensions.UUID',
          'Elixir.Postgrex.Extensions.VoidBinary',
          'Elixir.Postgrex.Extensions.VoidText','Elixir.Postgrex.INET',
          'Elixir.Postgrex.Interval','Elixir.Postgrex.Lexeme',
          'Elixir.Postgrex.Line','Elixir.Postgrex.LineSegment',
          'Elixir.Postgrex.MACADDR','Elixir.Postgrex.Messages',
          'Elixir.Postgrex.Notifications','Elixir.Postgrex.Parameters',
          'Elixir.Postgrex.Path','Elixir.Postgrex.Point',
          'Elixir.Postgrex.Polygon','Elixir.Postgrex.Protocol',
          'Elixir.Postgrex.Query','Elixir.Postgrex.QueryError',
          'Elixir.Postgrex.Range','Elixir.Postgrex.Result',
          'Elixir.Postgrex.SCRAM','Elixir.Postgrex.Stream',
          'Elixir.Postgrex.SuperExtension','Elixir.Postgrex.TypeInfo',
          'Elixir.Postgrex.TypeModule','Elixir.Postgrex.TypeServer',
          'Elixir.Postgrex.TypeSupervisor','Elixir.Postgrex.Types',
          'Elixir.Postgrex.Utils','Elixir.String.Chars.Postgrex.Copy',
          'Elixir.String.Chars.Postgrex.Query']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/crontab-1.1.10/ebin"]},
     {primLoad,
         ['Elixir.Crontab.CronExpression',
          'Elixir.Crontab.CronExpression.Composer',
          'Elixir.Crontab.CronExpression.Ecto.Type',
          'Elixir.Crontab.CronExpression.Parser','Elixir.Crontab.DateChecker',
          'Elixir.Crontab.DateHelper','Elixir.Crontab.Scheduler',
          'Elixir.Inspect.Crontab.CronExpression']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/gen_stage-0.14.3/ebin"]},
     {primLoad,
         ['Elixir.ConsumerSupervisor','Elixir.ConsumerSupervisor.Default',
          'Elixir.GenStage','Elixir.GenStage.BroadcastDispatcher',
          'Elixir.GenStage.Buffer','Elixir.GenStage.DemandDispatcher',
          'Elixir.GenStage.Dispatcher','Elixir.GenStage.PartitionDispatcher',
          'Elixir.GenStage.Stream','Elixir.GenStage.Streamer',
          'Elixir.GenStage.Utils']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/quantum-2.2.7/ebin"]},
     {primLoad,
         ['Elixir.Quantum','Elixir.Quantum.Application',
          'Elixir.Quantum.DateLibrary','Elixir.Quantum.DateLibrary.Calendar',
          'Elixir.Quantum.DateLibrary.InvalidDateTimeForTimezoneError',
          'Elixir.Quantum.DateLibrary.InvalidTimezoneError',
          'Elixir.Quantum.DateLibrary.Timex',
          'Elixir.Quantum.ExecutionBroadcaster',
          'Elixir.Quantum.ExecutionBroadcaster.JobInPastError',
          'Elixir.Quantum.Executor','Elixir.Quantum.ExecutorSupervisor',
          'Elixir.Quantum.Job','Elixir.Quantum.JobBroadcaster',
          'Elixir.Quantum.Normalizer','Elixir.Quantum.RunStrategy',
          'Elixir.Quantum.RunStrategy.All','Elixir.Quantum.RunStrategy.Local',
          'Elixir.Quantum.RunStrategy.NodeList',
          'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.All',
          'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.Local',
          'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.Random',
          'Elixir.Quantum.RunStrategy.Random','Elixir.Quantum.Scheduler',
          'Elixir.Quantum.Supervisor','Elixir.Quantum.TaskRegistry',
          'Elixir.Quantum.TaskStagesSupervisor','Elixir.Quantum.Util']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/sched_ex-1.1.1/ebin"]},
     {primLoad,
         ['Elixir.SchedEx','Elixir.SchedEx.IdentityTimeScale',
          'Elixir.SchedEx.Runner','Elixir.SchedEx.Stats',
          'Elixir.SchedEx.Stats.Value','Elixir.SchedEx.TimeScale']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/skooma-0.2.0/ebin"]},
     {primLoad,
         ['Elixir.Skooma','Elixir.Skooma.Basic','Elixir.Skooma.Map',
          'Elixir.Skooma.Utils','Elixir.Skooma.Validators']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry_poller-0.5.1/ebin"]},
     {primLoad,
         [telemetry_poller,telemetry_poller_app,telemetry_poller_builtin,
          telemetry_poller_sup]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/websockex-0.4.2/ebin"]},
     {primLoad,
         ['Elixir.WebSockex','Elixir.WebSockex.Application',
          'Elixir.WebSockex.ApplicationError',
          'Elixir.WebSockex.BadResponseError',
          'Elixir.WebSockex.CallingSelfError','Elixir.WebSockex.Conn',
          'Elixir.WebSockex.ConnError','Elixir.WebSockex.FragmentParseError',
          'Elixir.WebSockex.Frame','Elixir.WebSockex.FrameEncodeError',
          'Elixir.WebSockex.FrameError','Elixir.WebSockex.HandshakeError',
          'Elixir.WebSockex.InvalidFrameError',
          'Elixir.WebSockex.NotConnectedError',
          'Elixir.WebSockex.RequestError','Elixir.WebSockex.URLError',
          'Elixir.WebSockex.Utils']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/yamerl-0.8.0/ebin"]},
     {primLoad,
         [yamerl,yamerl_app,yamerl_constr,yamerl_errors,yamerl_node_binary,
          yamerl_node_bool,yamerl_node_bool_ext,yamerl_node_bool_json,
          yamerl_node_erlang_atom,yamerl_node_erlang_fun,yamerl_node_float,
          yamerl_node_float_ext,yamerl_node_float_json,yamerl_node_int,
          yamerl_node_int_ext,yamerl_node_int_json,yamerl_node_ipaddr,
          yamerl_node_map,yamerl_node_null,yamerl_node_null_json,
          yamerl_node_seq,yamerl_node_size,yamerl_node_str,
          yamerl_node_str_json,yamerl_node_timestamp,yamerl_parser,yamerl_sup,
          yamerl_yamler_compat]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/yaml_elixir-2.4.0/ebin"]},
     {primLoad,
         ['Elixir.YamlElixir','Elixir.YamlElixir.FileNotFoundError',
          'Elixir.YamlElixir.Mapper','Elixir.YamlElixir.Node.KeywordList',
          'Elixir.YamlElixir.ParsingError','Elixir.YamlElixir.Records',
          'Elixir.YamlElixir.Sigil']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/invet_hub-0.1.0/ebin"]},
     {primLoad,
         ['Elixir.InvetHub','Elixir.InvetHub.Accounts.User',
          'Elixir.InvetHub.Application','Elixir.InvetHub.Auth',
          'Elixir.InvetHub.Catalog.Branch','Elixir.InvetHub.Catalog.Report',
          'Elixir.InvetHub.Catalog.Variation','Elixir.InvetHub.Email',
          'Elixir.InvetHub.Inventory.Inventory',
          'Elixir.InvetHub.Inventory.InventoryHistory','Elixir.InvetHub.Logs',
          'Elixir.InvetHub.Logs.System_logs','Elixir.InvetHub.Logs.User_logs',
          'Elixir.InvetHub.Mailer','Elixir.InvetHub.Repo',
          'Elixir.InvetHubWeb','Elixir.InvetHubWeb.CatalogController',
          'Elixir.InvetHubWeb.CatalogView',
          'Elixir.InvetHubWeb.DashboardController',
          'Elixir.InvetHubWeb.DashboardView','Elixir.InvetHubWeb.Endpoint',
          'Elixir.InvetHubWeb.ErrorHelpers','Elixir.InvetHubWeb.ErrorView',
          'Elixir.InvetHubWeb.Gettext',
          'Elixir.InvetHubWeb.InventoryController',
          'Elixir.InvetHubWeb.InventoryView','Elixir.InvetHubWeb.LayoutView',
          'Elixir.InvetHubWeb.PageController','Elixir.InvetHubWeb.PageView',
          'Elixir.InvetHubWeb.Plugs.RequireAuth',
          'Elixir.InvetHubWeb.Plugs.SessionTimeout',
          'Elixir.InvetHubWeb.Plugs.SetBranch',
          'Elixir.InvetHubWeb.Plugs.SetUser',
          'Elixir.InvetHubWeb.ReportsController',
          'Elixir.InvetHubWeb.ReportsView','Elixir.InvetHubWeb.Router',
          'Elixir.InvetHubWeb.Router.Helpers',
          'Elixir.InvetHubWeb.SessionController',
          'Elixir.InvetHubWeb.SessionView','Elixir.InvetHubWeb.Telemetry',
          'Elixir.InvetHubWeb.UserController','Elixir.InvetHubWeb.UserSocket',
          'Elixir.InvetHubWeb.UserView']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/iex-1.10.1/ebin"]},
     {primLoad,
         ['Elixir.IEx','Elixir.IEx.App','Elixir.IEx.Autocomplete',
          'Elixir.IEx.Broker','Elixir.IEx.CLI','Elixir.IEx.Config',
          'Elixir.IEx.Evaluator','Elixir.IEx.Helpers','Elixir.IEx.History',
          'Elixir.IEx.Info','Elixir.IEx.Info.Any','Elixir.IEx.Info.Atom',
          'Elixir.IEx.Info.BitString','Elixir.IEx.Info.Date',
          'Elixir.IEx.Info.Float','Elixir.IEx.Info.Function',
          'Elixir.IEx.Info.Integer','Elixir.IEx.Info.List',
          'Elixir.IEx.Info.Map','Elixir.IEx.Info.NaiveDateTime',
          'Elixir.IEx.Info.PID','Elixir.IEx.Info.Port',
          'Elixir.IEx.Info.Reference','Elixir.IEx.Info.Time',
          'Elixir.IEx.Info.Tuple','Elixir.IEx.Introspection','Elixir.IEx.Pry',
          'Elixir.IEx.Server','Elixir.IEx.State']},
     {progress,modules_loaded},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$ROOT/lib/kernel-6.3/ebin","$ROOT/lib/stdlib-3.8/ebin",
          "$ROOT/lib/compiler-7.3.2/ebin","$RELEASE_LIB/elixir-1.10.1/ebin",
          "$ROOT/lib/sasl-3.3/ebin","$ROOT/lib/runtime_tools-1.13.2/ebin",
          "$RELEASE_LIB/logger-1.10.1/ebin",
          "$RELEASE_LIB/nimble_parsec-0.5.3/ebin",
          "$RELEASE_LIB/telemetry-0.4.2/ebin",
          "$RELEASE_LIB/absinthe-1.5.2/ebin","$RELEASE_LIB/eex-1.10.1/ebin",
          "$RELEASE_LIB/mime-1.3.1/ebin","$ROOT/lib/crypto-4.4.1/ebin",
          "$RELEASE_LIB/plug_crypto-1.1.2/ebin",
          "$RELEASE_LIB/plug-1.10.3/ebin",
          "$RELEASE_LIB/absinthe_plug-1.5.0/ebin","$ROOT/lib/asn1-5.0.8/ebin",
          "$RELEASE_LIB/certifi-2.5.2/ebin",
          "$RELEASE_LIB/unicode_util_compat-0.5.0/ebin",
          "$RELEASE_LIB/idna-6.0.1/ebin","$RELEASE_LIB/metrics-1.0.1/ebin",
          "$RELEASE_LIB/mimerl-1.2.0/ebin",
          "$ROOT/lib/syntax_tools-2.1.7/ebin",
          "$RELEASE_LIB/parse_trans-3.3.0/ebin",
          "$ROOT/lib/public_key-1.6.5/ebin","$ROOT/lib/ssl-9.2/ebin",
          "$RELEASE_LIB/ssl_verify_fun-1.1.6/ebin",
          "$RELEASE_LIB/hackney-1.16.0/ebin","$RELEASE_LIB/bamboo-1.5.0/ebin",
          "$RELEASE_LIB/gen_smtp-0.15.0/ebin",
          "$RELEASE_LIB/bamboo_smtp-2.1.0/ebin",
          "$RELEASE_LIB/eternal-1.2.1/ebin",
          "$RELEASE_LIB/sleeplocks-1.1.1/ebin",
          "$RELEASE_LIB/cachex-3.2.0/ebin","$RELEASE_LIB/tzdata-1.0.3/ebin",
          "$RELEASE_LIB/calendar-0.17.6/ebin","$RELEASE_LIB/cuid-0.1.0/ebin",
          "$RELEASE_LIB/combine-0.10.0/ebin",
          "$RELEASE_LIB/gettext-0.18.0/ebin","$RELEASE_LIB/timex-3.6.2/ebin",
          "$RELEASE_LIB/date_time_parser-0.2.0/ebin",
          "$RELEASE_LIB/connection-1.0.4/ebin",
          "$RELEASE_LIB/db_connection-2.2.2/ebin",
          "$RELEASE_LIB/decimal-1.8.1/ebin","$RELEASE_LIB/ecto-3.4.5/ebin",
          "$RELEASE_LIB/ecto_sql-3.4.5/ebin","$RELEASE_LIB/endon-1.0.0/ebin",
          "$RELEASE_LIB/earmark_parser-1.4.10/ebin",
          "$RELEASE_LIB/makeup-1.0.3/ebin",
          "$RELEASE_LIB/makeup_elixir-0.14.1/ebin",
          "$RELEASE_LIB/ex_doc-0.22.2/ebin","$RELEASE_LIB/jason-1.2.1/ebin",
          "$RELEASE_LIB/myxql-0.4.1/ebin",
          "$RELEASE_LIB/phoenix_pubsub-2.0.0/ebin",
          "$RELEASE_LIB/phoenix-1.5.4/ebin",
          "$RELEASE_LIB/phoenix_ecto-4.1.0/ebin",
          "$RELEASE_LIB/phoenix_html-2.14.2/ebin",
          "$RELEASE_LIB/phoenix_live_view-0.14.3/ebin",
          "$RELEASE_LIB/telemetry_metrics-0.5.0/ebin",
          "$RELEASE_LIB/phoenix_live_dashboard-0.2.7/ebin",
          "$RELEASE_LIB/phone-0.4.11/ebin","$RELEASE_LIB/cowlib-2.9.1/ebin",
          "$RELEASE_LIB/ranch-1.7.1/ebin","$RELEASE_LIB/cowboy-2.8.0/ebin",
          "$RELEASE_LIB/plug_cowboy-2.3.0/ebin",
          "$RELEASE_LIB/postgrex-0.15.5/ebin",
          "$RELEASE_LIB/crontab-1.1.10/ebin",
          "$RELEASE_LIB/gen_stage-0.14.3/ebin",
          "$RELEASE_LIB/quantum-2.2.7/ebin",
          "$RELEASE_LIB/sched_ex-1.1.1/ebin","$RELEASE_LIB/skooma-0.2.0/ebin",
          "$RELEASE_LIB/telemetry_poller-0.5.1/ebin",
          "$RELEASE_LIB/websockex-0.4.2/ebin",
          "$RELEASE_LIB/yamerl-0.8.0/ebin",
          "$RELEASE_LIB/yaml_elixir-2.4.0/ebin",
          "$RELEASE_LIB/invet_hub-0.1.0/ebin","$RELEASE_LIB/iex-1.10.1/ebin"]},
     {kernelProcess,heart,{heart,start,[]}},
     {kernelProcess,logger,{logger_server,start_link,[]}},
     {kernelProcess,application_controller,
         {application_controller,start,
             [{application,kernel,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"6.3"},
                   {id,[]},
                   {modules,
                       [application,application_controller,application_master,
                        application_starter,auth,code,code_server,dist_util,
                        erl_boot_server,erl_distribution,erl_reply,
                        erl_signal_handler,error_handler,error_logger,file,
                        file_server,file_io_server,global,global_group,
                        global_search,group,group_history,heart,
                        hipe_unified_loader,inet6_tcp,inet6_tcp_dist,
                        inet6_udp,inet6_sctp,inet_config,inet_hosts,
                        inet_gethost_native,inet_tcp_dist,kernel,
                        kernel_config,kernel_refc,local_tcp,local_udp,logger,
                        logger_backend,logger_config,logger_disk_log_h,
                        logger_filters,logger_formatter,logger_h_common,
                        logger_handler_watcher,logger_olp,logger_proxy,
                        logger_server,logger_simple_h,logger_std_h,logger_sup,
                        net,net_adm,net_kernel,os,ram_file,rpc,user,user_drv,
                        user_sup,disk_log,disk_log_1,disk_log_server,
                        disk_log_sup,dist_ac,erl_ddll,erl_epmd,erts_debug,
                        gen_tcp,gen_udp,gen_sctp,inet,inet_db,inet_dns,
                        inet_parse,inet_res,inet_tcp,inet_udp,inet_sctp,pg2,
                        raw_file_io,raw_file_io_compressed,
                        raw_file_io_deflate,raw_file_io_delayed,
                        raw_file_io_inflate,raw_file_io_list,raw_file_io_raw,
                        seq_trace,standard_error,wrap_log_reader]},
                   {registered,
                       [application_controller,erl_reply,auth,boot_server,
                        code_server,disk_log_server,disk_log_sup,
                        erl_prim_loader,error_logger,file_server_2,
                        fixtable_server,global_group,global_name_server,heart,
                        init,kernel_config,kernel_refc,kernel_sup,logger,
                        logger_handler_watcher,logger_sup,net_kernel,net_sup,
                        rex,user,os_server,ddll_server,erl_epmd,inet_db,pg2]},
                   {applications,[]},
                   {included_applications,[]},
                   {env,
                       [{logger_level,notice},{logger_sasl_compatible,false}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{kernel,[]}}]}]}},
     {progress,init_kernel_started},
     {apply,
         {application,load,
             [{application,stdlib,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"3.8"},
                   {id,[]},
                   {modules,
                       [array,base64,beam_lib,binary,c,calendar,dets,
                        dets_server,dets_sup,dets_utils,dets_v9,dict,digraph,
                        digraph_utils,edlin,edlin_expand,epp,eval_bits,
                        erl_abstract_code,erl_anno,erl_bits,erl_compile,
                        erl_error,erl_eval,erl_expand_records,erl_internal,
                        erl_lint,erl_parse,erl_posix_msg,erl_pp,erl_scan,
                        erl_tar,error_logger_file_h,error_logger_tty_h,
                        escript,ets,file_sorter,filelib,filename,gb_trees,
                        gb_sets,gen,gen_event,gen_fsm,gen_server,gen_statem,
                        io,io_lib,io_lib_format,io_lib_fread,io_lib_pretty,
                        lists,log_mf_h,maps,math,ms_transform,orddict,ordsets,
                        otp_internal,pool,proc_lib,proplists,qlc,qlc_pt,queue,
                        rand,random,re,sets,shell,shell_default,slave,sofs,
                        string,supervisor,supervisor_bridge,sys,timer,unicode,
                        unicode_util,uri_string,win32reg,zip]},
                   {registered,
                       [timer_server,rsh_starter,take_over_monitor,
                        pool_master,dets]},
                   {applications,[kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,compiler,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"7.3.2"},
                   {id,[]},
                   {modules,
                       [beam_a,beam_asm,beam_block,beam_bs,beam_bsm,
                        beam_clean,beam_dead,beam_dict,beam_disasm,
                        beam_except,beam_flatten,beam_jump,beam_listing,
                        beam_opcodes,beam_peep,beam_receive,beam_reorder,
                        beam_record,beam_split,beam_trim,beam_type,beam_utils,
                        beam_validator,beam_z,cerl,cerl_clauses,cerl_inline,
                        cerl_sets,cerl_trees,compile,core_scan,core_lint,
                        core_parse,core_pp,core_lib,erl_bifs,rec_env,
                        sys_core_alias,sys_core_bsm,sys_core_dsetel,
                        sys_core_fold,sys_core_fold_lists,sys_core_inline,
                        sys_pre_attributes,v3_codegen,v3_core,v3_kernel,
                        v3_kernel_pp]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,elixir,
                  [{description,"elixir"},
                   {vsn,"1.10.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Access','Elixir.Agent.Server','Elixir.Agent',
                        'Elixir.Application','Elixir.ArgumentError',
                        'Elixir.ArithmeticError','Elixir.Atom',
                        'Elixir.BadArityError','Elixir.BadBooleanError',
                        'Elixir.BadFunctionError','Elixir.BadMapError',
                        'Elixir.BadStructError','Elixir.Base',
                        'Elixir.Behaviour','Elixir.Bitwise',
                        'Elixir.Calendar.ISO',
                        'Elixir.Calendar.TimeZoneDatabase',
                        'Elixir.Calendar.UTCOnlyTimeZoneDatabase',
                        'Elixir.Calendar','Elixir.CaseClauseError',
                        'Elixir.Code.Formatter','Elixir.Code.Identifier',
                        'Elixir.Code.LoadError','Elixir.Code.Typespec',
                        'Elixir.Code','Elixir.Collectable.BitString',
                        'Elixir.Collectable.File.Stream',
                        'Elixir.Collectable.HashDict',
                        'Elixir.Collectable.HashSet',
                        'Elixir.Collectable.IO.Stream',
                        'Elixir.Collectable.List','Elixir.Collectable.Map',
                        'Elixir.Collectable.MapSet','Elixir.Collectable',
                        'Elixir.CompileError','Elixir.CondClauseError',
                        'Elixir.Config.Provider','Elixir.Config.Reader',
                        'Elixir.Config','Elixir.Date.Range','Elixir.Date',
                        'Elixir.DateTime','Elixir.Dict',
                        'Elixir.DynamicSupervisor','Elixir.Enum.EmptyError',
                        'Elixir.Enum.OutOfBoundsError','Elixir.Enum',
                        'Elixir.Enumerable.Date.Range',
                        'Elixir.Enumerable.File.Stream',
                        'Elixir.Enumerable.Function',
                        'Elixir.Enumerable.GenEvent.Stream',
                        'Elixir.Enumerable.HashDict',
                        'Elixir.Enumerable.HashSet',
                        'Elixir.Enumerable.IO.Stream',
                        'Elixir.Enumerable.List','Elixir.Enumerable.Map',
                        'Elixir.Enumerable.MapSet','Elixir.Enumerable.Range',
                        'Elixir.Enumerable.Stream','Elixir.Enumerable',
                        'Elixir.ErlangError','Elixir.Exception',
                        'Elixir.File.CopyError','Elixir.File.Error',
                        'Elixir.File.LinkError','Elixir.File.RenameError',
                        'Elixir.File.Stat','Elixir.File.Stream','Elixir.File',
                        'Elixir.Float','Elixir.Function',
                        'Elixir.FunctionClauseError','Elixir.GenEvent.Stream',
                        'Elixir.GenEvent','Elixir.GenServer',
                        'Elixir.HashDict','Elixir.HashSet',
                        'Elixir.IO.ANSI.Docs','Elixir.IO.ANSI.Sequence',
                        'Elixir.IO.ANSI','Elixir.IO.Stream',
                        'Elixir.IO.StreamError','Elixir.IO',
                        'Elixir.Inspect.Algebra','Elixir.Inspect.Any',
                        'Elixir.Inspect.Atom','Elixir.Inspect.BitString',
                        'Elixir.Inspect.Date.Range','Elixir.Inspect.Date',
                        'Elixir.Inspect.DateTime','Elixir.Inspect.Error',
                        'Elixir.Inspect.Float','Elixir.Inspect.Function',
                        'Elixir.Inspect.HashDict','Elixir.Inspect.HashSet',
                        'Elixir.Inspect.Integer','Elixir.Inspect.List',
                        'Elixir.Inspect.Macro.Env','Elixir.Inspect.Map',
                        'Elixir.Inspect.MapSet',
                        'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
                        'Elixir.Inspect.PID','Elixir.Inspect.Port',
                        'Elixir.Inspect.Range','Elixir.Inspect.Reference',
                        'Elixir.Inspect.Regex','Elixir.Inspect.Stream',
                        'Elixir.Inspect.Time','Elixir.Inspect.Tuple',
                        'Elixir.Inspect.Version.Requirement',
                        'Elixir.Inspect.Version','Elixir.Inspect',
                        'Elixir.Integer','Elixir.Kernel.CLI',
                        'Elixir.Kernel.ErrorHandler',
                        'Elixir.Kernel.LexicalTracker',
                        'Elixir.Kernel.ParallelCompiler',
                        'Elixir.Kernel.ParallelRequire',
                        'Elixir.Kernel.SpecialForms','Elixir.Kernel.Typespec',
                        'Elixir.Kernel.Utils','Elixir.Kernel',
                        'Elixir.KeyError','Elixir.Keyword',
                        'Elixir.List.Chars.Atom',
                        'Elixir.List.Chars.BitString',
                        'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
                        'Elixir.List.Chars.List','Elixir.List.Chars',
                        'Elixir.List','Elixir.Macro.Env','Elixir.Macro',
                        'Elixir.Map','Elixir.MapSet','Elixir.MatchError',
                        'Elixir.Module.Checker','Elixir.Module.LocalsTracker',
                        'Elixir.Module.ParallelChecker',
                        'Elixir.Module.Types.Expr',
                        'Elixir.Module.Types.Helpers',
                        'Elixir.Module.Types.Infer',
                        'Elixir.Module.Types.Pattern','Elixir.Module.Types',
                        'Elixir.Module','Elixir.NaiveDateTime','Elixir.Node',
                        'Elixir.OptionParser.ParseError',
                        'Elixir.OptionParser','Elixir.Path.Wildcard',
                        'Elixir.Path','Elixir.Port','Elixir.Process',
                        'Elixir.Protocol.UndefinedError','Elixir.Protocol',
                        'Elixir.Range','Elixir.Record.Extractor',
                        'Elixir.Record','Elixir.Regex.CompileError',
                        'Elixir.Regex','Elixir.Registry.Partition',
                        'Elixir.Registry.Supervisor','Elixir.Registry',
                        'Elixir.RuntimeError','Elixir.Set',
                        'Elixir.Stream.Reducers','Elixir.Stream',
                        'Elixir.String.Break','Elixir.String.Casing',
                        'Elixir.String.Chars.Atom',
                        'Elixir.String.Chars.BitString',
                        'Elixir.String.Chars.Date',
                        'Elixir.String.Chars.DateTime',
                        'Elixir.String.Chars.Float',
                        'Elixir.String.Chars.Integer',
                        'Elixir.String.Chars.List',
                        'Elixir.String.Chars.NaiveDateTime',
                        'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
                        'Elixir.String.Chars.Version.Requirement',
                        'Elixir.String.Chars.Version','Elixir.String.Chars',
                        'Elixir.String.Tokenizer','Elixir.String.Unicode',
                        'Elixir.String','Elixir.StringIO',
                        'Elixir.Supervisor.Default','Elixir.Supervisor.Spec',
                        'Elixir.Supervisor','Elixir.SyntaxError',
                        'Elixir.System','Elixir.SystemLimitError',
                        'Elixir.Task.Supervised','Elixir.Task.Supervisor',
                        'Elixir.Task','Elixir.Time',
                        'Elixir.TokenMissingError','Elixir.TryClauseError',
                        'Elixir.Tuple','Elixir.URI',
                        'Elixir.UndefinedFunctionError',
                        'Elixir.UnicodeConversionError',
                        'Elixir.Version.InvalidRequirementError',
                        'Elixir.Version.InvalidVersionError',
                        'Elixir.Version.Parser','Elixir.Version.Requirement',
                        'Elixir.Version','Elixir.WithClauseError',elixir,
                        elixir_aliases,elixir_bitstring,elixir_bootstrap,
                        elixir_clauses,elixir_code_server,elixir_compiler,
                        elixir_config,elixir_def,elixir_dispatch,elixir_env,
                        elixir_erl,elixir_erl_clauses,elixir_erl_compiler,
                        elixir_erl_for,elixir_erl_pass,elixir_erl_try,
                        elixir_erl_var,elixir_errors,elixir_expand,elixir_fn,
                        elixir_import,elixir_interpolation,elixir_lexical,
                        elixir_locals,elixir_map,elixir_module,
                        elixir_overridable,elixir_parser,elixir_quote,
                        elixir_rewrite,elixir_sup,elixir_tokenizer,
                        elixir_utils]},
                   {registered,[elixir_sup,elixir_config,elixir_code_server]},
                   {applications,[kernel,stdlib,compiler]},
                   {included_applications,[]},
                   {env,
                       [{check_endianness,true},
                        {ansi_enabled,false},
                        {time_zone_database,
                            'Elixir.Calendar.UTCOnlyTimeZoneDatabase'}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{elixir,[]}}]}]}},
     {apply,
         {application,load,
             [{application,sasl,
                  [{description,"SASL  CXC 138 11"},
                   {vsn,"3.3"},
                   {id,[]},
                   {modules,
                       [sasl,alarm_handler,format_lib_supp,misc_supp,rb,
                        rb_format_supp,release_handler,release_handler_1,
                        erlsrv,sasl_report,sasl_report_tty_h,
                        sasl_report_file_h,systools,systools_make,systools_rc,
                        systools_relup,systools_lib]},
                   {registered,[sasl_sup,alarm_handler,release_handler]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{sasl,[]}}]}]}},
     {apply,
         {application,load,
             [{application,runtime_tools,
                  [{description,"RUNTIME_TOOLS"},
                   {vsn,"1.13.2"},
                   {id,[]},
                   {modules,
                       [appmon_info,dbg,observer_backend,runtime_tools,
                        runtime_tools_sup,erts_alloc_config,ttb_autostart,
                        dyntrace,system_information,scheduler,msacc]},
                   {registered,[runtime_tools_sup]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{runtime_tools,[]}}]}]}},
     {apply,
         {application,load,
             [{application,logger,
                  [{description,"logger"},
                   {vsn,"1.10.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Logger','Elixir.Logger.App',
                        'Elixir.Logger.BackendSupervisor',
                        'Elixir.Logger.Backends.Console',
                        'Elixir.Logger.Config','Elixir.Logger.Counter',
                        'Elixir.Logger.Filter','Elixir.Logger.Formatter',
                        'Elixir.Logger.Handler','Elixir.Logger.Translator',
                        'Elixir.Logger.Utils','Elixir.Logger.Watcher']},
                   {registered,
                       ['Elixir.Logger','Elixir.Logger.BackendSupervisor',
                        'Elixir.Logger.Supervisor','Elixir.Logger.Watcher']},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,
                       [{utc_log,false},
                        {truncate,8096},
                        {backends,[console]},
                        {translators,[{'Elixir.Logger.Translator',translate}]},
                        {sync_threshold,20},
                        {discard_threshold,500},
                        {handle_otp_reports,true},
                        {handle_sasl_reports,false},
                        {discard_threshold_periodic_check,30000},
                        {discard_threshold_for_error_logger,500},
                        {compile_time_purge_matching,[]},
                        {compile_time_application,nil},
                        {translator_inspect_opts,[]},
                        {console,[]},
                        {start_options,[]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Logger.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,nimble_parsec,
                  [{description,
                       "A simple and fast library for text-based parser combinators"},
                   {vsn,"0.5.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Mix.Tasks.NimbleParsec.Compile',
                        'Elixir.NimbleParsec','Elixir.NimbleParsec.Compiler',
                        'Elixir.NimbleParsec.Recorder']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,telemetry,
                  [{description,
                       "Dynamic dispatching library for metrics and instrumentations"},
                   {vsn,"0.4.2"},
                   {id,[]},
                   {modules,
                       [telemetry,telemetry_app,telemetry_handler_table,
                        telemetry_sup]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{telemetry_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,absinthe,
                  [{description,"absinthe"},
                   {vsn,"1.5.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Absinthe','Elixir.Absinthe.Adapter',
                        'Elixir.Absinthe.Adapter.LanguageConventions',
                        'Elixir.Absinthe.Adapter.Passthrough',
                        'Elixir.Absinthe.Adapter.StrictLanguageConventions',
                        'Elixir.Absinthe.Adapter.Underscore',
                        'Elixir.Absinthe.AnalysisError',
                        'Elixir.Absinthe.Blueprint',
                        'Elixir.Absinthe.Blueprint.Directive',
                        'Elixir.Absinthe.Blueprint.Document',
                        'Elixir.Absinthe.Blueprint.Document.Field',
                        'Elixir.Absinthe.Blueprint.Document.Fragment',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Inline',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Named',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Named.Use',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Spread',
                        'Elixir.Absinthe.Blueprint.Document.Operation',
                        'Elixir.Absinthe.Blueprint.Document.VariableDefinition',
                        'Elixir.Absinthe.Blueprint.Draft',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Argument',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.BooleanValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Directive',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.DirectiveDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Document',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValueDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Field',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FieldDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FloatValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Fragment',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FragmentSpread',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InlineFragment',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputValueDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.IntValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NamedType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NonNullType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NullValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectField',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.OperationDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ScalarTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDeclaration',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.StringValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.TypeExtensionDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.UnionTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Variable',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.VariableDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Atom',
                        'Elixir.Absinthe.Blueprint.Draft.List',
                        'Elixir.Absinthe.Blueprint.Execution',
                        'Elixir.Absinthe.Blueprint.Input',
                        'Elixir.Absinthe.Blueprint.Input.Argument',
                        'Elixir.Absinthe.Blueprint.Input.Boolean',
                        'Elixir.Absinthe.Blueprint.Input.Enum',
                        'Elixir.Absinthe.Blueprint.Input.Field',
                        'Elixir.Absinthe.Blueprint.Input.Float',
                        'Elixir.Absinthe.Blueprint.Input.Generated',
                        'Elixir.Absinthe.Blueprint.Input.Integer',
                        'Elixir.Absinthe.Blueprint.Input.List',
                        'Elixir.Absinthe.Blueprint.Input.Null',
                        'Elixir.Absinthe.Blueprint.Input.Object',
                        'Elixir.Absinthe.Blueprint.Input.RawValue',
                        'Elixir.Absinthe.Blueprint.Input.String',
                        'Elixir.Absinthe.Blueprint.Input.Value',
                        'Elixir.Absinthe.Blueprint.Input.Variable',
                        'Elixir.Absinthe.Blueprint.Input.Variable.Use',
                        'Elixir.Absinthe.Blueprint.Result.Leaf',
                        'Elixir.Absinthe.Blueprint.Result.List',
                        'Elixir.Absinthe.Blueprint.Result.Object',
                        'Elixir.Absinthe.Blueprint.Schema',
                        'Elixir.Absinthe.Blueprint.Schema.Deprecation',
                        'Elixir.Absinthe.Blueprint.Schema.DirectiveDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.EnumTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.EnumValueDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.FieldDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InputValueDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.SchemaDeclaration',
                        'Elixir.Absinthe.Blueprint.Schema.SchemaDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.UnionTypeDefinition',
                        'Elixir.Absinthe.Blueprint.SourceLocation',
                        'Elixir.Absinthe.Blueprint.Transform',
                        'Elixir.Absinthe.Blueprint.TypeReference',
                        'Elixir.Absinthe.Blueprint.TypeReference.Identifier',
                        'Elixir.Absinthe.Blueprint.TypeReference.List',
                        'Elixir.Absinthe.Blueprint.TypeReference.Name',
                        'Elixir.Absinthe.Blueprint.TypeReference.NonNull',
                        'Elixir.Absinthe.Complexity',
                        'Elixir.Absinthe.ExecutionError',
                        'Elixir.Absinthe.Introspection',
                        'Elixir.Absinthe.Introspection.Kind',
                        'Elixir.Absinthe.Language',
                        'Elixir.Absinthe.Language.Argument',
                        'Elixir.Absinthe.Language.BooleanValue',
                        'Elixir.Absinthe.Language.Directive',
                        'Elixir.Absinthe.Language.DirectiveDefinition',
                        'Elixir.Absinthe.Language.Document',
                        'Elixir.Absinthe.Language.EnumTypeDefinition',
                        'Elixir.Absinthe.Language.EnumValue',
                        'Elixir.Absinthe.Language.EnumValueDefinition',
                        'Elixir.Absinthe.Language.Field',
                        'Elixir.Absinthe.Language.FieldDefinition',
                        'Elixir.Absinthe.Language.FloatValue',
                        'Elixir.Absinthe.Language.Fragment',
                        'Elixir.Absinthe.Language.FragmentSpread',
                        'Elixir.Absinthe.Language.InlineFragment',
                        'Elixir.Absinthe.Language.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Language.InputValueDefinition',
                        'Elixir.Absinthe.Language.IntValue',
                        'Elixir.Absinthe.Language.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Language.ListType',
                        'Elixir.Absinthe.Language.ListValue',
                        'Elixir.Absinthe.Language.NamedType',
                        'Elixir.Absinthe.Language.NonNullType',
                        'Elixir.Absinthe.Language.NullValue',
                        'Elixir.Absinthe.Language.ObjectField',
                        'Elixir.Absinthe.Language.ObjectTypeDefinition',
                        'Elixir.Absinthe.Language.ObjectValue',
                        'Elixir.Absinthe.Language.OperationDefinition',
                        'Elixir.Absinthe.Language.ScalarTypeDefinition',
                        'Elixir.Absinthe.Language.SchemaDeclaration',
                        'Elixir.Absinthe.Language.SchemaDefinition',
                        'Elixir.Absinthe.Language.SelectionSet',
                        'Elixir.Absinthe.Language.Source',
                        'Elixir.Absinthe.Language.StringValue',
                        'Elixir.Absinthe.Language.TypeExtensionDefinition',
                        'Elixir.Absinthe.Language.UnionTypeDefinition',
                        'Elixir.Absinthe.Language.Variable',
                        'Elixir.Absinthe.Language.VariableDefinition',
                        'Elixir.Absinthe.Lexer','Elixir.Absinthe.Logger',
                        'Elixir.Absinthe.Middleware',
                        'Elixir.Absinthe.Middleware.Async',
                        'Elixir.Absinthe.Middleware.Batch',
                        'Elixir.Absinthe.Middleware.MapGet',
                        'Elixir.Absinthe.Middleware.PassParent',
                        'Elixir.Absinthe.Middleware.Telemetry',
                        'Elixir.Absinthe.Phase',
                        'Elixir.Absinthe.Phase.Blueprint',
                        'Elixir.Absinthe.Phase.Debug',
                        'Elixir.Absinthe.Phase.Document.Arguments.CoerceEnums',
                        'Elixir.Absinthe.Phase.Document.Arguments.CoerceLists',
                        'Elixir.Absinthe.Phase.Document.Arguments.Data',
                        'Elixir.Absinthe.Phase.Document.Arguments.FlagInvalid',
                        'Elixir.Absinthe.Phase.Document.Arguments.Normalize',
                        'Elixir.Absinthe.Phase.Document.Arguments.Parse',
                        'Elixir.Absinthe.Phase.Document.Arguments.VariableTypesMatch',
                        'Elixir.Absinthe.Phase.Document.Complexity.Analysis',
                        'Elixir.Absinthe.Phase.Document.Complexity.Result',
                        'Elixir.Absinthe.Phase.Document.Context',
                        'Elixir.Absinthe.Phase.Document.CurrentOperation',
                        'Elixir.Absinthe.Phase.Document.Directives',
                        'Elixir.Absinthe.Phase.Document.Execution.Resolution',
                        'Elixir.Absinthe.Phase.Document.MissingLiterals',
                        'Elixir.Absinthe.Phase.Document.MissingVariables',
                        'Elixir.Absinthe.Phase.Document.OverrideRoot',
                        'Elixir.Absinthe.Phase.Document.Result',
                        'Elixir.Absinthe.Phase.Document.Uses',
                        'Elixir.Absinthe.Phase.Document.Validation.ArgumentsOfCorrectType',
                        'Elixir.Absinthe.Phase.Document.Validation.FieldsOnCorrectType',
                        'Elixir.Absinthe.Phase.Document.Validation.KnownArgumentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.KnownDirectives',
                        'Elixir.Absinthe.Phase.Document.Validation.KnownFragmentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.LoneAnonymousOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.NoFragmentCycles',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUndefinedVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUnusedFragments',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUnusedVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.OnlyOneSubscription',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedAnOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullArguments',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.Result',
                        'Elixir.Absinthe.Phase.Document.Validation.ScalarLeafs',
                        'Elixir.Absinthe.Phase.Document.Validation.SelectedCurrentOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueArgumentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueFragmentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueInputFieldNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueOperationNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueVariableNames',
                        'Elixir.Absinthe.Phase.Document.Validation.Utils.MessageSuggestions',
                        'Elixir.Absinthe.Phase.Document.Validation.VariablesAreInputTypes',
                        'Elixir.Absinthe.Phase.Document.Variables',
                        'Elixir.Absinthe.Phase.Error',
                        'Elixir.Absinthe.Phase.Init',
                        'Elixir.Absinthe.Phase.Parse',
                        'Elixir.Absinthe.Phase.Schema',
                        'Elixir.Absinthe.Phase.Schema.ApplyDeclaration',
                        'Elixir.Absinthe.Phase.Schema.Arguments.Data',
                        'Elixir.Absinthe.Phase.Schema.Arguments.Normalize',
                        'Elixir.Absinthe.Phase.Schema.Arguments.Parse',
                        'Elixir.Absinthe.Phase.Schema.Build',
                        'Elixir.Absinthe.Phase.Schema.Compile',
                        'Elixir.Absinthe.Phase.Schema.Directives',
                        'Elixir.Absinthe.Phase.Schema.FieldImports',
                        'Elixir.Absinthe.Phase.Schema.Hydrate',
                        'Elixir.Absinthe.Phase.Schema.InlineFunctions',
                        'Elixir.Absinthe.Phase.Schema.Introspection',
                        'Elixir.Absinthe.Phase.Schema.MarkReferenced',
                        'Elixir.Absinthe.Phase.Schema.PopulatePersistentTerm',
                        'Elixir.Absinthe.Phase.Schema.RegisterTriggers',
                        'Elixir.Absinthe.Phase.Schema.TypeImports',
                        'Elixir.Absinthe.Phase.Schema.Validation',
                        'Elixir.Absinthe.Phase.Schema.Validation.DefaultEnumValuePresent',
                        'Elixir.Absinthe.Phase.Schema.Validation.InputOutputTypesCorrectlyPlaced',
                        'Elixir.Absinthe.Phase.Schema.Validation.InterfacesMustResolveTypes',
                        'Elixir.Absinthe.Phase.Schema.Validation.KnownDirectives',
                        'Elixir.Absinthe.Phase.Schema.Validation.NamesMustBeValid',
                        'Elixir.Absinthe.Phase.Schema.Validation.NoCircularFieldImports',
                        'Elixir.Absinthe.Phase.Schema.Validation.ObjectInterfacesMustBeValid',
                        'Elixir.Absinthe.Phase.Schema.Validation.ObjectMustImplementInterfaces',
                        'Elixir.Absinthe.Phase.Schema.Validation.QueryTypeMustBeObject',
                        'Elixir.Absinthe.Phase.Schema.Validation.Result',
                        'Elixir.Absinthe.Phase.Schema.Validation.TypeNamesAreReserved',
                        'Elixir.Absinthe.Phase.Schema.Validation.TypeNamesAreUnique',
                        'Elixir.Absinthe.Phase.Schema.Validation.TypeReferencesExist',
                        'Elixir.Absinthe.Phase.Subscription.Result',
                        'Elixir.Absinthe.Phase.Subscription.SubscribeSelf',
                        'Elixir.Absinthe.Phase.Telemetry',
                        'Elixir.Absinthe.Phase.Validation',
                        'Elixir.Absinthe.Phase.Validation.Helpers',
                        'Elixir.Absinthe.Phase.Validation.KnownTypeNames',
                        'Elixir.Absinthe.Pipeline',
                        'Elixir.Absinthe.Pipeline.BatchResolver',
                        'Elixir.Absinthe.Pipeline.ErrorResult',
                        'Elixir.Absinthe.Plugin','Elixir.Absinthe.Resolution',
                        'Elixir.Absinthe.Resolution.Helpers',
                        'Elixir.Absinthe.Resolution.Projector',
                        'Elixir.Absinthe.Schema',
                        'Elixir.Absinthe.Schema.Compiled',
                        'Elixir.Absinthe.Schema.Error',
                        'Elixir.Absinthe.Schema.Hydrator',
                        'Elixir.Absinthe.Schema.Manager',
                        'Elixir.Absinthe.Schema.Notation',
                        'Elixir.Absinthe.Schema.Notation.Definition',
                        'Elixir.Absinthe.Schema.Notation.Error',
                        'Elixir.Absinthe.Schema.Notation.SDL',
                        'Elixir.Absinthe.Schema.Notation.SDL.Render',
                        'Elixir.Absinthe.Schema.PersistentTerm',
                        'Elixir.Absinthe.Schema.Prototype',
                        'Elixir.Absinthe.Schema.Prototype.Compiled',
                        'Elixir.Absinthe.Schema.Prototype.Notation',
                        'Elixir.Absinthe.Schema.Provider',
                        'Elixir.Absinthe.Schema.Rule',
                        'Elixir.Absinthe.SerializationError',
                        'Elixir.Absinthe.Subscription',
                        'Elixir.Absinthe.Subscription.Local',
                        'Elixir.Absinthe.Subscription.Proxy',
                        'Elixir.Absinthe.Subscription.ProxySupervisor',
                        'Elixir.Absinthe.Subscription.Pubsub',
                        'Elixir.Absinthe.Subscription.Supervisor',
                        'Elixir.Absinthe.Test','Elixir.Absinthe.Type',
                        'Elixir.Absinthe.Type.Argument',
                        'Elixir.Absinthe.Type.BuiltIns.Directives',
                        'Elixir.Absinthe.Type.BuiltIns.Introspection',
                        'Elixir.Absinthe.Type.BuiltIns.Scalars',
                        'Elixir.Absinthe.Type.BuiltIns.Scalars.Utils',
                        'Elixir.Absinthe.Type.Custom',
                        'Elixir.Absinthe.Type.Custom.Decimal',
                        'Elixir.Absinthe.Type.Deprecation',
                        'Elixir.Absinthe.Type.Directive',
                        'Elixir.Absinthe.Type.Enum',
                        'Elixir.Absinthe.Type.Enum.Value',
                        'Elixir.Absinthe.Type.Fetch',
                        'Elixir.Absinthe.Type.Field',
                        'Elixir.Absinthe.Type.InputObject',
                        'Elixir.Absinthe.Type.Interface',
                        'Elixir.Absinthe.Type.List',
                        'Elixir.Absinthe.Type.NonNull',
                        'Elixir.Absinthe.Type.Object',
                        'Elixir.Absinthe.Type.Reference',
                        'Elixir.Absinthe.Type.Scalar',
                        'Elixir.Absinthe.Type.Union','Elixir.Absinthe.Utils',
                        'Elixir.Absinthe.Utils.Suggestion',
                        'Elixir.Inspect.Absinthe.Blueprint',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.DirectiveDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.EnumTypeDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.SchemaDeclaration',
                        'Elixir.Inspect.Absinthe.Blueprint.Schema.UnionTypeDefinition',
                        'Elixir.Inspect.Absinthe.Resolution',
                        'Elixir.Mix.Tasks.Absinthe.Schema.Json',
                        'Elixir.Mix.Tasks.Absinthe.Schema.Json.Options',
                        'Elixir.Mix.Tasks.Absinthe.Schema.Sdl',
                        'Elixir.Mix.Tasks.Absinthe.Schema.Sdl.Options',
                        absinthe_parser]},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,logger,nimble_parsec,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,eex,
                  [{description,"eex"},
                   {vsn,"1.10.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.EEx','Elixir.EEx.Compiler',
                        'Elixir.EEx.Engine','Elixir.EEx.SmartEngine',
                        'Elixir.EEx.SyntaxError','Elixir.EEx.Tokenizer']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,mime,
                  [{description,"A MIME type module for Elixir"},
                   {vsn,"1.3.1"},
                   {id,[]},
                   {modules,['Elixir.MIME','Elixir.MIME.Application']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[{types,#{}}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.MIME.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,crypto,
                  [{description,"CRYPTO"},
                   {vsn,"4.4.1"},
                   {id,[]},
                   {modules,[crypto,crypto_ec_curves]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[{fips_mode,false},{rand_cache_size,896}]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,plug_crypto,
                  [{description,"Crypto-related functionality for the web"},
                   {vsn,"1.1.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Plug.Crypto','Elixir.Plug.Crypto.Application',
                        'Elixir.Plug.Crypto.KeyGenerator',
                        'Elixir.Plug.Crypto.MessageEncryptor',
                        'Elixir.Plug.Crypto.MessageVerifier']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Crypto.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,plug,
                  [{description,
                       "A specification and conveniences for composable modules between web applications"},
                   {vsn,"1.10.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Collectable.Plug.Conn',
                        'Elixir.Inspect.Plug.Conn','Elixir.Plug',
                        'Elixir.Plug.Adapters.Cowboy',
                        'Elixir.Plug.Adapters.Cowboy2',
                        'Elixir.Plug.Adapters.Test.Conn',
                        'Elixir.Plug.Application',
                        'Elixir.Plug.BadRequestError','Elixir.Plug.BasicAuth',
                        'Elixir.Plug.Builder','Elixir.Plug.CSRFProtection',
                        'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
                        'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
                        'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
                        'Elixir.Plug.Conn.AlreadySentError',
                        'Elixir.Plug.Conn.CookieOverflowError',
                        'Elixir.Plug.Conn.Cookies',
                        'Elixir.Plug.Conn.InvalidHeaderError',
                        'Elixir.Plug.Conn.InvalidQueryError',
                        'Elixir.Plug.Conn.NotSentError',
                        'Elixir.Plug.Conn.Query','Elixir.Plug.Conn.Status',
                        'Elixir.Plug.Conn.Unfetched','Elixir.Plug.Conn.Utils',
                        'Elixir.Plug.Conn.WrapperError',
                        'Elixir.Plug.Debugger','Elixir.Plug.ErrorHandler',
                        'Elixir.Plug.Exception','Elixir.Plug.Exception.Any',
                        'Elixir.Plug.HTML','Elixir.Plug.Head',
                        'Elixir.Plug.Logger','Elixir.Plug.MIME',
                        'Elixir.Plug.MethodOverride','Elixir.Plug.Parsers',
                        'Elixir.Plug.Parsers.BadEncodingError',
                        'Elixir.Plug.Parsers.JSON',
                        'Elixir.Plug.Parsers.MULTIPART',
                        'Elixir.Plug.Parsers.ParseError',
                        'Elixir.Plug.Parsers.RequestTooLargeError',
                        'Elixir.Plug.Parsers.URLENCODED',
                        'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
                        'Elixir.Plug.RequestId','Elixir.Plug.Router',
                        'Elixir.Plug.Router.InvalidSpecError',
                        'Elixir.Plug.Router.MalformedURIError',
                        'Elixir.Plug.Router.Utils','Elixir.Plug.SSL',
                        'Elixir.Plug.Session','Elixir.Plug.Session.COOKIE',
                        'Elixir.Plug.Session.ETS','Elixir.Plug.Session.Store',
                        'Elixir.Plug.Static',
                        'Elixir.Plug.Static.InvalidPathError',
                        'Elixir.Plug.Telemetry','Elixir.Plug.Test',
                        'Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
                        'Elixir.Plug.UploadError',plug_multipart]},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,eex,logger,mime,plug_crypto,
                        telemetry]},
                   {included_applications,[]},
                   {env,[{validate_header_keys_during_test,true}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,absinthe_plug,
                  [{description,"absinthe_plug"},
                   {vsn,"1.5.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Absinthe.GraphiQL.Validation.NoSubscriptionOnHTTP',
                        'Elixir.Absinthe.Plug',
                        'Elixir.Absinthe.Plug.Batch.Runner',
                        'Elixir.Absinthe.Plug.DocumentProvider',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Check',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Writer',
                        'Elixir.Absinthe.Plug.DocumentProvider.Default',
                        'Elixir.Absinthe.Plug.GraphiQL',
                        'Elixir.Absinthe.Plug.GraphiQL.Assets',
                        'Elixir.Absinthe.Plug.Parser',
                        'Elixir.Absinthe.Plug.Request',
                        'Elixir.Absinthe.Plug.Request.Query',
                        'Elixir.Absinthe.Plug.Types',
                        'Elixir.Absinthe.Plug.Validation.HTTPMethod',
                        'Elixir.Mix.Absinthe.Plug.GraphiQL.AssetsTask',
                        'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Download',
                        'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Remove']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,absinthe,logger,plug]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,asn1,
                  [{description,"The Erlang ASN1 compiler version 5.0.8"},
                   {vsn,"5.0.8"},
                   {id,[]},
                   {modules,[asn1rt_nif]},
                   {registered,[asn1_ns,asn1db]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,certifi,
                  [{description,
                       "CA bundle adapted from Mozilla by https://certifi.io"},
                   {vsn,"2.5.2"},
                   {id,[]},
                   {modules,[certifi]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,unicode_util_compat,
                  [{description,
                       "unicode_util compatibility library for Erlang < 20"},
                   {vsn,"0.5.0"},
                   {id,[]},
                   {modules,[string_compat,unicode_util_compat]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,idna,
                  [{description,"A pure Erlang IDNA implementation"},
                   {vsn,"6.0.1"},
                   {id,[]},
                   {modules,
                       [idna,idna_bidi,idna_context,idna_data,idna_mapping,
                        idna_table,idna_ucs,punycode]},
                   {registered,[]},
                   {applications,[kernel,stdlib,unicode_util_compat]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,metrics,
                  [{description,
                       "A generic interface to different metrics systems in Erlang."},
                   {vsn,"1.0.1"},
                   {id,[]},
                   {modules,
                       [metrics,metrics_dummy,metrics_exometer,
                        metrics_folsom]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,mimerl,
                  [{description,"Library to handle mimetypes"},
                   {vsn,"1.2.0"},
                   {id,[]},
                   {modules,[mimerl]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,syntax_tools,
                  [{description,"Syntax tools"},
                   {vsn,"2.1.7"},
                   {id,[]},
                   {modules,
                       [epp_dodger,erl_comment_scan,erl_prettypr,
                        erl_recomment,erl_syntax,erl_syntax_lib,erl_tidy,igor,
                        merl,merl_transform,prettypr]},
                   {registered,[]},
                   {applications,[stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,parse_trans,
                  [{description,"Parse transform library"},
                   {vsn,"3.3.0"},
                   {id,[]},
                   {modules,
                       [ct_expand,exprecs,parse_trans,parse_trans_codegen,
                        parse_trans_mod,parse_trans_pp]},
                   {registered,[]},
                   {applications,[kernel,stdlib,syntax_tools]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,public_key,
                  [{description,"Public key infrastructure"},
                   {vsn,"1.6.5"},
                   {id,[]},
                   {modules,
                       [public_key,pubkey_pem,pubkey_pbe,pubkey_ssh,
                        pubkey_cert,pubkey_cert_records,pubkey_crl,
                        'OTP-PUB-KEY','PKCS-FRAME']},
                   {registered,[]},
                   {applications,[kernel,stdlib,asn1,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ssl,
                  [{description,"Erlang/OTP SSL application"},
                   {vsn,"9.2"},
                   {id,[]},
                   {modules,
                       [tls_connection,tls_handshake,tls_record,tls_socket,
                        tls_v1,ssl_v3,tls_connection_sup,tls_sender,
                        dtls_connection,dtls_handshake,dtls_record,
                        dtls_socket,dtls_v1,dtls_connection_sup,
                        dtls_packet_demux,dtls_listener_sup,ssl,
                        ssl_session_cache_api,ssl_config,ssl_connection,
                        ssl_handshake,ssl_record,ssl_cipher,ssl_cipher_format,
                        ssl_srp_primes,ssl_alert,ssl_listen_tracker_sup,
                        inet_tls_dist,inet6_tls_dist,ssl_dist_sup,
                        ssl_dist_connection_sup,ssl_dist_admin_sup,
                        ssl_session,ssl_session_cache,ssl_manager,
                        ssl_pem_cache,ssl_pkix_db,ssl_certificate,ssl_crl,
                        ssl_crl_cache,ssl_crl_cache_api,ssl_crl_hash_dir,
                        ssl_app,ssl_sup,ssl_admin_sup,ssl_connection_sup]},
                   {registered,[ssl_sup,ssl_manager]},
                   {applications,[kernel,stdlib,crypto,public_key]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{ssl_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,ssl_verify_fun,
                  [{description,"SSL verification functions for Erlang\n"},
                   {vsn,"1.1.6"},
                   {id,[]},
                   {modules,
                       [ssl_verify_fingerprint,ssl_verify_fun_cert_helpers,
                        ssl_verify_fun_encodings,ssl_verify_hostname,
                        ssl_verify_pk,ssl_verify_string,ssl_verify_util]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,hackney,
                  [{description,"simple HTTP client"},
                   {vsn,"1.16.0"},
                   {id,[]},
                   {modules,
                       [hackney,hackney_app,hackney_bstr,hackney_connect,
                        hackney_connection,hackney_connections,hackney_cookie,
                        hackney_date,hackney_headers,hackney_headers_new,
                        hackney_http,hackney_http_connect,hackney_local_tcp,
                        hackney_manager,hackney_metrics,hackney_multipart,
                        hackney_pool,hackney_pool_handler,hackney_request,
                        hackney_response,hackney_socks5,hackney_ssl,
                        hackney_ssl_certificate,hackney_stream,hackney_sup,
                        hackney_tcp,hackney_trace,hackney_url,hackney_util]},
                   {registered,[hackney_pool]},
                   {applications,
                       [kernel,stdlib,asn1,certifi,crypto,idna,metrics,mimerl,
                        parse_trans,public_key,ssl,ssl_verify_fun]},
                   {included_applications,[]},
                   {env,
                       [{timeout,150000},
                        {max_connections,50},
                        {restart,permanent},
                        {shutdown,10000},
                        {maxr,10},
                        {maxt,1}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{hackney_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,bamboo,
                  [{description,
                       "Straightforward, powerful, and adapter based Elixir email library. Works with Mandrill, Mailgun, SendGrid, SparkPost, Postmark, in-memory, and test."},
                   {vsn,"1.5.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Bamboo','Elixir.Bamboo.Adapter',
                        'Elixir.Bamboo.AdapterHelper',
                        'Elixir.Bamboo.ApiError','Elixir.Bamboo.Attachment',
                        'Elixir.Bamboo.DeliverLaterStrategy',
                        'Elixir.Bamboo.Email',
                        'Elixir.Bamboo.EmptyFromAddressError',
                        'Elixir.Bamboo.Formatter',
                        'Elixir.Bamboo.Formatter.BitString',
                        'Elixir.Bamboo.Formatter.List',
                        'Elixir.Bamboo.Formatter.Map',
                        'Elixir.Bamboo.Formatter.Tuple',
                        'Elixir.Bamboo.ImmediateDeliveryStrategy',
                        'Elixir.Bamboo.LocalAdapter','Elixir.Bamboo.Mailer',
                        'Elixir.Bamboo.MailgunAdapter',
                        'Elixir.Bamboo.MailgunHelper',
                        'Elixir.Bamboo.MandrillAdapter',
                        'Elixir.Bamboo.MandrillHelper',
                        'Elixir.Bamboo.NilRecipientsError',
                        'Elixir.Bamboo.Phoenix',
                        'Elixir.Bamboo.SendGridAdapter',
                        'Elixir.Bamboo.SendGridHelper',
                        'Elixir.Bamboo.SentEmail',
                        'Elixir.Bamboo.SentEmail.DeliveriesError',
                        'Elixir.Bamboo.SentEmail.NoDeliveriesError',
                        'Elixir.Bamboo.SentEmailApiPlug',
                        'Elixir.Bamboo.SentEmailViewerPlug',
                        'Elixir.Bamboo.SentEmailViewerPlug.Helper',
                        'Elixir.Bamboo.TaskSupervisorStrategy',
                        'Elixir.Bamboo.Test','Elixir.Bamboo.TestAdapter',
                        'Elixir.Mix.Tasks.Bamboo.StartSentEmailViewer']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,hackney,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Bamboo',[]}}]}]}},
     {apply,
         {application,load,
             [{application,gen_smtp,
                  [{description,
                       "A generic Erlang SMTP server/client framework"},
                   {vsn,"0.15.0"},
                   {id,[]},
                   {modules,
                       [binstr,gen_smtp_application,gen_smtp_client,
                        gen_smtp_server,gen_smtp_server_session,mimemail,
                        smtp_rfc822_parse,smtp_server_example,smtp_socket,
                        smtp_util]},
                   {registered,[]},
                   {applications,[kernel,stdlib,asn1,crypto,public_key,ssl]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,bamboo_smtp,
                  [{description,"A Bamboo adapter for SMTP"},
                   {vsn,"2.1.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Bamboo.SMTPAdapter',
                        'Elixir.Bamboo.SMTPAdapter.SMTPError']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,bamboo,gen_smtp,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,eternal,
                  [{description,"Make your ETS tables live forever"},
                   {vsn,"1.2.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Eternal','Elixir.Eternal.Priv',
                        'Elixir.Eternal.Server','Elixir.Eternal.Supervisor',
                        'Elixir.Eternal.Table']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,sleeplocks,
                  [{description,"BEAM friendly spinlocks for Elixir/Erlang"},
                   {vsn,"1.1.1"},
                   {id,[]},
                   {modules,[sleeplocks]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cachex,
                  [{description,
                       "Powerful in-memory key/value storage for Elixir"},
                   {vsn,"3.2.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Cachex','Elixir.Cachex.Actions',
                        'Elixir.Cachex.Actions.Clear',
                        'Elixir.Cachex.Actions.Count',
                        'Elixir.Cachex.Actions.Del',
                        'Elixir.Cachex.Actions.Dump',
                        'Elixir.Cachex.Actions.Empty',
                        'Elixir.Cachex.Actions.Exists',
                        'Elixir.Cachex.Actions.Expire',
                        'Elixir.Cachex.Actions.Export',
                        'Elixir.Cachex.Actions.Fetch',
                        'Elixir.Cachex.Actions.Get',
                        'Elixir.Cachex.Actions.GetAndUpdate',
                        'Elixir.Cachex.Actions.Import',
                        'Elixir.Cachex.Actions.Incr',
                        'Elixir.Cachex.Actions.Inspect',
                        'Elixir.Cachex.Actions.Invoke',
                        'Elixir.Cachex.Actions.Keys',
                        'Elixir.Cachex.Actions.Load',
                        'Elixir.Cachex.Actions.Purge',
                        'Elixir.Cachex.Actions.Put',
                        'Elixir.Cachex.Actions.PutMany',
                        'Elixir.Cachex.Actions.Refresh',
                        'Elixir.Cachex.Actions.Reset',
                        'Elixir.Cachex.Actions.Size',
                        'Elixir.Cachex.Actions.Stats',
                        'Elixir.Cachex.Actions.Stream',
                        'Elixir.Cachex.Actions.Take',
                        'Elixir.Cachex.Actions.Touch',
                        'Elixir.Cachex.Actions.Transaction',
                        'Elixir.Cachex.Actions.Ttl',
                        'Elixir.Cachex.Actions.Update',
                        'Elixir.Cachex.Application','Elixir.Cachex.Disk',
                        'Elixir.Cachex.Errors','Elixir.Cachex.ExecutionError',
                        'Elixir.Cachex.Hook','Elixir.Cachex.Options',
                        'Elixir.Cachex.Policy','Elixir.Cachex.Policy.LRW',
                        'Elixir.Cachex.Query','Elixir.Cachex.Router',
                        'Elixir.Cachex.Services',
                        'Elixir.Cachex.Services.Courier',
                        'Elixir.Cachex.Services.Incubator',
                        'Elixir.Cachex.Services.Informant',
                        'Elixir.Cachex.Services.Janitor',
                        'Elixir.Cachex.Services.Locksmith',
                        'Elixir.Cachex.Services.Locksmith.Queue',
                        'Elixir.Cachex.Services.Overseer',
                        'Elixir.Cachex.Spec','Elixir.Cachex.Spec.Validator',
                        'Elixir.Cachex.Stats','Elixir.Cachex.Warmer']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,eternal,logger,sleeplocks]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Cachex.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,tzdata,
                  [{description,
                       "Tzdata is a parser and library for the tz database.\n"},
                   {vsn,"1.0.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Tzdata','Elixir.Tzdata.App',
                        'Elixir.Tzdata.BasicDataMap',
                        'Elixir.Tzdata.DataBuilder',
                        'Elixir.Tzdata.DataLoader','Elixir.Tzdata.EtsHolder',
                        'Elixir.Tzdata.FarFutureDynamicPeriods',
                        'Elixir.Tzdata.HTTPClient',
                        'Elixir.Tzdata.HTTPClient.Hackney',
                        'Elixir.Tzdata.LeapSecParser','Elixir.Tzdata.Parser',
                        'Elixir.Tzdata.ParserOrganizer',
                        'Elixir.Tzdata.PeriodBuilder',
                        'Elixir.Tzdata.ReleaseReader',
                        'Elixir.Tzdata.ReleaseUpdater',
                        'Elixir.Tzdata.TimeZoneDatabase',
                        'Elixir.Tzdata.Util']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,hackney,logger]},
                   {included_applications,[]},
                   {env,
                       [{autoupdate,enabled},
                        {data_dir,nil},
                        {http_client,'Elixir.Tzdata.HTTPClient.Hackney'}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Tzdata.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,calendar,
                  [{description,
                       "Calendar is a datetime library for Elixir.\n\nTimezone support via its sister package `tzdata`.\n\nSafe parsing and formatting of standard formats (ISO, RFC, etc.), strftime formatting. Interoperability with erlang style\ndatetime tuples. Extendable through protocols.\n"},
                   {vsn,"0.17.6"},
                   {id,[]},
                   {modules,
                       ['Elixir.Calendar.AmbiguousDateTime',
                        'Elixir.Calendar.ContainsDate',
                        'Elixir.Calendar.ContainsDate.Calendar.Date',
                        'Elixir.Calendar.ContainsDate.Calendar.DateTime',
                        'Elixir.Calendar.ContainsDate.Calendar.NaiveDateTime',
                        'Elixir.Calendar.ContainsDate.Date',
                        'Elixir.Calendar.ContainsDate.DateTime',
                        'Elixir.Calendar.ContainsDate.NaiveDateTime',
                        'Elixir.Calendar.ContainsDate.Tuple',
                        'Elixir.Calendar.ContainsDateTime',
                        'Elixir.Calendar.ContainsDateTime.Calendar.DateTime',
                        'Elixir.Calendar.ContainsDateTime.DateTime',
                        'Elixir.Calendar.ContainsNaiveDateTime',
                        'Elixir.Calendar.ContainsNaiveDateTime.Calendar.DateTime',
                        'Elixir.Calendar.ContainsNaiveDateTime.DateTime',
                        'Elixir.Calendar.ContainsNaiveDateTime.NaiveDateTime',
                        'Elixir.Calendar.ContainsNaiveDateTime.Tuple',
                        'Elixir.Calendar.ContainsTime',
                        'Elixir.Calendar.ContainsTime.Calendar.DateTime',
                        'Elixir.Calendar.ContainsTime.Calendar.NaiveDateTime',
                        'Elixir.Calendar.ContainsTime.DateTime',
                        'Elixir.Calendar.ContainsTime.NaiveDateTime',
                        'Elixir.Calendar.ContainsTime.Time',
                        'Elixir.Calendar.ContainsTime.Tuple',
                        'Elixir.Calendar.Date','Elixir.Calendar.Date.Format',
                        'Elixir.Calendar.Date.Parse',
                        'Elixir.Calendar.DateTime',
                        'Elixir.Calendar.DateTime.Format',
                        'Elixir.Calendar.DateTime.Interval',
                        'Elixir.Calendar.DateTime.Parse',
                        'Elixir.Calendar.DateTime.TzPeriod',
                        'Elixir.Calendar.DefaultTranslations',
                        'Elixir.Calendar.NaiveDateTime',
                        'Elixir.Calendar.NaiveDateTime.Format',
                        'Elixir.Calendar.NaiveDateTime.Interval',
                        'Elixir.Calendar.NaiveDateTime.Parse',
                        'Elixir.Calendar.ParseUtil',
                        'Elixir.Calendar.Strftime','Elixir.Calendar.Time',
                        'Elixir.Calendar.Time.Format',
                        'Elixir.Calendar.Time.Parse',
                        'Elixir.Calendar.TimeZoneData']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger,tzdata]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cuid,
                  [{description,"Generate collision-resistant ids, in Elixir"},
                   {vsn,"0.1.0"},
                   {id,[]},
                   {modules,['Elixir.Cuid']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,combine,
                  [{description,
                       "A parser combinator library for Elixir projects."},
                   {vsn,"0.10.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Combine','Elixir.Combine.Helpers',
                        'Elixir.Combine.ParserState',
                        'Elixir.Combine.Parsers.Base',
                        'Elixir.Combine.Parsers.Binary',
                        'Elixir.Combine.Parsers.Text']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,gettext,
                  [{description,
                       "Internationalization and localization through gettext"},
                   {vsn,"0.18.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Gettext','Elixir.Gettext.Application',
                        'Elixir.Gettext.Backend','Elixir.Gettext.Compiler',
                        'Elixir.Gettext.Error','Elixir.Gettext.Extractor',
                        'Elixir.Gettext.ExtractorAgent',
                        'Elixir.Gettext.Fuzzy','Elixir.Gettext.Interpolation',
                        'Elixir.Gettext.Merger',
                        'Elixir.Gettext.MissingBindingsError',
                        'Elixir.Gettext.PO','Elixir.Gettext.PO.Parser',
                        'Elixir.Gettext.PO.PluralTranslation',
                        'Elixir.Gettext.PO.SyntaxError',
                        'Elixir.Gettext.PO.Tokenizer',
                        'Elixir.Gettext.PO.Translation',
                        'Elixir.Gettext.PO.Translations',
                        'Elixir.Gettext.Plural',
                        'Elixir.Gettext.Plural.UnknownLocaleError',
                        'Elixir.Gettext.PluralFormError',
                        'Elixir.Mix.Tasks.Compile.Gettext',
                        'Elixir.Mix.Tasks.Gettext.Extract',
                        'Elixir.Mix.Tasks.Gettext.Merge',gettext_po_parser]},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[{default_locale,<<"en">>}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Gettext.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,timex,
                  [{description,
                       "Timex is a rich, comprehensive Date/Time library for Elixir projects, with full timezone support via the :tzdata package.\nIf you need to manipulate dates, times, datetimes, timestamps, etc., then Timex is for you!\n"},
                   {vsn,"3.6.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Enumerable.Timex.Interval',
                        'Elixir.Inspect.Timex.AmbiguousDateTime',
                        'Elixir.Inspect.Timex.AmbiguousTimezoneInfo',
                        'Elixir.Inspect.Timex.Duration',
                        'Elixir.Inspect.Timex.TimezoneInfo','Elixir.Timex',
                        'Elixir.Timex.AmbiguousDateTime',
                        'Elixir.Timex.AmbiguousTimezoneInfo',
                        'Elixir.Timex.Calendar.Julian',
                        'Elixir.Timex.Comparable',
                        'Elixir.Timex.Comparable.Date',
                        'Elixir.Timex.Comparable.DateTime',
                        'Elixir.Timex.Comparable.Diff',
                        'Elixir.Timex.Comparable.NaiveDateTime',
                        'Elixir.Timex.Comparable.Timex.AmbiguousDateTime',
                        'Elixir.Timex.Comparable.Tuple',
                        'Elixir.Timex.Comparable.Utils',
                        'Elixir.Timex.Constants','Elixir.Timex.Convert',
                        'Elixir.Timex.ConvertError',
                        'Elixir.Timex.DateTime.Helpers',
                        'Elixir.Timex.Duration',
                        'Elixir.Timex.Format.DateTime.Formatter',
                        'Elixir.Timex.Format.DateTime.Formatters.Default',
                        'Elixir.Timex.Format.DateTime.Formatters.Relative',
                        'Elixir.Timex.Format.DateTime.Formatters.Strftime',
                        'Elixir.Timex.Format.Duration.Formatter',
                        'Elixir.Timex.Format.Duration.Formatters.Default',
                        'Elixir.Timex.Format.Duration.Formatters.Humanized',
                        'Elixir.Timex.Format.FormatError',
                        'Elixir.Timex.Gettext','Elixir.Timex.Helpers',
                        'Elixir.Timex.Interval',
                        'Elixir.Timex.Interval.FormatError',
                        'Elixir.Timex.Macros',
                        'Elixir.Timex.Parse.DateTime.Helpers',
                        'Elixir.Timex.Parse.DateTime.Parser',
                        'Elixir.Timex.Parse.DateTime.Parsers',
                        'Elixir.Timex.Parse.DateTime.Parsers.ISO8601Extended',
                        'Elixir.Timex.Parse.DateTime.Tokenizer',
                        'Elixir.Timex.Parse.DateTime.Tokenizers.Default',
                        'Elixir.Timex.Parse.DateTime.Tokenizers.Directive',
                        'Elixir.Timex.Parse.DateTime.Tokenizers.Strftime',
                        'Elixir.Timex.Parse.Duration.Parser',
                        'Elixir.Timex.Parse.Duration.Parsers.ISO8601Parser',
                        'Elixir.Timex.Parse.ParseError',
                        'Elixir.Timex.Parse.Timezones.Posix',
                        'Elixir.Timex.Parse.Timezones.Posix.PosixTimezone',
                        'Elixir.Timex.Parse.ZoneInfo.Parser',
                        'Elixir.Timex.Parse.ZoneInfo.Parser.Header',
                        'Elixir.Timex.Parse.ZoneInfo.Parser.LeapSecond',
                        'Elixir.Timex.Parse.ZoneInfo.Parser.TransitionInfo',
                        'Elixir.Timex.Parse.ZoneInfo.Parser.Zone',
                        'Elixir.Timex.Protocol','Elixir.Timex.Protocol.Any',
                        'Elixir.Timex.Protocol.Date',
                        'Elixir.Timex.Protocol.DateTime',
                        'Elixir.Timex.Protocol.Map',
                        'Elixir.Timex.Protocol.NaiveDateTime',
                        'Elixir.Timex.Protocol.Tuple','Elixir.Timex.Time',
                        'Elixir.Timex.Timezone','Elixir.Timex.Timezone.Local',
                        'Elixir.Timex.Timezone.Utils',
                        'Elixir.Timex.TimezoneInfo','Elixir.Timex.Translator',
                        'Elixir.Timex.Types']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,combine,gettext,logger,tzdata]},
                   {included_applications,[]},
                   {env,[{local_timezone,nil},{default_locale,<<"en">>}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Timex',[]}}]}]}},
     {apply,
         {application,load,
             [{application,date_time_parser,
                  [{description,
                       "Parse a string into `%DateTime{}`, `%NaiveDateTime{}`, `%Time{}`, or `%Date{}`"},
                   {vsn,"0.2.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.DateTimeParser',
                        'Elixir.DateTimeParser.Combinators.Date',
                        'Elixir.DateTimeParser.Combinators.DateTime',
                        'Elixir.DateTimeParser.Combinators.Epoch',
                        'Elixir.DateTimeParser.Combinators.Time',
                        'Elixir.DateTimeParser.Combinators.TimeZone',
                        'Elixir.DateTimeParser.Date',
                        'Elixir.DateTimeParser.DateTime',
                        'Elixir.DateTimeParser.Epoch',
                        'Elixir.DateTimeParser.Formatters',
                        'Elixir.DateTimeParser.Serial',
                        'Elixir.DateTimeParser.Time']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger,timex]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,connection,
                  [{description,
                       "Connection behaviour for connection processes\n"},
                   {vsn,"1.0.4"},
                   {id,[]},
                   {modules,['Elixir.Connection']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,db_connection,
                  [{description,
                       "Database connection behaviour for database transactions and connection pooling\n"},
                   {vsn,"2.2.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.DBConnection','Elixir.DBConnection.App',
                        'Elixir.DBConnection.Backoff',
                        'Elixir.DBConnection.Connection',
                        'Elixir.DBConnection.ConnectionError',
                        'Elixir.DBConnection.ConnectionPool',
                        'Elixir.DBConnection.ConnectionPool.Pool',
                        'Elixir.DBConnection.EncodeError',
                        'Elixir.DBConnection.Holder',
                        'Elixir.DBConnection.LogEntry',
                        'Elixir.DBConnection.Ownership',
                        'Elixir.DBConnection.Ownership.Manager',
                        'Elixir.DBConnection.Ownership.Proxy',
                        'Elixir.DBConnection.OwnershipError',
                        'Elixir.DBConnection.PrepareStream',
                        'Elixir.DBConnection.Query',
                        'Elixir.DBConnection.Stream',
                        'Elixir.DBConnection.Task',
                        'Elixir.DBConnection.TransactionError',
                        'Elixir.DBConnection.Watcher',
                        'Elixir.Enumerable.DBConnection.PrepareStream',
                        'Elixir.Enumerable.DBConnection.Stream']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,connection,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.DBConnection.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,decimal,
                  [{description,"Arbitrary precision decimal arithmetic."},
                   {vsn,"1.8.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Decimal','Elixir.Decimal.Context',
                        'Elixir.Decimal.Error','Elixir.Decimal.Macros',
                        'Elixir.Inspect.Decimal',
                        'Elixir.String.Chars.Decimal']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ecto,
                  [{description,
                       "A toolkit for data mapping and language integrated query for Elixir"},
                   {vsn,"3.4.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.Ecto','Elixir.Ecto.Adapter',
                        'Elixir.Ecto.Adapter.Queryable',
                        'Elixir.Ecto.Adapter.Schema',
                        'Elixir.Ecto.Adapter.Storage',
                        'Elixir.Ecto.Adapter.Transaction',
                        'Elixir.Ecto.Application','Elixir.Ecto.Association',
                        'Elixir.Ecto.Association.BelongsTo',
                        'Elixir.Ecto.Association.Has',
                        'Elixir.Ecto.Association.HasThrough',
                        'Elixir.Ecto.Association.ManyToMany',
                        'Elixir.Ecto.Association.NotLoaded',
                        'Elixir.Ecto.CastError','Elixir.Ecto.ChangeError',
                        'Elixir.Ecto.Changeset',
                        'Elixir.Ecto.Changeset.Relation',
                        'Elixir.Ecto.ConstraintError','Elixir.Ecto.Embedded',
                        'Elixir.Ecto.InvalidChangesetError',
                        'Elixir.Ecto.InvalidURLError','Elixir.Ecto.LogEntry',
                        'Elixir.Ecto.MigrationError','Elixir.Ecto.Multi',
                        'Elixir.Ecto.MultiplePrimaryKeyError',
                        'Elixir.Ecto.MultipleResultsError',
                        'Elixir.Ecto.NoPrimaryKeyFieldError',
                        'Elixir.Ecto.NoPrimaryKeyValueError',
                        'Elixir.Ecto.NoResultsError','Elixir.Ecto.Query',
                        'Elixir.Ecto.Query.API',
                        'Elixir.Ecto.Query.BooleanExpr',
                        'Elixir.Ecto.Query.Builder',
                        'Elixir.Ecto.Query.Builder.CTE',
                        'Elixir.Ecto.Query.Builder.Combination',
                        'Elixir.Ecto.Query.Builder.Distinct',
                        'Elixir.Ecto.Query.Builder.Dynamic',
                        'Elixir.Ecto.Query.Builder.Filter',
                        'Elixir.Ecto.Query.Builder.From',
                        'Elixir.Ecto.Query.Builder.GroupBy',
                        'Elixir.Ecto.Query.Builder.Join',
                        'Elixir.Ecto.Query.Builder.LimitOffset',
                        'Elixir.Ecto.Query.Builder.Lock',
                        'Elixir.Ecto.Query.Builder.OrderBy',
                        'Elixir.Ecto.Query.Builder.Preload',
                        'Elixir.Ecto.Query.Builder.Select',
                        'Elixir.Ecto.Query.Builder.Update',
                        'Elixir.Ecto.Query.Builder.Windows',
                        'Elixir.Ecto.Query.CastError',
                        'Elixir.Ecto.Query.CompileError',
                        'Elixir.Ecto.Query.DynamicExpr',
                        'Elixir.Ecto.Query.FromExpr',
                        'Elixir.Ecto.Query.JoinExpr',
                        'Elixir.Ecto.Query.Planner',
                        'Elixir.Ecto.Query.QueryExpr',
                        'Elixir.Ecto.Query.SelectExpr',
                        'Elixir.Ecto.Query.Tagged',
                        'Elixir.Ecto.Query.WindowAPI',
                        'Elixir.Ecto.Query.WithExpr','Elixir.Ecto.QueryError',
                        'Elixir.Ecto.Queryable','Elixir.Ecto.Queryable.Atom',
                        'Elixir.Ecto.Queryable.BitString',
                        'Elixir.Ecto.Queryable.Ecto.Query',
                        'Elixir.Ecto.Queryable.Ecto.SubQuery',
                        'Elixir.Ecto.Queryable.Tuple','Elixir.Ecto.Repo',
                        'Elixir.Ecto.Repo.Assoc','Elixir.Ecto.Repo.Preloader',
                        'Elixir.Ecto.Repo.Queryable',
                        'Elixir.Ecto.Repo.Registry','Elixir.Ecto.Repo.Schema',
                        'Elixir.Ecto.Repo.Supervisor',
                        'Elixir.Ecto.Repo.Transaction','Elixir.Ecto.Schema',
                        'Elixir.Ecto.Schema.Loader',
                        'Elixir.Ecto.Schema.Metadata',
                        'Elixir.Ecto.StaleEntryError','Elixir.Ecto.SubQuery',
                        'Elixir.Ecto.SubQueryError','Elixir.Ecto.Type',
                        'Elixir.Ecto.UUID',
                        'Elixir.Inspect.Ecto.Association.NotLoaded',
                        'Elixir.Inspect.Ecto.Changeset',
                        'Elixir.Inspect.Ecto.Query',
                        'Elixir.Inspect.Ecto.Query.DynamicExpr',
                        'Elixir.Inspect.Ecto.Schema.Metadata',
                        'Elixir.Jason.Encoder.Ecto.Association.NotLoaded',
                        'Elixir.Jason.Encoder.Ecto.Schema.Metadata',
                        'Elixir.Mix.Ecto','Elixir.Mix.Tasks.Ecto',
                        'Elixir.Mix.Tasks.Ecto.Create',
                        'Elixir.Mix.Tasks.Ecto.Drop',
                        'Elixir.Mix.Tasks.Ecto.Gen.Repo']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,crypto,decimal,eex,logger,
                        telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Ecto.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,ecto_sql,
                  [{description,
                       "SQL-based adapters for Ecto and database migrations"},
                   {vsn,"3.4.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.Collectable.Ecto.Adapters.SQL.Stream',
                        'Elixir.Ecto.Adapter.Migration',
                        'Elixir.Ecto.Adapter.Structure',
                        'Elixir.Ecto.Adapters.MySQL',
                        'Elixir.Ecto.Adapters.MyXQL',
                        'Elixir.Ecto.Adapters.MyXQL.Connection',
                        'Elixir.Ecto.Adapters.Postgres',
                        'Elixir.Ecto.Adapters.Postgres.Connection',
                        'Elixir.Ecto.Adapters.SQL',
                        'Elixir.Ecto.Adapters.SQL.Application',
                        'Elixir.Ecto.Adapters.SQL.Connection',
                        'Elixir.Ecto.Adapters.SQL.Sandbox',
                        'Elixir.Ecto.Adapters.SQL.Sandbox.Connection',
                        'Elixir.Ecto.Adapters.SQL.Stream',
                        'Elixir.Ecto.Adapters.Tds','Elixir.Ecto.Migration',
                        'Elixir.Ecto.Migration.Command',
                        'Elixir.Ecto.Migration.Constraint',
                        'Elixir.Ecto.Migration.Index',
                        'Elixir.Ecto.Migration.Reference',
                        'Elixir.Ecto.Migration.Runner',
                        'Elixir.Ecto.Migration.SchemaMigration',
                        'Elixir.Ecto.Migration.Table','Elixir.Ecto.Migrator',
                        'Elixir.Enumerable.Ecto.Adapters.SQL.Stream',
                        'Elixir.Mix.EctoSQL','Elixir.Mix.Tasks.Ecto.Dump',
                        'Elixir.Mix.Tasks.Ecto.Gen.Migration',
                        'Elixir.Mix.Tasks.Ecto.Load',
                        'Elixir.Mix.Tasks.Ecto.Migrate',
                        'Elixir.Mix.Tasks.Ecto.Migrations',
                        'Elixir.Mix.Tasks.Ecto.Rollback']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,db_connection,ecto,eex,logger,
                        telemetry]},
                   {included_applications,[]},
                   {env,[{postgres_map_type,<<"jsonb">>}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Ecto.Adapters.SQL.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,endon,
                  [{description,
                       "Ecto query helpers, inspired by ActiveRecord"},
                   {vsn,"1.0.0"},
                   {id,[]},
                   {modules,['Elixir.Endon','Elixir.Endon.Helpers']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,ecto,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,earmark_parser,
                  [{description,
                       "Earmark AST the parser and AST Generator for \nDave Thomas' Earmark.\n\nThe parser generates\nan Abstract Syntax Tree from Markdown.\n\nThe original Earmark will still provide the HTML Transformation and\nthe CLI, however its Scanner, Parser and AST Renderer have been\nextracted into this library.\n"},
                   {vsn,"1.4.10"},
                   {id,[]},
                   {modules,
                       ['Elixir.EarmarkParser',
                        'Elixir.EarmarkParser.Ast.Emitter',
                        'Elixir.EarmarkParser.Ast.Inline',
                        'Elixir.EarmarkParser.Ast.Renderer.AstWalker',
                        'Elixir.EarmarkParser.Ast.Renderer.FootnoteListRenderer',
                        'Elixir.EarmarkParser.Ast.Renderer.HtmlRenderer',
                        'Elixir.EarmarkParser.Ast.Renderer.TableRenderer',
                        'Elixir.EarmarkParser.AstRenderer',
                        'Elixir.EarmarkParser.Block',
                        'Elixir.EarmarkParser.Block.BlockQuote',
                        'Elixir.EarmarkParser.Block.Code',
                        'Elixir.EarmarkParser.Block.FnDef',
                        'Elixir.EarmarkParser.Block.FnList',
                        'Elixir.EarmarkParser.Block.Heading',
                        'Elixir.EarmarkParser.Block.Html',
                        'Elixir.EarmarkParser.Block.HtmlComment',
                        'Elixir.EarmarkParser.Block.HtmlOneline',
                        'Elixir.EarmarkParser.Block.Ial',
                        'Elixir.EarmarkParser.Block.IdDef',
                        'Elixir.EarmarkParser.Block.List',
                        'Elixir.EarmarkParser.Block.ListItem',
                        'Elixir.EarmarkParser.Block.Para',
                        'Elixir.EarmarkParser.Block.Ruler',
                        'Elixir.EarmarkParser.Block.Table',
                        'Elixir.EarmarkParser.Block.Text',
                        'Elixir.EarmarkParser.Context',
                        'Elixir.EarmarkParser.Error',
                        'Elixir.EarmarkParser.Helpers',
                        'Elixir.EarmarkParser.Helpers.AstHelpers',
                        'Elixir.EarmarkParser.Helpers.AttrParser',
                        'Elixir.EarmarkParser.Helpers.HtmlHelpers',
                        'Elixir.EarmarkParser.Helpers.HtmlParser',
                        'Elixir.EarmarkParser.Helpers.LeexHelpers',
                        'Elixir.EarmarkParser.Helpers.LineHelpers',
                        'Elixir.EarmarkParser.Helpers.LinkParser',
                        'Elixir.EarmarkParser.Helpers.LookaheadHelpers',
                        'Elixir.EarmarkParser.Helpers.PureLinkHelpers',
                        'Elixir.EarmarkParser.Helpers.ReparseHelpers',
                        'Elixir.EarmarkParser.Helpers.StringHelpers',
                        'Elixir.EarmarkParser.Helpers.YeccHelpers',
                        'Elixir.EarmarkParser.Line',
                        'Elixir.EarmarkParser.Line.Blank',
                        'Elixir.EarmarkParser.Line.BlockQuote',
                        'Elixir.EarmarkParser.Line.Fence',
                        'Elixir.EarmarkParser.Line.FnDef',
                        'Elixir.EarmarkParser.Line.Heading',
                        'Elixir.EarmarkParser.Line.HtmlCloseTag',
                        'Elixir.EarmarkParser.Line.HtmlComment',
                        'Elixir.EarmarkParser.Line.HtmlOneLine',
                        'Elixir.EarmarkParser.Line.HtmlOpenTag',
                        'Elixir.EarmarkParser.Line.Ial',
                        'Elixir.EarmarkParser.Line.IdDef',
                        'Elixir.EarmarkParser.Line.Indent',
                        'Elixir.EarmarkParser.Line.ListItem',
                        'Elixir.EarmarkParser.Line.Ruler',
                        'Elixir.EarmarkParser.Line.SetextUnderlineHeading',
                        'Elixir.EarmarkParser.Line.TableLine',
                        'Elixir.EarmarkParser.Line.Text',
                        'Elixir.EarmarkParser.LineScanner',
                        'Elixir.EarmarkParser.Message',
                        'Elixir.EarmarkParser.Options',
                        'Elixir.EarmarkParser.Parser',
                        'Elixir.EarmarkParser.Parser.ListInfo',
                        'Elixir.EarmarkParser.Parser.ListParser',
                        'Elixir.EarmarkParser.Parser.ListParser.Ctxt',
                        'Elixir.EarmarkParser.Types',link_text_lexer,
                        link_text_parser,string_lexer]},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,makeup,
                  [{description,
                       "Syntax highlighter for source code in the style of Pygments.\n"},
                   {vsn,"1.0.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Makeup','Elixir.Makeup.Application',
                        'Elixir.Makeup.Formatter',
                        'Elixir.Makeup.Formatters.HTML.HTMLFormatter',
                        'Elixir.Makeup.Lexer',
                        'Elixir.Makeup.Lexer.Combinators',
                        'Elixir.Makeup.Lexer.Groups',
                        'Elixir.Makeup.Lexer.Postprocess',
                        'Elixir.Makeup.Lexer.Types','Elixir.Makeup.Registry',
                        'Elixir.Makeup.Styles.HTML',
                        'Elixir.Makeup.Styles.HTML.AbapStyle',
                        'Elixir.Makeup.Styles.HTML.AlgolStyle',
                        'Elixir.Makeup.Styles.HTML.Algol_NuStyle',
                        'Elixir.Makeup.Styles.HTML.ArduinoStyle',
                        'Elixir.Makeup.Styles.HTML.AutumnStyle',
                        'Elixir.Makeup.Styles.HTML.BlackWhiteStyle',
                        'Elixir.Makeup.Styles.HTML.BorlandStyle',
                        'Elixir.Makeup.Styles.HTML.ColorfulStyle',
                        'Elixir.Makeup.Styles.HTML.DefaultStyle',
                        'Elixir.Makeup.Styles.HTML.EmacsStyle',
                        'Elixir.Makeup.Styles.HTML.FriendlyStyle',
                        'Elixir.Makeup.Styles.HTML.FruityStyle',
                        'Elixir.Makeup.Styles.HTML.IgorStyle',
                        'Elixir.Makeup.Styles.HTML.LovelaceStyle',
                        'Elixir.Makeup.Styles.HTML.ManniStyle',
                        'Elixir.Makeup.Styles.HTML.MonokaiStyle',
                        'Elixir.Makeup.Styles.HTML.MurphyStyle',
                        'Elixir.Makeup.Styles.HTML.NativeStyle',
                        'Elixir.Makeup.Styles.HTML.ParaisoDarkStyle',
                        'Elixir.Makeup.Styles.HTML.ParaisoLightStyle',
                        'Elixir.Makeup.Styles.HTML.PastieStyle',
                        'Elixir.Makeup.Styles.HTML.PerldocStyle',
                        'Elixir.Makeup.Styles.HTML.RainbowDashStyle',
                        'Elixir.Makeup.Styles.HTML.RrtStyle',
                        'Elixir.Makeup.Styles.HTML.SambaStyle',
                        'Elixir.Makeup.Styles.HTML.Style',
                        'Elixir.Makeup.Styles.HTML.StyleMap',
                        'Elixir.Makeup.Styles.HTML.TangoStyle',
                        'Elixir.Makeup.Styles.HTML.TokenStyle',
                        'Elixir.Makeup.Styles.HTML.TracStyle',
                        'Elixir.Makeup.Styles.HTML.VimStyle',
                        'Elixir.Makeup.Styles.HTML.VisualStudioStyle',
                        'Elixir.Makeup.Styles.HTML.XcodeStyle',
                        'Elixir.Makeup.Token.Utils',
                        'Elixir.Makeup.Token.Utils.Hierarchy']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,eex,nimble_parsec]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Makeup.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,makeup_elixir,
                  [{description,
                       "Elixir lexer for the Makeup syntax highlighter.\n"},
                   {vsn,"0.14.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Makeup.Lexers.ElixirLexer',
                        'Elixir.Makeup.Lexers.ElixirLexer.Application',
                        'Elixir.Makeup.Lexers.ElixirLexer.Helper',
                        'Elixir.Makeup.Lexers.ElixirLexer.Testing']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,makeup]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,
                       {'Elixir.Makeup.Lexers.ElixirLexer.Application',
                           []}}]}]}},
     {apply,
         {application,load,
             [{application,ex_doc,
                  [{description,
                       "ExDoc is a documentation generation tool for Elixir"},
                   {vsn,"0.22.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.ExDoc','Elixir.ExDoc.Application',
                        'Elixir.ExDoc.Autolink','Elixir.ExDoc.CLI',
                        'Elixir.ExDoc.Config','Elixir.ExDoc.Formatter.EPUB',
                        'Elixir.ExDoc.Formatter.EPUB.Assets',
                        'Elixir.ExDoc.Formatter.EPUB.Templates',
                        'Elixir.ExDoc.Formatter.HTML',
                        'Elixir.ExDoc.Formatter.HTML.Assets',
                        'Elixir.ExDoc.Formatter.HTML.SearchItems',
                        'Elixir.ExDoc.Formatter.HTML.Templates',
                        'Elixir.ExDoc.FunctionNode',
                        'Elixir.ExDoc.GroupMatcher',
                        'Elixir.ExDoc.Highlighter','Elixir.ExDoc.Markdown',
                        'Elixir.ExDoc.Markdown.Earmark',
                        'Elixir.ExDoc.ModuleNode','Elixir.ExDoc.Refs',
                        'Elixir.ExDoc.Retriever',
                        'Elixir.ExDoc.Retriever.Error',
                        'Elixir.ExDoc.TypeNode','Elixir.ExDoc.Utils.Code',
                        'Elixir.ExDoc.Utils.SimpleJSON',
                        'Elixir.Mix.Tasks.Docs']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,crypto,earmark_parser,eex,
                        makeup_elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.ExDoc.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,jason,
                  [{description,
                       "A blazing fast JSON parser and generator in pure Elixir.\n"},
                   {vsn,"1.2.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Jason','Elixir.Jason.Codegen',
                        'Elixir.Jason.DecodeError','Elixir.Jason.Decoder',
                        'Elixir.Jason.Decoder.Unescape','Elixir.Jason.Encode',
                        'Elixir.Jason.EncodeError','Elixir.Jason.Encoder',
                        'Elixir.Jason.Encoder.Any',
                        'Elixir.Jason.Encoder.Atom',
                        'Elixir.Jason.Encoder.BitString',
                        'Elixir.Jason.Encoder.Date',
                        'Elixir.Jason.Encoder.DateTime',
                        'Elixir.Jason.Encoder.Decimal',
                        'Elixir.Jason.Encoder.Float',
                        'Elixir.Jason.Encoder.Integer',
                        'Elixir.Jason.Encoder.Jason.Fragment',
                        'Elixir.Jason.Encoder.List',
                        'Elixir.Jason.Encoder.Map',
                        'Elixir.Jason.Encoder.NaiveDateTime',
                        'Elixir.Jason.Encoder.Time','Elixir.Jason.Formatter',
                        'Elixir.Jason.Fragment','Elixir.Jason.Helpers']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,myxql,
                  [{description,"MySQL 5.5+ driver for Elixir"},
                   {vsn,"0.4.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.DBConnection.Query.MyXQL.Query',
                        'Elixir.DBConnection.Query.MyXQL.TextQuery',
                        'Elixir.MyXQL','Elixir.MyXQL.Client',
                        'Elixir.MyXQL.Client.Config',
                        'Elixir.MyXQL.Connection','Elixir.MyXQL.Cursor',
                        'Elixir.MyXQL.Error','Elixir.MyXQL.Protocol',
                        'Elixir.MyXQL.Protocol.Auth',
                        'Elixir.MyXQL.Protocol.Flags',
                        'Elixir.MyXQL.Protocol.Records',
                        'Elixir.MyXQL.Protocol.ServerErrorCodes',
                        'Elixir.MyXQL.Protocol.Types',
                        'Elixir.MyXQL.Protocol.Values','Elixir.MyXQL.Query',
                        'Elixir.MyXQL.Result','Elixir.MyXQL.TextQuery',
                        'Elixir.String.Chars.MyXQL.Query',
                        'Elixir.String.Chars.MyXQL.TextQuery']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,db_connection,decimal,public_key,
                        ssl]},
                   {included_applications,[]},
                   {env,[{json_library,'Elixir.Jason'}]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_pubsub,
                  [{description,"Distributed PubSub and Presence platform"},
                   {vsn,"2.0.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.PubSub',
                        'Elixir.Phoenix.PubSub.Adapter',
                        'Elixir.Phoenix.PubSub.Application',
                        'Elixir.Phoenix.PubSub.BroadcastError',
                        'Elixir.Phoenix.PubSub.PG2',
                        'Elixir.Phoenix.PubSub.Supervisor',
                        'Elixir.Phoenix.Tracker',
                        'Elixir.Phoenix.Tracker.Clock',
                        'Elixir.Phoenix.Tracker.DeltaGeneration',
                        'Elixir.Phoenix.Tracker.Replica',
                        'Elixir.Phoenix.Tracker.Shard',
                        'Elixir.Phoenix.Tracker.State']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crypto,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.PubSub.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix,
                  [{description,
                       "Productive. Reliable. Fast. A productive web framework that\ndoes not compromise speed or maintainability.\n"},
                   {vsn,"1.5.4"},
                   {id,[]},
                   {modules,
                       ['Elixir.Mix.Phoenix','Elixir.Mix.Phoenix.Context',
                        'Elixir.Mix.Phoenix.Schema',
                        'Elixir.Mix.Tasks.Compile.Phoenix',
                        'Elixir.Mix.Tasks.Phx','Elixir.Mix.Tasks.Phx.Digest',
                        'Elixir.Mix.Tasks.Phx.Digest.Clean',
                        'Elixir.Mix.Tasks.Phx.Gen.Cert',
                        'Elixir.Mix.Tasks.Phx.Gen.Channel',
                        'Elixir.Mix.Tasks.Phx.Gen.Context',
                        'Elixir.Mix.Tasks.Phx.Gen.Embedded',
                        'Elixir.Mix.Tasks.Phx.Gen.Html',
                        'Elixir.Mix.Tasks.Phx.Gen.Json',
                        'Elixir.Mix.Tasks.Phx.Gen.Live',
                        'Elixir.Mix.Tasks.Phx.Gen.Presence',
                        'Elixir.Mix.Tasks.Phx.Gen.Schema',
                        'Elixir.Mix.Tasks.Phx.Gen.Secret',
                        'Elixir.Mix.Tasks.Phx.Routes',
                        'Elixir.Mix.Tasks.Phx.Server','Elixir.Phoenix',
                        'Elixir.Phoenix.ActionClauseError',
                        'Elixir.Phoenix.Channel',
                        'Elixir.Phoenix.Channel.Server',
                        'Elixir.Phoenix.ChannelTest',
                        'Elixir.Phoenix.ChannelTest.NoopSerializer',
                        'Elixir.Phoenix.CodeReloader',
                        'Elixir.Phoenix.CodeReloader.Proxy',
                        'Elixir.Phoenix.CodeReloader.Server',
                        'Elixir.Phoenix.Config','Elixir.Phoenix.ConnTest',
                        'Elixir.Phoenix.Controller',
                        'Elixir.Phoenix.Controller.Pipeline',
                        'Elixir.Phoenix.Digester','Elixir.Phoenix.Endpoint',
                        'Elixir.Phoenix.Endpoint.Cowboy2Adapter',
                        'Elixir.Phoenix.Endpoint.Cowboy2Handler',
                        'Elixir.Phoenix.Endpoint.CowboyAdapter',
                        'Elixir.Phoenix.Endpoint.CowboyWebSocket',
                        'Elixir.Phoenix.Endpoint.RenderErrors',
                        'Elixir.Phoenix.Endpoint.Supervisor',
                        'Elixir.Phoenix.Endpoint.Watcher',
                        'Elixir.Phoenix.Logger',
                        'Elixir.Phoenix.MissingParamError',
                        'Elixir.Phoenix.Naming',
                        'Elixir.Phoenix.NotAcceptableError',
                        'Elixir.Phoenix.Param','Elixir.Phoenix.Param.Any',
                        'Elixir.Phoenix.Param.Atom',
                        'Elixir.Phoenix.Param.BitString',
                        'Elixir.Phoenix.Param.Integer',
                        'Elixir.Phoenix.Param.Map','Elixir.Phoenix.Presence',
                        'Elixir.Phoenix.Presence.Tracker',
                        'Elixir.Phoenix.Router',
                        'Elixir.Phoenix.Router.ConsoleFormatter',
                        'Elixir.Phoenix.Router.Helpers',
                        'Elixir.Phoenix.Router.MalformedURIError',
                        'Elixir.Phoenix.Router.NoRouteError',
                        'Elixir.Phoenix.Router.Resource',
                        'Elixir.Phoenix.Router.Route',
                        'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
                        'Elixir.Phoenix.Socket.Broadcast',
                        'Elixir.Phoenix.Socket.InvalidMessageError',
                        'Elixir.Phoenix.Socket.Message',
                        'Elixir.Phoenix.Socket.PoolSupervisor',
                        'Elixir.Phoenix.Socket.Reply',
                        'Elixir.Phoenix.Socket.Serializer',
                        'Elixir.Phoenix.Socket.Transport',
                        'Elixir.Phoenix.Socket.V1.JSONSerializer',
                        'Elixir.Phoenix.Socket.V2.JSONSerializer',
                        'Elixir.Phoenix.Template',
                        'Elixir.Phoenix.Template.EExEngine',
                        'Elixir.Phoenix.Template.Engine',
                        'Elixir.Phoenix.Template.ExsEngine',
                        'Elixir.Phoenix.Template.UndefinedError',
                        'Elixir.Phoenix.Token',
                        'Elixir.Phoenix.Transports.LongPoll',
                        'Elixir.Phoenix.Transports.LongPoll.Server',
                        'Elixir.Phoenix.Transports.WebSocket',
                        'Elixir.Phoenix.View',
                        'Elixir.Plug.Exception.Phoenix.ActionClauseError']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,crypto,eex,logger,phoenix_pubsub,
                        plug,plug_crypto,public_key,telemetry]},
                   {included_applications,[]},
                   {env,
                       [{logger,true},
                        {stacktrace_depth,nil},
                        {template_engines,[]},
                        {format_encoders,[]},
                        {filter_parameters,[<<"password">>]},
                        {serve_endpoints,false},
                        {gzippable_exts,
                            [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,
                             <<".html">>,<<".json">>,<<".svg">>,<<".eot">>,
                             <<".ttf">>]},
                        {trim_on_html_eex_engine,true}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_ecto,
                  [{description,"Integration between Phoenix & Ecto"},
                   {vsn,"4.1.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.Ecto',
                        'Elixir.Phoenix.Ecto.CheckRepoStatus',
                        'Elixir.Phoenix.Ecto.PendingMigrationError',
                        'Elixir.Phoenix.Ecto.SQL.Sandbox',
                        'Elixir.Phoenix.Ecto.SQL.SandboxSession',
                        'Elixir.Phoenix.Ecto.StorageNotCreatedError',
                        'Elixir.Phoenix.HTML.FormData.Ecto.Changeset',
                        'Elixir.Phoenix.HTML.Safe.Decimal',
                        'Elixir.Plug.Exception.Ecto.CastError',
                        'Elixir.Plug.Exception.Ecto.InvalidChangesetError',
                        'Elixir.Plug.Exception.Ecto.NoResultsError',
                        'Elixir.Plug.Exception.Ecto.Query.CastError',
                        'Elixir.Plug.Exception.Ecto.StaleEntryError',
                        'Elixir.Plug.Exception.Ecto.SubQueryError',
                        'Elixir.Plug.Exception.Phoenix.Ecto.PendingMigrationError',
                        'Elixir.Plug.Exception.Phoenix.Ecto.StorageNotCreatedError']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,ecto,logger,plug]},
                   {included_applications,[]},
                   {env,[{exclude_ecto_exceptions_from_plug,[]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.Ecto',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_html,
                  [{description,
                       "Phoenix view functions for working with HTML templates"},
                   {vsn,"2.14.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.HTML','Elixir.Phoenix.HTML.Engine',
                        'Elixir.Phoenix.HTML.Form',
                        'Elixir.Phoenix.HTML.FormData',
                        'Elixir.Phoenix.HTML.FormData.Atom',
                        'Elixir.Phoenix.HTML.FormData.Plug.Conn',
                        'Elixir.Phoenix.HTML.Format',
                        'Elixir.Phoenix.HTML.Link','Elixir.Phoenix.HTML.Safe',
                        'Elixir.Phoenix.HTML.Safe.Atom',
                        'Elixir.Phoenix.HTML.Safe.BitString',
                        'Elixir.Phoenix.HTML.Safe.Date',
                        'Elixir.Phoenix.HTML.Safe.DateTime',
                        'Elixir.Phoenix.HTML.Safe.Float',
                        'Elixir.Phoenix.HTML.Safe.Integer',
                        'Elixir.Phoenix.HTML.Safe.List',
                        'Elixir.Phoenix.HTML.Safe.NaiveDateTime',
                        'Elixir.Phoenix.HTML.Safe.Phoenix.HTML.Form',
                        'Elixir.Phoenix.HTML.Safe.Time',
                        'Elixir.Phoenix.HTML.Safe.Tuple',
                        'Elixir.Phoenix.HTML.Tag']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,eex,logger,plug]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_live_view,
                  [{description,
                       "Rich, real-time user experiences with server-rendered HTML\n"},
                   {vsn,"0.14.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Inspect.Phoenix.LiveView.Socket',
                        'Elixir.Inspect.Phoenix.LiveView.Socket.AssignsNotInSocket',
                        'Elixir.Inspect.Phoenix.LiveViewTest.Element',
                        'Elixir.Inspect.Phoenix.LiveViewTest.View',
                        'Elixir.Phoenix.HTML.Safe.Phoenix.LiveComponent.CID',
                        'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Component',
                        'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Comprehension',
                        'Elixir.Phoenix.HTML.Safe.Phoenix.LiveView.Rendered',
                        'Elixir.Phoenix.LiveComponent',
                        'Elixir.Phoenix.LiveComponent.CID',
                        'Elixir.Phoenix.LiveView',
                        'Elixir.Phoenix.LiveView.Application',
                        'Elixir.Phoenix.LiveView.Channel',
                        'Elixir.Phoenix.LiveView.Component',
                        'Elixir.Phoenix.LiveView.Comprehension',
                        'Elixir.Phoenix.LiveView.Controller',
                        'Elixir.Phoenix.LiveView.Diff',
                        'Elixir.Phoenix.LiveView.Engine',
                        'Elixir.Phoenix.LiveView.Helpers',
                        'Elixir.Phoenix.LiveView.Plug',
                        'Elixir.Phoenix.LiveView.Rendered',
                        'Elixir.Phoenix.LiveView.Renderer',
                        'Elixir.Phoenix.LiveView.Router',
                        'Elixir.Phoenix.LiveView.Socket',
                        'Elixir.Phoenix.LiveView.Socket.AssignsNotInSocket',
                        'Elixir.Phoenix.LiveView.Static',
                        'Elixir.Phoenix.LiveView.Utils',
                        'Elixir.Phoenix.LiveViewTest',
                        'Elixir.Phoenix.LiveViewTest.ClientProxy',
                        'Elixir.Phoenix.LiveViewTest.DOM',
                        'Elixir.Phoenix.LiveViewTest.Element',
                        'Elixir.Phoenix.LiveViewTest.View',
                        'Elixir.String.Chars.Phoenix.LiveComponent.CID']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,logger,phoenix,phoenix_html,
                        telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.LiveView.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,telemetry_metrics,
                  [{description,
                       "Provides a common interface for defining metrics based on Telemetry events.\n"},
                   {vsn,"0.5.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Telemetry.Metrics',
                        'Elixir.Telemetry.Metrics.ConsoleReporter',
                        'Elixir.Telemetry.Metrics.Counter',
                        'Elixir.Telemetry.Metrics.Distribution',
                        'Elixir.Telemetry.Metrics.LastValue',
                        'Elixir.Telemetry.Metrics.Sum',
                        'Elixir.Telemetry.Metrics.Summary']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_live_dashboard,
                  [{description,"Real-time performance dashboard for Phoenix"},
                   {vsn,"0.2.7"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.LiveDashboard',
                        'Elixir.Phoenix.LiveDashboard.AppInfoComponent',
                        'Elixir.Phoenix.LiveDashboard.Application',
                        'Elixir.Phoenix.LiveDashboard.ApplicationsLive',
                        'Elixir.Phoenix.LiveDashboard.CardUsageComponent',
                        'Elixir.Phoenix.LiveDashboard.ChartComponent',
                        'Elixir.Phoenix.LiveDashboard.ColorBarComponent',
                        'Elixir.Phoenix.LiveDashboard.ColorBarLegendComponent',
                        'Elixir.Phoenix.LiveDashboard.EtsInfoComponent',
                        'Elixir.Phoenix.LiveDashboard.EtsLive',
                        'Elixir.Phoenix.LiveDashboard.HomeLive',
                        'Elixir.Phoenix.LiveDashboard.LayoutView',
                        'Elixir.Phoenix.LiveDashboard.LiveHelpers',
                        'Elixir.Phoenix.LiveDashboard.LoggerPubSubBackend',
                        'Elixir.Phoenix.LiveDashboard.MenuLive',
                        'Elixir.Phoenix.LiveDashboard.MetricsLive',
                        'Elixir.Phoenix.LiveDashboard.ModalComponent',
                        'Elixir.Phoenix.LiveDashboard.OSMonLive',
                        'Elixir.Phoenix.LiveDashboard.PortInfoComponent',
                        'Elixir.Phoenix.LiveDashboard.PortsLive',
                        'Elixir.Phoenix.LiveDashboard.ProcessInfoComponent',
                        'Elixir.Phoenix.LiveDashboard.ProcessesLive',
                        'Elixir.Phoenix.LiveDashboard.ReingoldTilford',
                        'Elixir.Phoenix.LiveDashboard.ReingoldTilford.Line',
                        'Elixir.Phoenix.LiveDashboard.ReingoldTilford.Node',
                        'Elixir.Phoenix.LiveDashboard.RequestLogger',
                        'Elixir.Phoenix.LiveDashboard.RequestLoggerLive',
                        'Elixir.Phoenix.LiveDashboard.Router',
                        'Elixir.Phoenix.LiveDashboard.SocketInfoComponent',
                        'Elixir.Phoenix.LiveDashboard.SocketsLive',
                        'Elixir.Phoenix.LiveDashboard.SystemInfo',
                        'Elixir.Phoenix.LiveDashboard.TableHelpers',
                        'Elixir.Phoenix.LiveDashboard.TelemetryListener',
                        'Elixir.Phoenix.LiveDashboard.TitleBarComponent',
                        'Elixir.Phoenix.LiveDashboard.Web']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,logger,phoenix_html,
                        phoenix_live_view,telemetry_metrics]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.LiveDashboard.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phone,
                  [{description,"Get useful info from telephone numbers.\n"},
                   {vsn,"0.4.11"},
                   {id,[]},
                   {modules,
                       ['Elixir.Helper.Area','Elixir.Helper.Country',
                        'Elixir.Helper.Parser','Elixir.Phone',
                        'Elixir.Phone.AD','Elixir.Phone.AE','Elixir.Phone.AF',
                        'Elixir.Phone.AL','Elixir.Phone.AM','Elixir.Phone.AO',
                        'Elixir.Phone.AR','Elixir.Phone.AT','Elixir.Phone.AU',
                        'Elixir.Phone.AW','Elixir.Phone.AZ','Elixir.Phone.BA',
                        'Elixir.Phone.BD','Elixir.Phone.BE','Elixir.Phone.BG',
                        'Elixir.Phone.BH','Elixir.Phone.BI','Elixir.Phone.BJ',
                        'Elixir.Phone.BN','Elixir.Phone.BO','Elixir.Phone.BR',
                        'Elixir.Phone.BR.AC','Elixir.Phone.BR.AL',
                        'Elixir.Phone.BR.AM','Elixir.Phone.BR.AP',
                        'Elixir.Phone.BR.BA','Elixir.Phone.BR.CE',
                        'Elixir.Phone.BR.DF','Elixir.Phone.BR.ES',
                        'Elixir.Phone.BR.GO','Elixir.Phone.BR.MA',
                        'Elixir.Phone.BR.MG','Elixir.Phone.BR.MS',
                        'Elixir.Phone.BR.MT','Elixir.Phone.BR.PA',
                        'Elixir.Phone.BR.PB','Elixir.Phone.BR.PE',
                        'Elixir.Phone.BR.PI','Elixir.Phone.BR.PR',
                        'Elixir.Phone.BR.RJ','Elixir.Phone.BR.RN',
                        'Elixir.Phone.BR.RO','Elixir.Phone.BR.RR',
                        'Elixir.Phone.BR.RS','Elixir.Phone.BR.SC',
                        'Elixir.Phone.BR.SE','Elixir.Phone.BR.SP',
                        'Elixir.Phone.BR.TO','Elixir.Phone.BR.TollFree',
                        'Elixir.Phone.BT','Elixir.Phone.BW','Elixir.Phone.BY',
                        'Elixir.Phone.BZ','Elixir.Phone.CD','Elixir.Phone.CF',
                        'Elixir.Phone.CG','Elixir.Phone.CH','Elixir.Phone.CI',
                        'Elixir.Phone.CK','Elixir.Phone.CL','Elixir.Phone.CM',
                        'Elixir.Phone.CN','Elixir.Phone.CO','Elixir.Phone.CR',
                        'Elixir.Phone.CU','Elixir.Phone.CV','Elixir.Phone.CW',
                        'Elixir.Phone.CY','Elixir.Phone.CZ',
                        'Elixir.Phone.Countries','Elixir.Phone.DE',
                        'Elixir.Phone.DJ','Elixir.Phone.DK','Elixir.Phone.DZ',
                        'Elixir.Phone.EC','Elixir.Phone.EE','Elixir.Phone.EG',
                        'Elixir.Phone.ER','Elixir.Phone.ES','Elixir.Phone.ET',
                        'Elixir.Phone.FI','Elixir.Phone.FJ','Elixir.Phone.FM',
                        'Elixir.Phone.FO','Elixir.Phone.FR','Elixir.Phone.GA',
                        'Elixir.Phone.GB','Elixir.Phone.GE','Elixir.Phone.GF',
                        'Elixir.Phone.GH','Elixir.Phone.GI','Elixir.Phone.GL',
                        'Elixir.Phone.GM','Elixir.Phone.GN','Elixir.Phone.GQ',
                        'Elixir.Phone.GR','Elixir.Phone.GT','Elixir.Phone.GW',
                        'Elixir.Phone.GY','Elixir.Phone.HK','Elixir.Phone.HN',
                        'Elixir.Phone.HR','Elixir.Phone.HT','Elixir.Phone.HU',
                        'Elixir.Phone.ID','Elixir.Phone.IE','Elixir.Phone.IL',
                        'Elixir.Phone.IN','Elixir.Phone.IO','Elixir.Phone.IQ',
                        'Elixir.Phone.IR','Elixir.Phone.IS','Elixir.Phone.IT',
                        'Elixir.Phone.JO','Elixir.Phone.JP','Elixir.Phone.KE',
                        'Elixir.Phone.KG','Elixir.Phone.KH','Elixir.Phone.KI',
                        'Elixir.Phone.KM','Elixir.Phone.KP','Elixir.Phone.KR',
                        'Elixir.Phone.KW','Elixir.Phone.KZ','Elixir.Phone.LA',
                        'Elixir.Phone.LB','Elixir.Phone.LI','Elixir.Phone.LK',
                        'Elixir.Phone.LR','Elixir.Phone.LS','Elixir.Phone.LT',
                        'Elixir.Phone.LU','Elixir.Phone.LV','Elixir.Phone.LY',
                        'Elixir.Phone.MA','Elixir.Phone.MC','Elixir.Phone.MD',
                        'Elixir.Phone.ME','Elixir.Phone.MG','Elixir.Phone.MH',
                        'Elixir.Phone.MK','Elixir.Phone.ML','Elixir.Phone.MM',
                        'Elixir.Phone.MN','Elixir.Phone.MO','Elixir.Phone.MQ',
                        'Elixir.Phone.MR','Elixir.Phone.MT','Elixir.Phone.MU',
                        'Elixir.Phone.MV','Elixir.Phone.MW','Elixir.Phone.MX',
                        'Elixir.Phone.MY','Elixir.Phone.MZ','Elixir.Phone.NA',
                        'Elixir.Phone.NANP','Elixir.Phone.NANP.AG',
                        'Elixir.Phone.NANP.AI','Elixir.Phone.NANP.AS',
                        'Elixir.Phone.NANP.BB','Elixir.Phone.NANP.BM',
                        'Elixir.Phone.NANP.BS','Elixir.Phone.NANP.CA',
                        'Elixir.Phone.NANP.CA.AB','Elixir.Phone.NANP.CA.BC',
                        'Elixir.Phone.NANP.CA.MB','Elixir.Phone.NANP.CA.NB',
                        'Elixir.Phone.NANP.CA.NL',
                        'Elixir.Phone.NANP.CA.NSAndPE',
                        'Elixir.Phone.NANP.CA.ON','Elixir.Phone.NANP.CA.QC',
                        'Elixir.Phone.NANP.CA.SK',
                        'Elixir.Phone.NANP.CA.Territory',
                        'Elixir.Phone.NANP.DM','Elixir.Phone.NANP.DO',
                        'Elixir.Phone.NANP.GD','Elixir.Phone.NANP.GU',
                        'Elixir.Phone.NANP.JM','Elixir.Phone.NANP.KN',
                        'Elixir.Phone.NANP.KY','Elixir.Phone.NANP.LC',
                        'Elixir.Phone.NANP.MP','Elixir.Phone.NANP.MS',
                        'Elixir.Phone.NANP.PR','Elixir.Phone.NANP.SX',
                        'Elixir.Phone.NANP.TC','Elixir.Phone.NANP.TT',
                        'Elixir.Phone.NANP.TollFree','Elixir.Phone.NANP.US',
                        'Elixir.Phone.NANP.US.AK','Elixir.Phone.NANP.US.AL',
                        'Elixir.Phone.NANP.US.AR','Elixir.Phone.NANP.US.AZ',
                        'Elixir.Phone.NANP.US.CA','Elixir.Phone.NANP.US.CO',
                        'Elixir.Phone.NANP.US.CT','Elixir.Phone.NANP.US.DC',
                        'Elixir.Phone.NANP.US.DE','Elixir.Phone.NANP.US.FL',
                        'Elixir.Phone.NANP.US.GA','Elixir.Phone.NANP.US.HI',
                        'Elixir.Phone.NANP.US.IA','Elixir.Phone.NANP.US.ID',
                        'Elixir.Phone.NANP.US.IL','Elixir.Phone.NANP.US.IN',
                        'Elixir.Phone.NANP.US.KS','Elixir.Phone.NANP.US.KY',
                        'Elixir.Phone.NANP.US.LA','Elixir.Phone.NANP.US.MA',
                        'Elixir.Phone.NANP.US.MD','Elixir.Phone.NANP.US.ME',
                        'Elixir.Phone.NANP.US.MI','Elixir.Phone.NANP.US.MN',
                        'Elixir.Phone.NANP.US.MO','Elixir.Phone.NANP.US.MS',
                        'Elixir.Phone.NANP.US.MT','Elixir.Phone.NANP.US.NC',
                        'Elixir.Phone.NANP.US.ND','Elixir.Phone.NANP.US.NE',
                        'Elixir.Phone.NANP.US.NH','Elixir.Phone.NANP.US.NJ',
                        'Elixir.Phone.NANP.US.NM','Elixir.Phone.NANP.US.NV',
                        'Elixir.Phone.NANP.US.NY','Elixir.Phone.NANP.US.OH',
                        'Elixir.Phone.NANP.US.OK','Elixir.Phone.NANP.US.OR',
                        'Elixir.Phone.NANP.US.PA','Elixir.Phone.NANP.US.RI',
                        'Elixir.Phone.NANP.US.SC','Elixir.Phone.NANP.US.SD',
                        'Elixir.Phone.NANP.US.TN','Elixir.Phone.NANP.US.TX',
                        'Elixir.Phone.NANP.US.UT','Elixir.Phone.NANP.US.VA',
                        'Elixir.Phone.NANP.US.VT','Elixir.Phone.NANP.US.WA',
                        'Elixir.Phone.NANP.US.WI','Elixir.Phone.NANP.US.WV',
                        'Elixir.Phone.NANP.US.WY','Elixir.Phone.NANP.VC',
                        'Elixir.Phone.NANP.VG','Elixir.Phone.NANP.VI',
                        'Elixir.Phone.NC','Elixir.Phone.NE','Elixir.Phone.NG',
                        'Elixir.Phone.NI','Elixir.Phone.NL','Elixir.Phone.NO',
                        'Elixir.Phone.NP','Elixir.Phone.NR','Elixir.Phone.NU',
                        'Elixir.Phone.NZ','Elixir.Phone.OM','Elixir.Phone.PA',
                        'Elixir.Phone.PE','Elixir.Phone.PF','Elixir.Phone.PG',
                        'Elixir.Phone.PH','Elixir.Phone.PK','Elixir.Phone.PL',
                        'Elixir.Phone.PM','Elixir.Phone.PS','Elixir.Phone.PT',
                        'Elixir.Phone.PW','Elixir.Phone.PY','Elixir.Phone.QA',
                        'Elixir.Phone.RO','Elixir.Phone.RS','Elixir.Phone.RU',
                        'Elixir.Phone.RW','Elixir.Phone.SA','Elixir.Phone.SB',
                        'Elixir.Phone.SC','Elixir.Phone.SD','Elixir.Phone.SE',
                        'Elixir.Phone.SG','Elixir.Phone.SH','Elixir.Phone.SI',
                        'Elixir.Phone.SK','Elixir.Phone.SL','Elixir.Phone.SM',
                        'Elixir.Phone.SN','Elixir.Phone.SO','Elixir.Phone.SR',
                        'Elixir.Phone.SS','Elixir.Phone.ST','Elixir.Phone.SV',
                        'Elixir.Phone.SY','Elixir.Phone.SZ','Elixir.Phone.TD',
                        'Elixir.Phone.TG','Elixir.Phone.TH','Elixir.Phone.TJ',
                        'Elixir.Phone.TK','Elixir.Phone.TL','Elixir.Phone.TM',
                        'Elixir.Phone.TN','Elixir.Phone.TO','Elixir.Phone.TR',
                        'Elixir.Phone.TV','Elixir.Phone.TW','Elixir.Phone.TZ',
                        'Elixir.Phone.UA','Elixir.Phone.UG','Elixir.Phone.UY',
                        'Elixir.Phone.UZ','Elixir.Phone.VE','Elixir.Phone.VN',
                        'Elixir.Phone.VU','Elixir.Phone.WF','Elixir.Phone.WS',
                        'Elixir.Phone.YE','Elixir.Phone.ZA','Elixir.Phone.ZM',
                        'Elixir.Phone.ZW']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cowlib,
                  [{description,
                       "Support library for manipulating Web protocols."},
                   {vsn,"2.9.1"},
                   {id,[]},
                   {modules,
                       [cow_base64url,cow_cookie,cow_date,cow_hpack,cow_http,
                        cow_http2,cow_http2_machine,cow_http_hd,
                        cow_http_struct_hd,cow_http_te,cow_iolists,cow_link,
                        cow_mimetypes,cow_multipart,cow_qs,cow_spdy,cow_sse,
                        cow_uri,cow_uri_template,cow_ws]},
                   {registered,[]},
                   {applications,[kernel,stdlib,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ranch,
                  [{description,"Socket acceptor pool for TCP protocols."},
                   {vsn,"1.7.1"},
                   {id,[]},
                   {modules,
                       [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,
                        ranch_conns_sup,ranch_crc32c,ranch_listener_sup,
                        ranch_protocol,ranch_proxy_header,ranch_server,
                        ranch_ssl,ranch_sup,ranch_tcp,ranch_transport]},
                   {registered,[ranch_sup,ranch_server]},
                   {applications,[kernel,stdlib,ssl]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{ranch_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,cowboy,
                  [{description,"Small, fast, modern HTTP server."},
                   {vsn,"2.8.0"},
                   {id,[]},
                   {modules,
                       [cowboy,cowboy_app,cowboy_bstr,cowboy_children,
                        cowboy_clear,cowboy_clock,cowboy_compress_h,
                        cowboy_constraints,cowboy_handler,cowboy_http,
                        cowboy_http2,cowboy_loop,cowboy_metrics_h,
                        cowboy_middleware,cowboy_req,cowboy_rest,
                        cowboy_router,cowboy_static,cowboy_stream,
                        cowboy_stream_h,cowboy_sub_protocol,cowboy_sup,
                        cowboy_tls,cowboy_tracer_h,cowboy_websocket]},
                   {registered,[cowboy_sup,cowboy_clock]},
                   {applications,[kernel,stdlib,cowlib,crypto,ranch]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{cowboy_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,plug_cowboy,
                  [{description,"A Plug adapter for Cowboy"},
                   {vsn,"2.3.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Plug.Cowboy','Elixir.Plug.Cowboy.Conn',
                        'Elixir.Plug.Cowboy.Drainer',
                        'Elixir.Plug.Cowboy.Handler',
                        'Elixir.Plug.Cowboy.Stream',
                        'Elixir.Plug.Cowboy.Translator']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,cowboy,logger,plug,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Cowboy',[]}}]}]}},
     {apply,
         {application,load,
             [{application,postgrex,
                  [{description,"PostgreSQL driver for Elixir"},
                   {vsn,"0.15.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.Collectable.Postgrex.Stream',
                        'Elixir.DBConnection.Query.Postgrex.Copy',
                        'Elixir.DBConnection.Query.Postgrex.Parameters',
                        'Elixir.DBConnection.Query.Postgrex.Query',
                        'Elixir.Enumerable.Postgrex.Stream','Elixir.Postgrex',
                        'Elixir.Postgrex.App',
                        'Elixir.Postgrex.BinaryExtension',
                        'Elixir.Postgrex.BinaryUtils','Elixir.Postgrex.Box',
                        'Elixir.Postgrex.Circle','Elixir.Postgrex.Copy',
                        'Elixir.Postgrex.Cursor',
                        'Elixir.Postgrex.DefaultTypes',
                        'Elixir.Postgrex.Error','Elixir.Postgrex.ErrorCode',
                        'Elixir.Postgrex.Extension',
                        'Elixir.Postgrex.Extensions.Array',
                        'Elixir.Postgrex.Extensions.BitString',
                        'Elixir.Postgrex.Extensions.Bool',
                        'Elixir.Postgrex.Extensions.Box',
                        'Elixir.Postgrex.Extensions.Circle',
                        'Elixir.Postgrex.Extensions.Date',
                        'Elixir.Postgrex.Extensions.Float4',
                        'Elixir.Postgrex.Extensions.Float8',
                        'Elixir.Postgrex.Extensions.HStore',
                        'Elixir.Postgrex.Extensions.INET',
                        'Elixir.Postgrex.Extensions.Int2',
                        'Elixir.Postgrex.Extensions.Int4',
                        'Elixir.Postgrex.Extensions.Int8',
                        'Elixir.Postgrex.Extensions.Interval',
                        'Elixir.Postgrex.Extensions.JSON',
                        'Elixir.Postgrex.Extensions.JSONB',
                        'Elixir.Postgrex.Extensions.Line',
                        'Elixir.Postgrex.Extensions.LineSegment',
                        'Elixir.Postgrex.Extensions.MACADDR',
                        'Elixir.Postgrex.Extensions.Name',
                        'Elixir.Postgrex.Extensions.Numeric',
                        'Elixir.Postgrex.Extensions.OID',
                        'Elixir.Postgrex.Extensions.Path',
                        'Elixir.Postgrex.Extensions.Point',
                        'Elixir.Postgrex.Extensions.Polygon',
                        'Elixir.Postgrex.Extensions.Range',
                        'Elixir.Postgrex.Extensions.Raw',
                        'Elixir.Postgrex.Extensions.Record',
                        'Elixir.Postgrex.Extensions.TID',
                        'Elixir.Postgrex.Extensions.TSVector',
                        'Elixir.Postgrex.Extensions.Time',
                        'Elixir.Postgrex.Extensions.TimeTZ',
                        'Elixir.Postgrex.Extensions.Timestamp',
                        'Elixir.Postgrex.Extensions.TimestampTZ',
                        'Elixir.Postgrex.Extensions.UUID',
                        'Elixir.Postgrex.Extensions.VoidBinary',
                        'Elixir.Postgrex.Extensions.VoidText',
                        'Elixir.Postgrex.INET','Elixir.Postgrex.Interval',
                        'Elixir.Postgrex.Lexeme','Elixir.Postgrex.Line',
                        'Elixir.Postgrex.LineSegment',
                        'Elixir.Postgrex.MACADDR','Elixir.Postgrex.Messages',
                        'Elixir.Postgrex.Notifications',
                        'Elixir.Postgrex.Parameters','Elixir.Postgrex.Path',
                        'Elixir.Postgrex.Point','Elixir.Postgrex.Polygon',
                        'Elixir.Postgrex.Protocol','Elixir.Postgrex.Query',
                        'Elixir.Postgrex.QueryError','Elixir.Postgrex.Range',
                        'Elixir.Postgrex.Result','Elixir.Postgrex.SCRAM',
                        'Elixir.Postgrex.Stream',
                        'Elixir.Postgrex.SuperExtension',
                        'Elixir.Postgrex.TypeInfo',
                        'Elixir.Postgrex.TypeModule',
                        'Elixir.Postgrex.TypeServer',
                        'Elixir.Postgrex.TypeSupervisor',
                        'Elixir.Postgrex.Types','Elixir.Postgrex.Utils',
                        'Elixir.String.Chars.Postgrex.Copy',
                        'Elixir.String.Chars.Postgrex.Query']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,connection,crypto,db_connection,
                        decimal,logger]},
                   {included_applications,[]},
                   {env,
                       [{type_server_reap_after,180000},
                        {json_library,'Elixir.Jason'}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Postgrex.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,crontab,
                  [{description,
                       "Parse Cron Format Strings, Write Cron Format Strings and Calculate Execution Dates.\n"},
                   {vsn,"1.1.10"},
                   {id,[]},
                   {modules,
                       ['Elixir.Crontab.CronExpression',
                        'Elixir.Crontab.CronExpression.Composer',
                        'Elixir.Crontab.CronExpression.Ecto.Type',
                        'Elixir.Crontab.CronExpression.Parser',
                        'Elixir.Crontab.DateChecker',
                        'Elixir.Crontab.DateHelper',
                        'Elixir.Crontab.Scheduler',
                        'Elixir.Inspect.Crontab.CronExpression']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,gen_stage,
                  [{description,
                       "Producer and consumer pipelines with back-pressure for Elixir"},
                   {vsn,"0.14.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.ConsumerSupervisor',
                        'Elixir.ConsumerSupervisor.Default','Elixir.GenStage',
                        'Elixir.GenStage.BroadcastDispatcher',
                        'Elixir.GenStage.Buffer',
                        'Elixir.GenStage.DemandDispatcher',
                        'Elixir.GenStage.Dispatcher',
                        'Elixir.GenStage.PartitionDispatcher',
                        'Elixir.GenStage.Stream','Elixir.GenStage.Streamer',
                        'Elixir.GenStage.Utils']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,quantum,
                  [{description,"Cron-like job scheduler for Elixir."},
                   {vsn,"2.2.7"},
                   {id,[]},
                   {modules,
                       ['Elixir.Quantum','Elixir.Quantum.Application',
                        'Elixir.Quantum.DateLibrary',
                        'Elixir.Quantum.DateLibrary.Calendar',
                        'Elixir.Quantum.DateLibrary.InvalidDateTimeForTimezoneError',
                        'Elixir.Quantum.DateLibrary.InvalidTimezoneError',
                        'Elixir.Quantum.DateLibrary.Timex',
                        'Elixir.Quantum.ExecutionBroadcaster',
                        'Elixir.Quantum.ExecutionBroadcaster.JobInPastError',
                        'Elixir.Quantum.Executor',
                        'Elixir.Quantum.ExecutorSupervisor',
                        'Elixir.Quantum.Job','Elixir.Quantum.JobBroadcaster',
                        'Elixir.Quantum.Normalizer',
                        'Elixir.Quantum.RunStrategy',
                        'Elixir.Quantum.RunStrategy.All',
                        'Elixir.Quantum.RunStrategy.Local',
                        'Elixir.Quantum.RunStrategy.NodeList',
                        'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.All',
                        'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.Local',
                        'Elixir.Quantum.RunStrategy.NodeList.Quantum.RunStrategy.Random',
                        'Elixir.Quantum.RunStrategy.Random',
                        'Elixir.Quantum.Scheduler',
                        'Elixir.Quantum.Supervisor',
                        'Elixir.Quantum.TaskRegistry',
                        'Elixir.Quantum.TaskStagesSupervisor',
                        'Elixir.Quantum.Util']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,crontab,gen_stage,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Quantum.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,sched_ex,
                  [{description,
                       "SchedEx is a simple yet deceptively powerful scheduling library for Elixir."},
                   {vsn,"1.1.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.SchedEx','Elixir.SchedEx.IdentityTimeScale',
                        'Elixir.SchedEx.Runner','Elixir.SchedEx.Stats',
                        'Elixir.SchedEx.Stats.Value',
                        'Elixir.SchedEx.TimeScale']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crontab,logger,timex]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,skooma,
                  [{description,"Data structure validator for elixir"},
                   {vsn,"0.2.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Skooma','Elixir.Skooma.Basic',
                        'Elixir.Skooma.Map','Elixir.Skooma.Utils',
                        'Elixir.Skooma.Validators']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,telemetry_poller,
                  [{description,
                       "Periodically collect measurements and dispatch them as Telemetry events."},
                   {vsn,"0.5.1"},
                   {id,[]},
                   {modules,
                       [telemetry_poller,telemetry_poller_app,
                        telemetry_poller_builtin,telemetry_poller_sup]},
                   {registered,[]},
                   {applications,[kernel,stdlib,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{telemetry_poller_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,websockex,
                  [{description,"An Elixir WebSocket client"},
                   {vsn,"0.4.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.WebSockex','Elixir.WebSockex.Application',
                        'Elixir.WebSockex.ApplicationError',
                        'Elixir.WebSockex.BadResponseError',
                        'Elixir.WebSockex.CallingSelfError',
                        'Elixir.WebSockex.Conn','Elixir.WebSockex.ConnError',
                        'Elixir.WebSockex.FragmentParseError',
                        'Elixir.WebSockex.Frame',
                        'Elixir.WebSockex.FrameEncodeError',
                        'Elixir.WebSockex.FrameError',
                        'Elixir.WebSockex.HandshakeError',
                        'Elixir.WebSockex.InvalidFrameError',
                        'Elixir.WebSockex.NotConnectedError',
                        'Elixir.WebSockex.RequestError',
                        'Elixir.WebSockex.URLError','Elixir.WebSockex.Utils']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crypto,logger,ssl]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.WebSockex.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,yamerl,
                  [{description,"YAML 1.2 and JSON parser in pure Erlang"},
                   {vsn,"0.8.0"},
                   {id,[]},
                   {modules,
                       [yamerl,yamerl_app,yamerl_constr,yamerl_errors,
                        yamerl_node_binary,yamerl_node_bool,
                        yamerl_node_bool_ext,yamerl_node_bool_json,
                        yamerl_node_erlang_atom,yamerl_node_erlang_fun,
                        yamerl_node_float,yamerl_node_float_ext,
                        yamerl_node_float_json,yamerl_node_int,
                        yamerl_node_int_ext,yamerl_node_int_json,
                        yamerl_node_ipaddr,yamerl_node_map,yamerl_node_null,
                        yamerl_node_null_json,yamerl_node_seq,
                        yamerl_node_size,yamerl_node_str,yamerl_node_str_json,
                        yamerl_node_timestamp,yamerl_parser,yamerl_sup,
                        yamerl_yamler_compat]},
                   {registered,[yamerl_sup]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[{node_mods,[]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{yamerl_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,yaml_elixir,
                  [{description,
                       "Yaml parser for Elixir based on native Erlang implementation.\n"},
                   {vsn,"2.4.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.YamlElixir',
                        'Elixir.YamlElixir.FileNotFoundError',
                        'Elixir.YamlElixir.Mapper',
                        'Elixir.YamlElixir.Node.KeywordList',
                        'Elixir.YamlElixir.ParsingError',
                        'Elixir.YamlElixir.Records',
                        'Elixir.YamlElixir.Sigil']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,yamerl]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,invet_hub,
                  [{description,"invet_hub"},
                   {vsn,"0.1.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.InvetHub','Elixir.InvetHub.Accounts.User',
                        'Elixir.InvetHub.Application','Elixir.InvetHub.Auth',
                        'Elixir.InvetHub.Catalog.Branch',
                        'Elixir.InvetHub.Catalog.Report',
                        'Elixir.InvetHub.Catalog.Variation',
                        'Elixir.InvetHub.Email',
                        'Elixir.InvetHub.Inventory.Inventory',
                        'Elixir.InvetHub.Inventory.InventoryHistory',
                        'Elixir.InvetHub.Logs',
                        'Elixir.InvetHub.Logs.System_logs',
                        'Elixir.InvetHub.Logs.User_logs',
                        'Elixir.InvetHub.Mailer','Elixir.InvetHub.Repo',
                        'Elixir.InvetHubWeb',
                        'Elixir.InvetHubWeb.CatalogController',
                        'Elixir.InvetHubWeb.CatalogView',
                        'Elixir.InvetHubWeb.DashboardController',
                        'Elixir.InvetHubWeb.DashboardView',
                        'Elixir.InvetHubWeb.Endpoint',
                        'Elixir.InvetHubWeb.ErrorHelpers',
                        'Elixir.InvetHubWeb.ErrorView',
                        'Elixir.InvetHubWeb.Gettext',
                        'Elixir.InvetHubWeb.InventoryController',
                        'Elixir.InvetHubWeb.InventoryView',
                        'Elixir.InvetHubWeb.LayoutView',
                        'Elixir.InvetHubWeb.PageController',
                        'Elixir.InvetHubWeb.PageView',
                        'Elixir.InvetHubWeb.Plugs.RequireAuth',
                        'Elixir.InvetHubWeb.Plugs.SessionTimeout',
                        'Elixir.InvetHubWeb.Plugs.SetBranch',
                        'Elixir.InvetHubWeb.Plugs.SetUser',
                        'Elixir.InvetHubWeb.ReportsController',
                        'Elixir.InvetHubWeb.ReportsView',
                        'Elixir.InvetHubWeb.Router',
                        'Elixir.InvetHubWeb.Router.Helpers',
                        'Elixir.InvetHubWeb.SessionController',
                        'Elixir.InvetHubWeb.SessionView',
                        'Elixir.InvetHubWeb.Telemetry',
                        'Elixir.InvetHubWeb.UserController',
                        'Elixir.InvetHubWeb.UserSocket',
                        'Elixir.InvetHubWeb.UserView']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,runtime_tools,absinthe,
                        absinthe_plug,bamboo,bamboo_smtp,cachex,calendar,cuid,
                        date_time_parser,ecto_sql,endon,ex_doc,gen_smtp,
                        gettext,jason,logger,myxql,phoenix,phoenix_ecto,
                        phoenix_html,phoenix_live_dashboard,phone,plug_cowboy,
                        postgrex,quantum,sched_ex,skooma,telemetry_metrics,
                        telemetry_poller,timex,websockex,yaml_elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.InvetHub.Application',[]}}]}]}},
     {progress,applications_loaded},
     {apply,{application,start_boot,[kernel,permanent]}},
     {apply,{application,start_boot,[stdlib,permanent]}},
     {apply,{application,start_boot,[compiler,permanent]}},
     {apply,{application,start_boot,[elixir,permanent]}},
     {apply,{application,start_boot,[sasl,permanent]}},
     {apply,{application,start_boot,[runtime_tools,permanent]}},
     {apply,{application,start_boot,[logger,permanent]}},
     {apply,{application,start_boot,[nimble_parsec,permanent]}},
     {apply,{application,start_boot,[telemetry,permanent]}},
     {apply,{application,start_boot,[absinthe,permanent]}},
     {apply,{application,start_boot,[eex,permanent]}},
     {apply,{application,start_boot,[mime,permanent]}},
     {apply,{application,start_boot,[crypto,permanent]}},
     {apply,{application,start_boot,[plug_crypto,permanent]}},
     {apply,{application,start_boot,[plug,permanent]}},
     {apply,{application,start_boot,[absinthe_plug,permanent]}},
     {apply,{application,start_boot,[asn1,permanent]}},
     {apply,{application,start_boot,[certifi,permanent]}},
     {apply,{application,start_boot,[unicode_util_compat,permanent]}},
     {apply,{application,start_boot,[idna,permanent]}},
     {apply,{application,start_boot,[metrics,permanent]}},
     {apply,{application,start_boot,[mimerl,permanent]}},
     {apply,{application,start_boot,[syntax_tools,permanent]}},
     {apply,{application,start_boot,[parse_trans,permanent]}},
     {apply,{application,start_boot,[public_key,permanent]}},
     {apply,{application,start_boot,[ssl,permanent]}},
     {apply,{application,start_boot,[ssl_verify_fun,permanent]}},
     {apply,{application,start_boot,[hackney,permanent]}},
     {apply,{application,start_boot,[bamboo,permanent]}},
     {apply,{application,start_boot,[gen_smtp,permanent]}},
     {apply,{application,start_boot,[bamboo_smtp,permanent]}},
     {apply,{application,start_boot,[eternal,permanent]}},
     {apply,{application,start_boot,[sleeplocks,permanent]}},
     {apply,{application,start_boot,[cachex,permanent]}},
     {apply,{application,start_boot,[tzdata,permanent]}},
     {apply,{application,start_boot,[calendar,permanent]}},
     {apply,{application,start_boot,[cuid,permanent]}},
     {apply,{application,start_boot,[combine,permanent]}},
     {apply,{application,start_boot,[gettext,permanent]}},
     {apply,{application,start_boot,[timex,permanent]}},
     {apply,{application,start_boot,[date_time_parser,permanent]}},
     {apply,{application,start_boot,[connection,permanent]}},
     {apply,{application,start_boot,[db_connection,permanent]}},
     {apply,{application,start_boot,[decimal,permanent]}},
     {apply,{application,start_boot,[ecto,permanent]}},
     {apply,{application,start_boot,[ecto_sql,permanent]}},
     {apply,{application,start_boot,[endon,permanent]}},
     {apply,{application,start_boot,[earmark_parser,permanent]}},
     {apply,{application,start_boot,[makeup,permanent]}},
     {apply,{application,start_boot,[makeup_elixir,permanent]}},
     {apply,{application,start_boot,[ex_doc,permanent]}},
     {apply,{application,start_boot,[jason,permanent]}},
     {apply,{application,start_boot,[myxql,permanent]}},
     {apply,{application,start_boot,[phoenix_pubsub,permanent]}},
     {apply,{application,start_boot,[phoenix,permanent]}},
     {apply,{application,start_boot,[phoenix_ecto,permanent]}},
     {apply,{application,start_boot,[phoenix_html,permanent]}},
     {apply,{application,start_boot,[phoenix_live_view,permanent]}},
     {apply,{application,start_boot,[telemetry_metrics,permanent]}},
     {apply,{application,start_boot,[phoenix_live_dashboard,permanent]}},
     {apply,{application,start_boot,[phone,permanent]}},
     {apply,{application,start_boot,[cowlib,permanent]}},
     {apply,{application,start_boot,[ranch,permanent]}},
     {apply,{application,start_boot,[cowboy,permanent]}},
     {apply,{application,start_boot,[plug_cowboy,permanent]}},
     {apply,{application,start_boot,[postgrex,permanent]}},
     {apply,{application,start_boot,[crontab,permanent]}},
     {apply,{application,start_boot,[gen_stage,permanent]}},
     {apply,{application,start_boot,[quantum,permanent]}},
     {apply,{application,start_boot,[sched_ex,permanent]}},
     {apply,{application,start_boot,[skooma,permanent]}},
     {apply,{application,start_boot,[telemetry_poller,permanent]}},
     {apply,{application,start_boot,[websockex,permanent]}},
     {apply,{application,start_boot,[yamerl,permanent]}},
     {apply,{application,start_boot,[yaml_elixir,permanent]}},
     {apply,{application,start_boot,[invet_hub,permanent]}},
     {progress,started}]}.
